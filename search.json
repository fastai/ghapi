[
  {
    "objectID": "page.html",
    "href": "page.html",
    "title": "Pagination",
    "section": "",
    "text": "Paged operations\nSome GitHub API operations return their results one page at a time. For instance, there are many thousands of gists, but if we call list_public we only see the first 30:\n\napi = GhApi()\n\n\ngists = api.gists.list_public()\nlen(gists)\n\n30\n\n\nThat’s because this operation takes two optional parameters, per_page, and page:\n\napi.gists.list_public\n\ngists.list_public(since, per_page, page): List public gists\n\n\nThis is a common pattern for list_* operations in the GitHub API. One way to get more results is to increase per_page:\n\nlen(api.gists.list_public(per_page=100))\n\n100\n\n\nHowever, per_page has a maximum of 100, so if you want more, you’ll have to pass page= to get pages beyond the first. An easy way to iterate through all pages is to use paged. paged returns a generator\n\nsource\n\n\npaged\n\n paged (oper, *args, per_page=30, max_pages=9999, **kwargs)\n\nConvert operation oper(*args,**kwargs) into an iterator\nWe’ll demonstrate this using the repos.list_for_org method:\n\napi.repos.list_for_org\n\nrepos.list_for_org(org, type, sort, direction, per_page, page): List organization repositories\n\n\n\nrepos = api.repos.list_for_org(org='fastai')\nlen(repos),repos[0].name\n\n(30, 'docs')\n\n\nTo convert this operation into a Python iterator, pass the operation itself, along with any arguments (either keyword or positional) to paged. Note how the function and arguments are passed separately:\n\nrepos = paged(api.repos.list_for_org, org='fastai')\n\nNote that the object returned from paged is a generator. You can iterate through this generator repos in the normal way:\n\nfor page in repos: print(len(page), page[0].name)\n\n30 docs\n30 fastscript\n25 wireguard-fast\n\n\n\n\nLink header (RFC 5988)\nGitHub tells us how many pages are available using the link header. Unfortunately the pypi LinkHeader library appears to no longer be maintained, so we’ve put a refactored version of it here.\n\nsource\n\n\nparse_link_hdr\n\n parse_link_hdr (header)\n\nParse an RFC 5988 link header, returning a dict from rels to a tuple of URL and attrs dict\nHere’s an example of a link header with just one link:\n\nparse_link_hdr('&lt;http://example.com&gt;; rel=\"foo bar\"; type=text/html')\n\n{'foo bar': ('http://example.com', {'type': 'text/html'})}\n\n\n\nlinks = parse_link_hdr('&lt;http://example.com&gt;; rel=\"foo bar\"; type=text/html')\nlink = links['foo bar']\ntest_eq(link[0], 'http://example.com')\ntest_eq(link[1]['type'], 'text/html')\n\nLet’s test it on the headers we received on our last call to GitHub. You can access the last call’s headers in `recv_hdrs’:\n\napi.recv_hdrs['Link']\n\n'&lt;https://api.github.com/organizations/20547620/repos?per_page=30&page=4&gt;; rel=\"prev\", &lt;https://api.github.com/organizations/20547620/repos?per_page=30&page=4&gt;; rel=\"last\", &lt;https://api.github.com/organizations/20547620/repos?per_page=30&page=1&gt;; rel=\"first\"'\n\n\nHere’s what happens when we parse that:\n\nparse_link_hdr(api.recv_hdrs['Link'])\n\n{'prev': ('https://api.github.com/organizations/20547620/repos?per_page=30&page=4',\n  {}),\n 'last': ('https://api.github.com/organizations/20547620/repos?per_page=30&page=4',\n  {}),\n 'first': ('https://api.github.com/organizations/20547620/repos?per_page=30&page=1',\n  {})}\n\n\n\n\nGetting pages in parallel\nRather than requesting each page one at a time, we can save some time by getting all the pages we need in parallel.\n\nsource\n\n\nGhApi.last_page\n\n GhApi.last_page ()\n\nParse RFC 5988 link header from most recent operation, and extract the last page\nTo help us know the number of pages needed, we can use last_page, which uses the link header we just looked at to grab the last page from GitHub.\nWe will need multiple pages to get all the repos in the github organization, even if we get 100 at a time:\n\napi.repos.list_for_org('github', per_page=100)\napi.last_page()\n\n4\n\n\n\nsource\n\n\npages\n\n pages (oper, n_pages, *args, n_workers=None, per_page=100, **kwargs)\n\nGet n_pages pages from oper(*args,**kwargs)\npages by default passes per_page=100 to the operation.\nLet’s look at some examples. To get all the pages for the repos in the github organization in parallel, we can use this:\n\ngh_repos = pages(api.repos.list_for_org, api.last_page(), 'github').concat()\nlen(gh_repos)\n\n367\n\n\nIf you already know ahead of time the number of pages required, there’s no need to call last_page. For instance, the GitHub docs specify that we can get at most 3000 gists:\n\ngists = pages(api.gists.list_public, 30).concat()\nlen(gists)\n\n3000\n\n\nGitHub ignores the per_page parameter for some API calls, such as listing public events, which it limits to 8 pages of 30 items per page. To retrieve all pages in these cases, you need to explicitly pass the lower per page limit:\n\napi.activity.list_public_events()\napi.last_page()\n\n8\n\n\n\nevts = pages(api.activity.list_public_events, api.last_page(), per_page=30).concat()\nlen(evts)\n\n232",
    "crumbs": [
      "Pagination"
    ]
  },
  {
    "objectID": "actions.html",
    "href": "actions.html",
    "title": "GitHub Actions details",
    "section": "",
    "text": "In your GitHub Actions workflow, include the following in your run step:\nenv:\n  CONTEXT_GITHUB: ${{ toJson(github) }}\nThis stores the full github context, which includes information such as the name of the current workflow being run, the GitHub access token, and so forth.\nAs well as the github context, you can do that same thing for any of the other GitHub Actions contexts, which are:\ngithub env job steps runner secrets strategy matrix needs\nFor instance, for the needs context, information about previous jobs specified in your needs clause, add this underneath your CONTEXT_GITHUB line:\n  CONTEXT_NEEDS: ${{ toJson(needs) }}\nNote that here’s no harm having entries that are not used – GitHub Actions will set them to an empty dictionary by default.\nGitHub also adds a number of GITHUB_* environment variables to all runners. These are available through the env_github AttrDict, with the GITHUB_ prefix removed, and remainder converted to lowercase. For instance:\n\nenv_github.repository\n\n'octocat/Hello-World'\n\n\n\nsource\n\n\n\n user_repo ()\n\nList of user,repo from `env_github.repository\n\nuser_repo()\n\n['octocat', 'Hello-World']\n\n\nThe possible events are available in the Event enum.\n\n', '.join(Event)\n\n'page_build, content_reference, repository_import, create, workflow_run, delete, organization, sponsorship, project_column, push, context, milestone, project_card, project, package, pull_request, repository_dispatch, team_add, workflow_dispatch, member, meta, code_scanning_alert, public, needs, check_run, security_advisory, pull_request_review_comment, org_block, commit_comment, watch, marketplace_purchase, star, installation_repositories, check_suite, github_app_authorization, team, status, repository_vulnerability_alert, pull_request_review, label, installation, release, issues, repository, gollum, membership, deployment, deploy_key, issue_comment, ping, deployment_status, fork, schedule'\n\n\n\nsource\n\n\n\n\n create_workflow_files (fname:str, workflow:str, build_script:str,\n                        prebuild:bool=False)\n\nCreate workflow and script files in suitable places in github folder\n\nsource\n\n\n\n\n fill_workflow_templates (name:str, event, run, context, script,\n                          opersys='ubuntu', prebuild=False)\n\nFunction to create a simple Ubuntu workflow that calls a Python ghapi script\nevent is the event to trigger on. run is the shell lines to run before running the script, such as a pip install step. context are the env var context lines to include in the env: section of the workflow, normally created with env_contexts. opersys can be a string containing a comma-separated list of operating systems, e.g. macos, ubuntu, windows, which will be used to create a parallel matrix build.\nThe prebuild bool tells ghapi to include a prebuild job, which contains the following workflow:\nruns-on: ubuntu-latest\noutputs:\n  out: ${{ toJson(steps) }}\nsteps:\n- uses: actions/checkout@v1\n- uses: actions/setup-python@v2\n  with: {python-version: '3.8'}\n- name: Create release\n  id: step1\n  env:\n    CONTEXT_GITHUB: ${{ toJson(github) }}\n  run: |\n    pip install -q ghapi\n    python .github/scripts/prebuild.py\n\nsource\n\n\n\n\n env_contexts (contexts)\n\nCreate a suitable env: line for a workflow to make a context available in the environment\n\nsource\n\n\n\n\n create_workflow (name:str, event:fastcore.basics.Event,\n                  contexts:list=None, opersys='ubuntu', prebuild=False)\n\nFunction to create a simple Ubuntu workflow that calls a Python ghapi script\n\ncreate_workflow('test', Event.release)\n\nTo create a basic ghapi workflow, call create_workflow, passing in the event that you wish to respond to, and a name for your workflow.\n\nsource\n\n\n\n\n gh_create_workflow (name:str, event:str, contexts:str='')\n\nSupports gh-create-workflow, a CLI wrapper for create_workflow.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nname\nstr\n\nName of the workflow file\n\n\nevent\nstr\n\nEvent to listen for\n\n\ncontexts\nstr\n\nSpace-delimited extra contexts to include in env in addition to github",
    "crumbs": [
      "GitHub Actions details"
    ]
  },
  {
    "objectID": "actions.html#workflow-setup",
    "href": "actions.html#workflow-setup",
    "title": "GitHub Actions details",
    "section": "",
    "text": "In your GitHub Actions workflow, include the following in your run step:\nenv:\n  CONTEXT_GITHUB: ${{ toJson(github) }}\nThis stores the full github context, which includes information such as the name of the current workflow being run, the GitHub access token, and so forth.\nAs well as the github context, you can do that same thing for any of the other GitHub Actions contexts, which are:\ngithub env job steps runner secrets strategy matrix needs\nFor instance, for the needs context, information about previous jobs specified in your needs clause, add this underneath your CONTEXT_GITHUB line:\n  CONTEXT_NEEDS: ${{ toJson(needs) }}\nNote that here’s no harm having entries that are not used – GitHub Actions will set them to an empty dictionary by default.\nGitHub also adds a number of GITHUB_* environment variables to all runners. These are available through the env_github AttrDict, with the GITHUB_ prefix removed, and remainder converted to lowercase. For instance:\n\nenv_github.repository\n\n'octocat/Hello-World'\n\n\n\nsource\n\n\n\n user_repo ()\n\nList of user,repo from `env_github.repository\n\nuser_repo()\n\n['octocat', 'Hello-World']\n\n\nThe possible events are available in the Event enum.\n\n', '.join(Event)\n\n'page_build, content_reference, repository_import, create, workflow_run, delete, organization, sponsorship, project_column, push, context, milestone, project_card, project, package, pull_request, repository_dispatch, team_add, workflow_dispatch, member, meta, code_scanning_alert, public, needs, check_run, security_advisory, pull_request_review_comment, org_block, commit_comment, watch, marketplace_purchase, star, installation_repositories, check_suite, github_app_authorization, team, status, repository_vulnerability_alert, pull_request_review, label, installation, release, issues, repository, gollum, membership, deployment, deploy_key, issue_comment, ping, deployment_status, fork, schedule'\n\n\n\nsource\n\n\n\n\n create_workflow_files (fname:str, workflow:str, build_script:str,\n                        prebuild:bool=False)\n\nCreate workflow and script files in suitable places in github folder\n\nsource\n\n\n\n\n fill_workflow_templates (name:str, event, run, context, script,\n                          opersys='ubuntu', prebuild=False)\n\nFunction to create a simple Ubuntu workflow that calls a Python ghapi script\nevent is the event to trigger on. run is the shell lines to run before running the script, such as a pip install step. context are the env var context lines to include in the env: section of the workflow, normally created with env_contexts. opersys can be a string containing a comma-separated list of operating systems, e.g. macos, ubuntu, windows, which will be used to create a parallel matrix build.\nThe prebuild bool tells ghapi to include a prebuild job, which contains the following workflow:\nruns-on: ubuntu-latest\noutputs:\n  out: ${{ toJson(steps) }}\nsteps:\n- uses: actions/checkout@v1\n- uses: actions/setup-python@v2\n  with: {python-version: '3.8'}\n- name: Create release\n  id: step1\n  env:\n    CONTEXT_GITHUB: ${{ toJson(github) }}\n  run: |\n    pip install -q ghapi\n    python .github/scripts/prebuild.py\n\nsource\n\n\n\n\n env_contexts (contexts)\n\nCreate a suitable env: line for a workflow to make a context available in the environment\n\nsource\n\n\n\n\n create_workflow (name:str, event:fastcore.basics.Event,\n                  contexts:list=None, opersys='ubuntu', prebuild=False)\n\nFunction to create a simple Ubuntu workflow that calls a Python ghapi script\n\ncreate_workflow('test', Event.release)\n\nTo create a basic ghapi workflow, call create_workflow, passing in the event that you wish to respond to, and a name for your workflow.\n\nsource\n\n\n\n\n gh_create_workflow (name:str, event:str, contexts:str='')\n\nSupports gh-create-workflow, a CLI wrapper for create_workflow.\n\n\n\n\n\n\n\n\n\n\nType\nDefault\nDetails\n\n\n\n\nname\nstr\n\nName of the workflow file\n\n\nevent\nstr\n\nEvent to listen for\n\n\ncontexts\nstr\n\nSpace-delimited extra contexts to include in env in addition to github",
    "crumbs": [
      "GitHub Actions details"
    ]
  },
  {
    "objectID": "actions.html#accessing-contexts-from-python",
    "href": "actions.html#accessing-contexts-from-python",
    "title": "GitHub Actions details",
    "section": "Accessing contexts from Python",
    "text": "Accessing contexts from Python\nThe information from these variables are provided by context_github, context_needs, and so forth for each named context. These variables are AttrDict objects.\n\nL(context_github)\n\n(#26) ['token','job','ref','sha','repository','repository_owner','repositoryUrl','run_id','run_number','retention_days'...]\n\n\n\ncontext_github.ref\n\n'refs/heads/master'\n\n\nIf you use our recommended workflow template, you will have this included in your prebuild step (if you have any):\noutputs:\n  out: ${{ toJson(steps) }}\nYou can access this content as a dictionary like so:\n\nloads(nested_idx(context_needs, \"prebuild\", \"outputs\", \"out\"))\n\n{'step1': {'outputs': {'tag': 'v0.79.0'},\n  'outcome': 'success',\n  'conclusion': 'success'}}\n\n\n\nsource\n\nexample_payload\n\n example_payload (event)\n\nGet an example of a JSON payload for event",
    "crumbs": [
      "GitHub Actions details"
    ]
  },
  {
    "objectID": "actions.html#workflow-helper-functions",
    "href": "actions.html#workflow-helper-functions",
    "title": "GitHub Actions details",
    "section": "Workflow helper functions",
    "text": "Workflow helper functions\n\nsource\n\ngithub_token\n\n github_token ()\n\nGet GitHub token from GITHUB_TOKEN env var if available, or from github context\n\nsource\n\n\nactions_output\n\n actions_output (name, value)\n\nPrint the special GitHub Actions ::set-output line for name::value\nDetails in the GitHub Documentation for set-output.\n\nsource\n\n\nactions_debug\n\n actions_debug (message)\n\nPrint the special ::debug line for message\nDetails in the GitHub Documentation for debug. Note that you must create a secret named ACTIONS_STEP_DEBUG with the value true to see the debug messages set by this command in the log.\n\nsource\n\n\nactions_warn\n\n actions_warn (message, details='')\n\nPrint the special ::warning line for message\nDetails in the GitHub Documentation for warning. For the optional details, you can provide comma-delimited file, line, and column information, e.g.: file=app.js,line=1,col=5.\n\nsource\n\n\nactions_error\n\n actions_error (message, details='')\n\nPrint the special ::error line for message\nDetails in the GitHub Documentation for error. For the optional details, you can provide comma-delimited file, line, and column information, e.g.: file=app.js,line=1,col=5.\n\nsource\n\n\nactions_group\n\n actions_group (title)\n\nContext manager to print the special ::group/::endgroup lines for title\n\nwith actions_group('Adding numbers...'): print(1+1)\n\n::group::Adding numbers...\n2\n::endgroup::\n\n\nDetails in the GitHub Documentation for grouping log lines.\n\nsource\n\n\nactions_mask\n\n actions_mask (value)\n\nPrint the special ::add-mask line for value\nDetails in the GitHub Documentation for add-mask.\n\nsource\n\n\nset_git_user\n\n set_git_user (api=None)\n\nSet git user name/email to authenticated user (if api) or GitHub Actions bot (otherwise)\nWhen pushing to git from a workflow, you’ll need to set your username and email address. You can set them to the GhApi authenticated user’s details by passing api. Otherwise, github-actions[bot] and github-actions[bot]@users.noreply.github.com will be used, which will make a push appear to be from “GitHub Actions”.",
    "crumbs": [
      "GitHub Actions details"
    ]
  },
  {
    "objectID": "CHANGELOG.html",
    "href": "CHANGELOG.html",
    "title": "Release notes",
    "section": "",
    "text": "Automatically decode response based on path (#183), thanks to @radam9\nExpose timeout #174), thanks to @HarikrishnanBalagopal\n\n\n\n\n\nGithub now requires branch, author, and committer in file update calls (#184)\nRemove the check which removes None values (#171), thanks to @shreve\n\n\n\n\n\n\n\n\nadd authenticate arg which allows unauthenticated GhApi clients even if GITHUB_TOKEN is set (#150), thanks to @seeM\n\n\n\n\n\n\n\n\nwarn if no GitHub token found (#145)\nset GITHUB_DEBUG=1 to print requests sent to GitHub\n\n\n\n\n\n\n\n\nadd delete_file and create_file (#143)\nAdd a “Documentation” link to the sidebar on PyPI (#106), thanks to @nedbat\nAdd support for media types (#102), thanks to @lfdebrux\n\n\n\n\n\nFix links to GitHub docs (#136), thanks to @hwine\n\n\n\n\n\n\n\n\nfix create_gist\n\n\n\n\n\n\n\n\nadd create_gist (#129)\n\n\n\n\n\nHTTP Error 422: Unprocessable Entity returned for issues.add_labels in version 0.1.17 (#69)\n\n\n\n\n\n\n\n\nRemove need to URL-quote some parameters (#54)\n\n\n\n\n\n\n\n\nHTTP Error 422: Unprocessable Entity returned for issues.add_labels (#69)\n\n\n\n\n\n\n\n\nFix ability to define scopes (#53), thanks to @danpalmer\n\n\n\n\n\n\n\n\nmake actions_group a context manager (#33)\n\n\n\n\n\n\n\n\ntext property for GhEvent (#23)\n\n\n\n\n\nbroken links in index.html page (#27)\nBug: paged does not pass kwargs to operation (#24)\n\n\n\n\n\n\n\n\nmissing import in auth (#21)\n\n\n\n\n\n\n\n\nmissing webbrowser import (#20)\n\n\n\n\n\n\nAdd load_sample_events, which loads a file of 1000 sample public events\n\n\n\n\n\n\n\nadd fetch_events (#19)\n\n\n\n\n\n\n\n\nparallel pages (#18)\nadd GhDeviceAuth (#15)\nadd date2gh (#14)\n\n\n\n\n\n\n\n\nadd paged (#13)\nadd gh_date (#12)\n\n\n\n\n\n\n\n\nadd list_tags and list_branches (#2)\n\n\n\n\n\nGhApi pickle recursion error (#3)\n\n\n\n\n\n\nFirst release with full API coverage"
  },
  {
    "objectID": "CHANGELOG.html#section",
    "href": "CHANGELOG.html#section",
    "title": "Release notes",
    "section": "",
    "text": "Automatically decode response based on path (#183), thanks to @radam9\nExpose timeout #174), thanks to @HarikrishnanBalagopal\n\n\n\n\n\nGithub now requires branch, author, and committer in file update calls (#184)\nRemove the check which removes None values (#171), thanks to @shreve"
  },
  {
    "objectID": "CHANGELOG.html#section-1",
    "href": "CHANGELOG.html#section-1",
    "title": "Release notes",
    "section": "",
    "text": "add authenticate arg which allows unauthenticated GhApi clients even if GITHUB_TOKEN is set (#150), thanks to @seeM"
  },
  {
    "objectID": "CHANGELOG.html#section-2",
    "href": "CHANGELOG.html#section-2",
    "title": "Release notes",
    "section": "",
    "text": "warn if no GitHub token found (#145)\nset GITHUB_DEBUG=1 to print requests sent to GitHub"
  },
  {
    "objectID": "CHANGELOG.html#section-3",
    "href": "CHANGELOG.html#section-3",
    "title": "Release notes",
    "section": "",
    "text": "add delete_file and create_file (#143)\nAdd a “Documentation” link to the sidebar on PyPI (#106), thanks to @nedbat\nAdd support for media types (#102), thanks to @lfdebrux\n\n\n\n\n\nFix links to GitHub docs (#136), thanks to @hwine"
  },
  {
    "objectID": "CHANGELOG.html#section-4",
    "href": "CHANGELOG.html#section-4",
    "title": "Release notes",
    "section": "",
    "text": "fix create_gist"
  },
  {
    "objectID": "CHANGELOG.html#section-5",
    "href": "CHANGELOG.html#section-5",
    "title": "Release notes",
    "section": "",
    "text": "add create_gist (#129)\n\n\n\n\n\nHTTP Error 422: Unprocessable Entity returned for issues.add_labels in version 0.1.17 (#69)"
  },
  {
    "objectID": "CHANGELOG.html#section-6",
    "href": "CHANGELOG.html#section-6",
    "title": "Release notes",
    "section": "",
    "text": "Remove need to URL-quote some parameters (#54)"
  },
  {
    "objectID": "CHANGELOG.html#section-7",
    "href": "CHANGELOG.html#section-7",
    "title": "Release notes",
    "section": "",
    "text": "HTTP Error 422: Unprocessable Entity returned for issues.add_labels (#69)"
  },
  {
    "objectID": "CHANGELOG.html#section-8",
    "href": "CHANGELOG.html#section-8",
    "title": "Release notes",
    "section": "",
    "text": "Fix ability to define scopes (#53), thanks to @danpalmer"
  },
  {
    "objectID": "CHANGELOG.html#section-9",
    "href": "CHANGELOG.html#section-9",
    "title": "Release notes",
    "section": "",
    "text": "make actions_group a context manager (#33)"
  },
  {
    "objectID": "CHANGELOG.html#section-10",
    "href": "CHANGELOG.html#section-10",
    "title": "Release notes",
    "section": "",
    "text": "text property for GhEvent (#23)\n\n\n\n\n\nbroken links in index.html page (#27)\nBug: paged does not pass kwargs to operation (#24)"
  },
  {
    "objectID": "CHANGELOG.html#section-11",
    "href": "CHANGELOG.html#section-11",
    "title": "Release notes",
    "section": "",
    "text": "missing import in auth (#21)"
  },
  {
    "objectID": "CHANGELOG.html#section-12",
    "href": "CHANGELOG.html#section-12",
    "title": "Release notes",
    "section": "",
    "text": "missing webbrowser import (#20)"
  },
  {
    "objectID": "CHANGELOG.html#section-13",
    "href": "CHANGELOG.html#section-13",
    "title": "Release notes",
    "section": "",
    "text": "Add load_sample_events, which loads a file of 1000 sample public events"
  },
  {
    "objectID": "CHANGELOG.html#section-14",
    "href": "CHANGELOG.html#section-14",
    "title": "Release notes",
    "section": "",
    "text": "add fetch_events (#19)"
  },
  {
    "objectID": "CHANGELOG.html#section-15",
    "href": "CHANGELOG.html#section-15",
    "title": "Release notes",
    "section": "",
    "text": "parallel pages (#18)\nadd GhDeviceAuth (#15)\nadd date2gh (#14)"
  },
  {
    "objectID": "CHANGELOG.html#section-16",
    "href": "CHANGELOG.html#section-16",
    "title": "Release notes",
    "section": "",
    "text": "add paged (#13)\nadd gh_date (#12)"
  },
  {
    "objectID": "CHANGELOG.html#section-17",
    "href": "CHANGELOG.html#section-17",
    "title": "Release notes",
    "section": "",
    "text": "add list_tags and list_branches (#2)\n\n\n\n\n\nGhApi pickle recursion error (#3)"
  },
  {
    "objectID": "CHANGELOG.html#section-18",
    "href": "CHANGELOG.html#section-18",
    "title": "Release notes",
    "section": "",
    "text": "First release with full API coverage"
  },
  {
    "objectID": "fullapi.html",
    "href": "fullapi.html",
    "title": "Full GitHub API reference",
    "section": "",
    "text": "By calling the full_docs method, we can get the name, documentation link, parameters, and summary for every endpoint in the GitHub API. Here is the full reference:\nMarkdown(GhApi().full_docs())\n\n\nactions\n\nactions.get_actions_cache_usage_for_enterprise(enterprise): Get GitHub Actions cache usage for an enterprise\nactions.set_actions_oidc_custom_issuer_policy_for_enterprise(enterprise, include_enterprise_slug): Set the GitHub Actions OIDC custom issuer policy for an enterprise\nactions.get_github_actions_default_workflow_permissions_enterprise(enterprise): Get default workflow permissions for an enterprise\nactions.set_github_actions_default_workflow_permissions_enterprise(enterprise, default_workflow_permissions, can_approve_pull_request_reviews): Set default workflow permissions for an enterprise\nactions.get_actions_cache_usage_for_org(org): Get GitHub Actions cache usage for an organization\nactions.get_actions_cache_usage_by_repo_for_org(org, per_page, page): List repositories with GitHub Actions cache usage for an organization\nactions.get_github_actions_permissions_organization(org): Get GitHub Actions permissions for an organization\nactions.set_github_actions_permissions_organization(org, enabled_repositories, allowed_actions): Set GitHub Actions permissions for an organization\nactions.list_selected_repositories_enabled_github_actions_organization(org, per_page, page): List selected repositories enabled for GitHub Actions in an organization\nactions.set_selected_repositories_enabled_github_actions_organization(org, selected_repository_ids): Set selected repositories enabled for GitHub Actions in an organization\nactions.enable_selected_repository_github_actions_organization(org, repository_id): Enable a selected repository for GitHub Actions in an organization\nactions.disable_selected_repository_github_actions_organization(org, repository_id): Disable a selected repository for GitHub Actions in an organization\nactions.get_allowed_actions_organization(org): Get allowed actions and reusable workflows for an organization\nactions.set_allowed_actions_organization(org, github_owned_allowed, verified_allowed, patterns_allowed): Set allowed actions and reusable workflows for an organization\nactions.get_github_actions_default_workflow_permissions_organization(org): Get default workflow permissions for an organization\nactions.set_github_actions_default_workflow_permissions_organization(org, default_workflow_permissions, can_approve_pull_request_reviews): Set default workflow permissions for an organization\nactions.list_self_hosted_runner_groups_for_org(org, per_page, page, visible_to_repository): List self-hosted runner groups for an organization\nactions.create_self_hosted_runner_group_for_org(org, name, visibility, selected_repository_ids, runners, allows_public_repositories, restricted_to_workflows, selected_workflows): Create a self-hosted runner group for an organization\nactions.get_self_hosted_runner_group_for_org(org, runner_group_id): Get a self-hosted runner group for an organization\nactions.update_self_hosted_runner_group_for_org(org, runner_group_id, name, visibility, allows_public_repositories, restricted_to_workflows, selected_workflows): Update a self-hosted runner group for an organization\nactions.delete_self_hosted_runner_group_from_org(org, runner_group_id): Delete a self-hosted runner group from an organization\nactions.list_repo_access_to_self_hosted_runner_group_in_org(org, runner_group_id, page, per_page): List repository access to a self-hosted runner group in an organization\nactions.set_repo_access_to_self_hosted_runner_group_in_org(org, runner_group_id, selected_repository_ids): Set repository access for a self-hosted runner group in an organization\nactions.add_repo_access_to_self_hosted_runner_group_in_org(org, runner_group_id, repository_id): Add repository access to a self-hosted runner group in an organization\nactions.remove_repo_access_to_self_hosted_runner_group_in_org(org, runner_group_id, repository_id): Remove repository access to a self-hosted runner group in an organization\nactions.list_self_hosted_runners_in_group_for_org(org, runner_group_id, per_page, page): List self-hosted runners in a group for an organization\nactions.set_self_hosted_runners_in_group_for_org(org, runner_group_id, runners): Set self-hosted runners in a group for an organization\nactions.add_self_hosted_runner_to_group_for_org(org, runner_group_id, runner_id): Add a self-hosted runner to a group for an organization\nactions.remove_self_hosted_runner_from_group_for_org(org, runner_group_id, runner_id): Remove a self-hosted runner from a group for an organization\nactions.list_self_hosted_runners_for_org(org, per_page, page): List self-hosted runners for an organization\nactions.list_runner_applications_for_org(org): List runner applications for an organization\nactions.create_registration_token_for_org(org): Create a registration token for an organization\nactions.create_remove_token_for_org(org): Create a remove token for an organization\nactions.get_self_hosted_runner_for_org(org, runner_id): Get a self-hosted runner for an organization\nactions.delete_self_hosted_runner_from_org(org, runner_id): Delete a self-hosted runner from an organization\nactions.list_labels_for_self_hosted_runner_for_org(org, runner_id): List labels for a self-hosted runner for an organization\nactions.add_custom_labels_to_self_hosted_runner_for_org(org, runner_id, labels): Add custom labels to a self-hosted runner for an organization\nactions.set_custom_labels_for_self_hosted_runner_for_org(org, runner_id, labels): Set custom labels for a self-hosted runner for an organization\nactions.remove_all_custom_labels_from_self_hosted_runner_for_org(org, runner_id): Remove all custom labels from a self-hosted runner for an organization\nactions.remove_custom_label_from_self_hosted_runner_for_org(org, runner_id, name): Remove a custom label from a self-hosted runner for an organization\nactions.list_org_secrets(org, per_page, page): List organization secrets\nactions.get_org_public_key(org): Get an organization public key\nactions.get_org_secret(org, secret_name): Get an organization secret\nactions.create_or_update_org_secret(org, secret_name, encrypted_value, key_id, visibility, selected_repository_ids): Create or update an organization secret\nactions.delete_org_secret(org, secret_name): Delete an organization secret\nactions.list_selected_repos_for_org_secret(org, secret_name, page, per_page): List selected repositories for an organization secret\nactions.set_selected_repos_for_org_secret(org, secret_name, selected_repository_ids): Set selected repositories for an organization secret\nactions.add_selected_repo_to_org_secret(org, secret_name, repository_id): Add selected repository to an organization secret\nactions.remove_selected_repo_from_org_secret(org, secret_name, repository_id): Remove selected repository from an organization secret\nactions.list_artifacts_for_repo(owner, repo, per_page, page): List artifacts for a repository\nactions.get_artifact(owner, repo, artifact_id): Get an artifact\nactions.delete_artifact(owner, repo, artifact_id): Delete an artifact\nactions.download_artifact(owner, repo, artifact_id, archive_format): Download an artifact\nactions.get_actions_cache_usage(owner, repo): Get GitHub Actions cache usage for a repository\nactions.get_actions_cache_list(owner, repo, per_page, page, ref, key, sort, direction): List GitHub Actions caches for a repository\nactions.delete_actions_cache_by_key(owner, repo, key, ref): Delete GitHub Actions caches for a repository (using a cache key)\nactions.delete_actions_cache_by_id(owner, repo, cache_id): Delete a GitHub Actions cache for a repository (using a cache ID)\nactions.get_job_for_workflow_run(owner, repo, job_id): Get a job for a workflow run\nactions.download_job_logs_for_workflow_run(owner, repo, job_id): Download job logs for a workflow run\nactions.re_run_job_for_workflow_run(owner, repo, job_id, enable_debug_logging): Re-run a job from a workflow run\nactions.get_custom_oidc_sub_claim_for_repo(owner, repo): Get the opt-out flag of an OIDC subject claim customization for a repository\nactions.set_custom_oidc_sub_claim_for_repo(owner, repo, use_default): Set the opt-out flag of an OIDC subject claim customization for a repository\nactions.get_github_actions_permissions_repository(owner, repo): Get GitHub Actions permissions for a repository\nactions.set_github_actions_permissions_repository(owner, repo, enabled, allowed_actions): Set GitHub Actions permissions for a repository\nactions.get_workflow_access_to_repository(owner, repo): Get the level of access for workflows outside of the repository\nactions.set_workflow_access_to_repository(owner, repo, access_level): Set the level of access for workflows outside of the repository\nactions.get_allowed_actions_repository(owner, repo): Get allowed actions and reusable workflows for a repository\nactions.set_allowed_actions_repository(owner, repo, github_owned_allowed, verified_allowed, patterns_allowed): Set allowed actions and reusable workflows for a repository\nactions.get_github_actions_default_workflow_permissions_repository(owner, repo): Get default workflow permissions for a repository\nactions.set_github_actions_default_workflow_permissions_repository(owner, repo, default_workflow_permissions, can_approve_pull_request_reviews): Set default workflow permissions for a repository\nactions.list_self_hosted_runners_for_repo(owner, repo, per_page, page): List self-hosted runners for a repository\nactions.list_runner_applications_for_repo(owner, repo): List runner applications for a repository\nactions.create_registration_token_for_repo(owner, repo): Create a registration token for a repository\nactions.create_remove_token_for_repo(owner, repo): Create a remove token for a repository\nactions.get_self_hosted_runner_for_repo(owner, repo, runner_id): Get a self-hosted runner for a repository\nactions.delete_self_hosted_runner_from_repo(owner, repo, runner_id): Delete a self-hosted runner from a repository\nactions.list_labels_for_self_hosted_runner_for_repo(owner, repo, runner_id): List labels for a self-hosted runner for a repository\nactions.add_custom_labels_to_self_hosted_runner_for_repo(owner, repo, runner_id, labels): Add custom labels to a self-hosted runner for a repository\nactions.set_custom_labels_for_self_hosted_runner_for_repo(owner, repo, runner_id, labels): Set custom labels for a self-hosted runner for a repository\nactions.remove_all_custom_labels_from_self_hosted_runner_for_repo(owner, repo, runner_id): Remove all custom labels from a self-hosted runner for a repository\nactions.remove_custom_label_from_self_hosted_runner_for_repo(owner, repo, runner_id, name): Remove a custom label from a self-hosted runner for a repository\nactions.list_workflow_runs_for_repo(owner, repo, actor, branch, event, status, per_page, page, created, exclude_pull_requests, check_suite_id): List workflow runs for a repository\nactions.get_workflow_run(owner, repo, run_id, exclude_pull_requests): Get a workflow run\nactions.delete_workflow_run(owner, repo, run_id): Delete a workflow run\nactions.get_reviews_for_run(owner, repo, run_id): Get the review history for a workflow run\nactions.approve_workflow_run(owner, repo, run_id): Approve a workflow run for a fork pull request\nactions.list_workflow_run_artifacts(owner, repo, run_id, per_page, page): List workflow run artifacts\nactions.get_workflow_run_attempt(owner, repo, run_id, attempt_number, exclude_pull_requests): Get a workflow run attempt\nactions.list_jobs_for_workflow_run_attempt(owner, repo, run_id, attempt_number, per_page, page): List jobs for a workflow run attempt\nactions.download_workflow_run_attempt_logs(owner, repo, run_id, attempt_number): Download workflow run attempt logs\nactions.cancel_workflow_run(owner, repo, run_id): Cancel a workflow run\nactions.list_jobs_for_workflow_run(owner, repo, run_id, filter, per_page, page): List jobs for a workflow run\nactions.download_workflow_run_logs(owner, repo, run_id): Download workflow run logs\nactions.delete_workflow_run_logs(owner, repo, run_id): Delete workflow run logs\nactions.get_pending_deployments_for_run(owner, repo, run_id): Get pending deployments for a workflow run\nactions.review_pending_deployments_for_run(owner, repo, run_id, environment_ids, state, comment): Review pending deployments for a workflow run\nactions.re_run_workflow(owner, repo, run_id, enable_debug_logging): Re-run a workflow\nactions.re_run_workflow_failed_jobs(owner, repo, run_id, enable_debug_logging): Re-run failed jobs from a workflow run\nactions.get_workflow_run_usage(owner, repo, run_id): Get workflow run usage\nactions.list_repo_secrets(owner, repo, per_page, page): List repository secrets\nactions.get_repo_public_key(owner, repo): Get a repository public key\nactions.get_repo_secret(owner, repo, secret_name): Get a repository secret\nactions.create_or_update_repo_secret(owner, repo, secret_name, encrypted_value, key_id): Create or update a repository secret\nactions.delete_repo_secret(owner, repo, secret_name): Delete a repository secret\nactions.list_repo_workflows(owner, repo, per_page, page): List repository workflows\nactions.get_workflow(owner, repo, workflow_id): Get a workflow\nactions.disable_workflow(owner, repo, workflow_id): Disable a workflow\nactions.create_workflow_dispatch(owner, repo, workflow_id, ref, inputs): Create a workflow dispatch event\nactions.enable_workflow(owner, repo, workflow_id): Enable a workflow\nactions.list_workflow_runs(owner, repo, workflow_id, actor, branch, event, status, per_page, page, created, exclude_pull_requests, check_suite_id): List workflow runs\nactions.get_workflow_usage(owner, repo, workflow_id): Get workflow usage\nactions.list_environment_secrets(repository_id, environment_name, per_page, page): List environment secrets\nactions.get_environment_public_key(repository_id, environment_name): Get an environment public key\nactions.get_environment_secret(repository_id, environment_name, secret_name): Get an environment secret\nactions.create_or_update_environment_secret(repository_id, environment_name, secret_name, encrypted_value, key_id): Create or update an environment secret\nactions.delete_environment_secret(repository_id, environment_name, secret_name): Delete an environment secret\n\n\n\nactivity\n\nactivity.list_public_events(per_page, page): List public events\nactivity.get_feeds(): Get feeds\nactivity.list_public_events_for_repo_network(owner, repo, per_page, page): List public events for a network of repositories\nactivity.list_notifications_for_authenticated_user(all, participating, since, before, per_page, page): List notifications for the authenticated user\nactivity.mark_notifications_as_read(last_read_at, read): Mark notifications as read\nactivity.get_thread(thread_id): Get a thread\nactivity.mark_thread_as_read(thread_id): Mark a thread as read\nactivity.get_thread_subscription_for_authenticated_user(thread_id): Get a thread subscription for the authenticated user\nactivity.set_thread_subscription(thread_id, ignored): Set a thread subscription\nactivity.delete_thread_subscription(thread_id): Delete a thread subscription\nactivity.list_public_org_events(org, per_page, page): List public organization events\nactivity.list_repo_events(owner, repo, per_page, page): List repository events\nactivity.list_repo_notifications_for_authenticated_user(owner, repo, all, participating, since, before, per_page, page): List repository notifications for the authenticated user\nactivity.mark_repo_notifications_as_read(owner, repo, last_read_at): Mark repository notifications as read\nactivity.list_stargazers_for_repo(owner, repo, per_page, page): List stargazers\nactivity.list_watchers_for_repo(owner, repo, per_page, page): List watchers\nactivity.get_repo_subscription(owner, repo): Get a repository subscription\nactivity.set_repo_subscription(owner, repo, subscribed, ignored): Set a repository subscription\nactivity.delete_repo_subscription(owner, repo): Delete a repository subscription\nactivity.list_repos_starred_by_authenticated_user(sort, direction, per_page, page): List repositories starred by the authenticated user\nactivity.check_repo_is_starred_by_authenticated_user(owner, repo): Check if a repository is starred by the authenticated user\nactivity.star_repo_for_authenticated_user(owner, repo): Star a repository for the authenticated user\nactivity.unstar_repo_for_authenticated_user(owner, repo): Unstar a repository for the authenticated user\nactivity.list_watched_repos_for_authenticated_user(per_page, page): List repositories watched by the authenticated user\nactivity.list_events_for_authenticated_user(username, per_page, page): List events for the authenticated user\nactivity.list_org_events_for_authenticated_user(username, org, per_page, page): List organization events for the authenticated user\nactivity.list_public_events_for_user(username, per_page, page): List public events for a user\nactivity.list_received_events_for_user(username, per_page, page): List events received by the authenticated user\nactivity.list_received_public_events_for_user(username, per_page, page): List public events received by a user\nactivity.list_repos_starred_by_user(username, sort, direction, per_page, page): List repositories starred by a user\nactivity.list_repos_watched_by_user(username, per_page, page): List repositories watched by a user\n\n\n\napps\n\napps.get_authenticated(): Get the authenticated app\napps.create_from_manifest(code): Create a GitHub App from a manifest\napps.get_webhook_config_for_app(): Get a webhook configuration for an app\napps.update_webhook_config_for_app(url, content_type, secret, insecure_ssl): Update a webhook configuration for an app\napps.list_webhook_deliveries(per_page, cursor): List deliveries for an app webhook\napps.get_webhook_delivery(delivery_id): Get a delivery for an app webhook\napps.redeliver_webhook_delivery(delivery_id): Redeliver a delivery for an app webhook\napps.list_installations(per_page, page, since, outdated): List installations for the authenticated app\napps.get_installation(installation_id): Get an installation for the authenticated app\napps.delete_installation(installation_id): Delete an installation for the authenticated app\napps.create_installation_access_token(installation_id, repositories, repository_ids, permissions): Create an installation access token for an app\napps.suspend_installation(installation_id): Suspend an app installation\napps.unsuspend_installation(installation_id): Unsuspend an app installation\napps.delete_authorization(client_id, access_token): Delete an app authorization\napps.check_token(client_id, access_token): Check a token\napps.reset_token(client_id, access_token): Reset a token\napps.delete_token(client_id, access_token): Delete an app token\napps.scope_token(client_id, access_token, target, target_id, repositories, repository_ids, permissions): Create a scoped access token\napps.get_by_slug(app_slug): Get an app\napps.list_repos_accessible_to_installation(per_page, page): List repositories accessible to the app installation\napps.revoke_installation_access_token(): Revoke an installation access token\napps.get_subscription_plan_for_account(account_id): Get a subscription plan for an account\napps.list_plans(per_page, page): List plans\napps.list_accounts_for_plan(plan_id, sort, direction, per_page, page): List accounts for a plan\napps.get_subscription_plan_for_account_stubbed(account_id): Get a subscription plan for an account (stubbed)\napps.list_plans_stubbed(per_page, page): List plans (stubbed)\napps.list_accounts_for_plan_stubbed(plan_id, sort, direction, per_page, page): List accounts for a plan (stubbed)\napps.get_org_installation(org): Get an organization installation for the authenticated app\napps.get_repo_installation(owner, repo): Get a repository installation for the authenticated app\napps.list_installations_for_authenticated_user(per_page, page): List app installations accessible to the user access token\napps.list_installation_repos_for_authenticated_user(installation_id, per_page, page): List repositories accessible to the user access token\napps.add_repo_to_installation_for_authenticated_user(installation_id, repository_id): Add a repository to an app installation\napps.remove_repo_from_installation_for_authenticated_user(installation_id, repository_id): Remove a repository from an app installation\napps.list_subscriptions_for_authenticated_user(per_page, page): List subscriptions for the authenticated user\napps.list_subscriptions_for_authenticated_user_stubbed(per_page, page): List subscriptions for the authenticated user (stubbed)\napps.get_user_installation(username): Get a user installation for the authenticated app\n\n\n\nbilling\n\nbilling.get_github_actions_billing_ghe(enterprise): Get GitHub Actions billing for an enterprise\nbilling.get_github_advanced_security_billing_ghe(enterprise, per_page, page): Get GitHub Advanced Security active committers for an enterprise\nbilling.get_github_packages_billing_ghe(enterprise): Get GitHub Packages billing for an enterprise\nbilling.get_shared_storage_billing_ghe(enterprise): Get shared storage billing for an enterprise\nbilling.get_github_actions_billing_org(org): Get GitHub Actions billing for an organization\nbilling.get_github_advanced_security_billing_org(org, per_page, page): Get GitHub Advanced Security active committers for an organization\nbilling.get_github_packages_billing_org(org): Get GitHub Packages billing for an organization\nbilling.get_shared_storage_billing_org(org): Get shared storage billing for an organization\nbilling.get_github_actions_billing_user(username): Get GitHub Actions billing for a user\nbilling.get_github_packages_billing_user(username): Get GitHub Packages billing for a user\nbilling.get_shared_storage_billing_user(username): Get shared storage billing for a user\n\n\n\nchecks\n\nchecks.create(owner, repo, name, head_sha, details_url, external_id, status, started_at, conclusion, completed_at, output, actions): Create a check run\nchecks.get(owner, repo, check_run_id): Get a check run\nchecks.update(owner, repo, check_run_id, name, details_url, external_id, started_at, status, conclusion, completed_at, output, actions): Update a check run\nchecks.list_annotations(owner, repo, check_run_id, per_page, page): List check run annotations\nchecks.rerequest_run(owner, repo, check_run_id): Rerequest a check run\nchecks.create_suite(owner, repo, head_sha): Create a check suite\nchecks.set_suites_preferences(owner, repo, auto_trigger_checks): Update repository preferences for check suites\nchecks.get_suite(owner, repo, check_suite_id): Get a check suite\nchecks.list_for_suite(owner, repo, check_suite_id, check_name, status, filter, per_page, page): List check runs in a check suite\nchecks.rerequest_suite(owner, repo, check_suite_id): Rerequest a check suite\nchecks.list_for_ref(owner, repo, ref, check_name, status, filter, per_page, page, app_id): List check runs for a Git reference\nchecks.list_suites_for_ref(owner, repo, ref, app_id, check_name, per_page, page): List check suites for a Git reference\n\n\n\ncode_scanning\n\ncode-scanning.list_alerts_for_enterprise(enterprise, tool_name, tool_guid, before, after, page, per_page, direction, state, sort): List code scanning alerts for an enterprise\ncode-scanning.list_alerts_for_org(org, tool_name, tool_guid, before, after, page, per_page, direction, state, sort): List code scanning alerts for an organization\ncode-scanning.list_alerts_for_repo(owner, repo, tool_name, tool_guid, page, per_page, ref, direction, sort, state): List code scanning alerts for a repository\ncode-scanning.get_alert(owner, repo, alert_number): Get a code scanning alert\ncode-scanning.update_alert(owner, repo, alert_number, state, dismissed_reason, dismissed_comment): Update a code scanning alert\ncode-scanning.list_alert_instances(owner, repo, alert_number, page, per_page, ref): List instances of a code scanning alert\ncode-scanning.list_recent_analyses(owner, repo, tool_name, tool_guid, page, per_page, ref, sarif_id): List code scanning analyses for a repository\ncode-scanning.get_analysis(owner, repo, analysis_id): Get a code scanning analysis for a repository\ncode-scanning.delete_analysis(owner, repo, analysis_id, confirm_delete): Delete a code scanning analysis from a repository\ncode-scanning.upload_sarif(owner, repo, commit_sha, ref, sarif, checkout_uri, started_at, tool_name): Upload an analysis as SARIF data\ncode-scanning.get_sarif(owner, repo, sarif_id): Get information about a SARIF upload\n\n\n\ncodes_of_conduct\n\ncodes-of-conduct.get_all_codes_of_conduct(): Get all codes of conduct\ncodes-of-conduct.get_conduct_code(key): Get a code of conduct\n\n\n\ncodespaces\n\ncodespaces.list_in_organization(org, per_page, page): List codespaces for the organization\ncodespaces.delete_from_organization(org, username, codespace_name): Delete a codespace from the organization\ncodespaces.stop_in_organization(org, username, codespace_name): Stop a codespace for an organization user\ncodespaces.list_in_repository_for_authenticated_user(owner, repo, per_page, page): List codespaces in a repository for the authenticated user\ncodespaces.create_with_repo_for_authenticated_user(owner, repo, ref, location, client_ip, machine, devcontainer_path, multi_repo_permissions_opt_out, working_directory, idle_timeout_minutes, display_name, retention_period_minutes): Create a codespace in a repository\ncodespaces.list_devcontainers_in_repository_for_authenticated_user(owner, repo, per_page, page): List devcontainer configurations in a repository for the authenticated user\ncodespaces.repo_machines_for_authenticated_user(owner, repo, location, client_ip): List available machine types for a repository\ncodespaces.pre_flight_with_repo_for_authenticated_user(owner, repo, ref, client_ip): Get default attributes for a codespace\ncodespaces.list_repo_secrets(owner, repo, per_page, page): List repository secrets\ncodespaces.get_repo_public_key(owner, repo): Get a repository public key\ncodespaces.get_repo_secret(owner, repo, secret_name): Get a repository secret\ncodespaces.create_or_update_repo_secret(owner, repo, secret_name, encrypted_value, key_id): Create or update a repository secret\ncodespaces.delete_repo_secret(owner, repo, secret_name): Delete a repository secret\ncodespaces.create_with_pr_for_authenticated_user(owner, repo, pull_number, location, client_ip, machine, devcontainer_path, multi_repo_permissions_opt_out, working_directory, idle_timeout_minutes, display_name, retention_period_minutes): Create a codespace from a pull request\ncodespaces.list_for_authenticated_user(per_page, page, repository_id): List codespaces for the authenticated user\ncodespaces.create_for_authenticated_user(repository_id, ref, location, client_ip, machine, devcontainer_path, multi_repo_permissions_opt_out, working_directory, idle_timeout_minutes, display_name, retention_period_minutes): Create a codespace for the authenticated user\ncodespaces.list_secrets_for_authenticated_user(per_page, page): List secrets for the authenticated user\ncodespaces.get_public_key_for_authenticated_user(): Get public key for the authenticated user\ncodespaces.get_secret_for_authenticated_user(secret_name): Get a secret for the authenticated user\ncodespaces.create_or_update_secret_for_authenticated_user(secret_name, encrypted_value, key_id, selected_repository_ids): Create or update a secret for the authenticated user\ncodespaces.delete_secret_for_authenticated_user(secret_name): Delete a secret for the authenticated user\ncodespaces.list_repositories_for_secret_for_authenticated_user(secret_name): List selected repositories for a user secret\ncodespaces.set_repositories_for_secret_for_authenticated_user(secret_name, selected_repository_ids): Set selected repositories for a user secret\ncodespaces.add_repository_for_secret_for_authenticated_user(secret_name, repository_id): Add a selected repository to a user secret\ncodespaces.remove_repository_for_secret_for_authenticated_user(secret_name, repository_id): Remove a selected repository from a user secret\ncodespaces.get_for_authenticated_user(codespace_name): Get a codespace for the authenticated user\ncodespaces.update_for_authenticated_user(codespace_name, machine, display_name, recent_folders): Update a codespace for the authenticated user\ncodespaces.delete_for_authenticated_user(codespace_name): Delete a codespace for the authenticated user\ncodespaces.codespace_machines_for_authenticated_user(codespace_name): List machine types for a codespace\ncodespaces.start_for_authenticated_user(codespace_name): Start a codespace for the authenticated user\ncodespaces.stop_for_authenticated_user(codespace_name): Stop a codespace for the authenticated user\n\n\n\ndependabot\n\ndependabot.list_org_secrets(org, per_page, page): List organization secrets\ndependabot.get_org_public_key(org): Get an organization public key\ndependabot.get_org_secret(org, secret_name): Get an organization secret\ndependabot.create_or_update_org_secret(org, secret_name, encrypted_value, key_id, visibility, selected_repository_ids): Create or update an organization secret\ndependabot.delete_org_secret(org, secret_name): Delete an organization secret\ndependabot.list_selected_repos_for_org_secret(org, secret_name, page, per_page): List selected repositories for an organization secret\ndependabot.set_selected_repos_for_org_secret(org, secret_name, selected_repository_ids): Set selected repositories for an organization secret\ndependabot.add_selected_repo_to_org_secret(org, secret_name, repository_id): Add selected repository to an organization secret\ndependabot.remove_selected_repo_from_org_secret(org, secret_name, repository_id): Remove selected repository from an organization secret\ndependabot.list_repo_secrets(owner, repo, per_page, page): List repository secrets\ndependabot.get_repo_public_key(owner, repo): Get a repository public key\ndependabot.get_repo_secret(owner, repo, secret_name): Get a repository secret\ndependabot.create_or_update_repo_secret(owner, repo, secret_name, encrypted_value, key_id): Create or update a repository secret\ndependabot.delete_repo_secret(owner, repo, secret_name): Delete a repository secret\n\n\n\ndependency_graph\n\ndependency-graph.diff_range(owner, repo, basehead, name): Get a diff of the dependencies between commits\ndependency-graph.create_repository_snapshot(owner, repo, version, job, sha, ref, detector, metadata, manifests, scanned): Create a snapshot of dependencies for a repository\n\n\n\nemojis\n\nemojis.get(): Get emojis\n\n\n\nenterprise_admin\n\nenterprise-admin.get_server_statistics(enterprise_or_org, date_start, date_end): Get GitHub Enterprise Server statistics\nenterprise-admin.get_github_actions_permissions_enterprise(enterprise): Get GitHub Actions permissions for an enterprise\nenterprise-admin.set_github_actions_permissions_enterprise(enterprise, enabled_organizations, allowed_actions): Set GitHub Actions permissions for an enterprise\nenterprise-admin.list_selected_organizations_enabled_github_actions_enterprise(enterprise, per_page, page): List selected organizations enabled for GitHub Actions in an enterprise\nenterprise-admin.set_selected_organizations_enabled_github_actions_enterprise(enterprise, selected_organization_ids): Set selected organizations enabled for GitHub Actions in an enterprise\nenterprise-admin.enable_selected_organization_github_actions_enterprise(enterprise, org_id): Enable a selected organization for GitHub Actions in an enterprise\nenterprise-admin.disable_selected_organization_github_actions_enterprise(enterprise, org_id): Disable a selected organization for GitHub Actions in an enterprise\nenterprise-admin.get_allowed_actions_enterprise(enterprise): Get allowed actions and reusable workflows for an enterprise\nenterprise-admin.set_allowed_actions_enterprise(enterprise, github_owned_allowed, verified_allowed, patterns_allowed): Set allowed actions and reusable workflows for an enterprise\nenterprise-admin.list_self_hosted_runner_groups_for_enterprise(enterprise, per_page, page, visible_to_organization): List self-hosted runner groups for an enterprise\nenterprise-admin.create_self_hosted_runner_group_for_enterprise(enterprise, name, visibility, selected_organization_ids, runners, allows_public_repositories, restricted_to_workflows, selected_workflows): Create a self-hosted runner group for an enterprise\nenterprise-admin.get_self_hosted_runner_group_for_enterprise(enterprise, runner_group_id): Get a self-hosted runner group for an enterprise\nenterprise-admin.update_self_hosted_runner_group_for_enterprise(enterprise, runner_group_id, name, visibility, allows_public_repositories, restricted_to_workflows, selected_workflows): Update a self-hosted runner group for an enterprise\nenterprise-admin.delete_self_hosted_runner_group_from_enterprise(enterprise, runner_group_id): Delete a self-hosted runner group from an enterprise\nenterprise-admin.list_org_access_to_self_hosted_runner_group_in_enterprise(enterprise, runner_group_id, per_page, page): List organization access to a self-hosted runner group in an enterprise\nenterprise-admin.set_org_access_to_self_hosted_runner_group_in_enterprise(enterprise, runner_group_id, selected_organization_ids): Set organization access for a self-hosted runner group in an enterprise\nenterprise-admin.add_org_access_to_self_hosted_runner_group_in_enterprise(enterprise, runner_group_id, org_id): Add organization access to a self-hosted runner group in an enterprise\nenterprise-admin.remove_org_access_to_self_hosted_runner_group_in_enterprise(enterprise, runner_group_id, org_id): Remove organization access to a self-hosted runner group in an enterprise\nenterprise-admin.list_self_hosted_runners_in_group_for_enterprise(enterprise, runner_group_id, per_page, page): List self-hosted runners in a group for an enterprise\nenterprise-admin.set_self_hosted_runners_in_group_for_enterprise(enterprise, runner_group_id, runners): Set self-hosted runners in a group for an enterprise\nenterprise-admin.add_self_hosted_runner_to_group_for_enterprise(enterprise, runner_group_id, runner_id): Add a self-hosted runner to a group for an enterprise\nenterprise-admin.remove_self_hosted_runner_from_group_for_enterprise(enterprise, runner_group_id, runner_id): Remove a self-hosted runner from a group for an enterprise\nenterprise-admin.list_self_hosted_runners_for_enterprise(enterprise, per_page, page): List self-hosted runners for an enterprise\nenterprise-admin.list_runner_applications_for_enterprise(enterprise): List runner applications for an enterprise\nenterprise-admin.create_registration_token_for_enterprise(enterprise): Create a registration token for an enterprise\nenterprise-admin.create_remove_token_for_enterprise(enterprise): Create a remove token for an enterprise\nenterprise-admin.get_self_hosted_runner_for_enterprise(enterprise, runner_id): Get a self-hosted runner for an enterprise\nenterprise-admin.delete_self_hosted_runner_from_enterprise(enterprise, runner_id): Delete a self-hosted runner from an enterprise\nenterprise-admin.list_labels_for_self_hosted_runner_for_enterprise(enterprise, runner_id): List labels for a self-hosted runner for an enterprise\nenterprise-admin.add_custom_labels_to_self_hosted_runner_for_enterprise(enterprise, runner_id, labels): Add custom labels to a self-hosted runner for an enterprise\nenterprise-admin.set_custom_labels_for_self_hosted_runner_for_enterprise(enterprise, runner_id, labels): Set custom labels for a self-hosted runner for an enterprise\nenterprise-admin.remove_all_custom_labels_from_self_hosted_runner_for_enterprise(enterprise, runner_id): Remove all custom labels from a self-hosted runner for an enterprise\nenterprise-admin.remove_custom_label_from_self_hosted_runner_for_enterprise(enterprise, runner_id, name): Remove a custom label from a self-hosted runner for an enterprise\nenterprise-admin.get_audit_log(enterprise, phrase, include, after, before, order, page, per_page): Get the audit log for an enterprise\nenterprise-admin.list_provisioned_groups_enterprise(enterprise, startIndex, count, filter, excludedAttributes): List provisioned SCIM groups for an enterprise\nenterprise-admin.provision_and_invite_enterprise_group(enterprise, schemas, displayName, members): Provision a SCIM enterprise group and invite users\nenterprise-admin.get_provisioning_information_for_enterprise_group(enterprise, scim_group_id, excludedAttributes): Get SCIM provisioning information for an enterprise group\nenterprise-admin.set_information_for_provisioned_enterprise_group(enterprise, scim_group_id, schemas, displayName, members): Set SCIM information for a provisioned enterprise group\nenterprise-admin.update_attribute_for_enterprise_group(enterprise, scim_group_id, schemas, Operations): Update an attribute for a SCIM enterprise group\nenterprise-admin.delete_scim_group_from_enterprise(enterprise, scim_group_id): Delete a SCIM group from an enterprise\nenterprise-admin.list_provisioned_identities_enterprise(enterprise, startIndex, count, filter): List SCIM provisioned identities for an enterprise\nenterprise-admin.provision_and_invite_enterprise_user(enterprise, schemas, userName, name, emails, groups): Provision and invite a SCIM enterprise user\nenterprise-admin.get_provisioning_information_for_enterprise_user(enterprise, scim_user_id): Get SCIM provisioning information for an enterprise user\nenterprise-admin.set_information_for_provisioned_enterprise_user(enterprise, scim_user_id, schemas, userName, name, emails, groups): Set SCIM information for a provisioned enterprise user\nenterprise-admin.update_attribute_for_enterprise_user(enterprise, scim_user_id, schemas, Operations): Update an attribute for a SCIM enterprise user\nenterprise-admin.delete_user_from_enterprise(enterprise, scim_user_id): Delete a SCIM user from an enterprise\n\n\n\ngists\n\ngists.list(since, per_page, page): List gists for the authenticated user\ngists.create(description, files, public): Create a gist\ngists.list_public(since, per_page, page): List public gists\ngists.list_starred(since, per_page, page): List starred gists\ngists.get(gist_id): Get a gist\ngists.update(gist_id, description, files): Update a gist\ngists.delete(gist_id): Delete a gist\ngists.list_comments(gist_id, per_page, page): List gist comments\ngists.create_comment(gist_id, body): Create a gist comment\ngists.get_comment(gist_id, comment_id): Get a gist comment\ngists.update_comment(gist_id, comment_id, body): Update a gist comment\ngists.delete_comment(gist_id, comment_id): Delete a gist comment\ngists.list_commits(gist_id, per_page, page): List gist commits\ngists.list_forks(gist_id, per_page, page): List gist forks\ngists.fork(gist_id): Fork a gist\ngists.check_is_starred(gist_id): Check if a gist is starred\ngists.star(gist_id): Star a gist\ngists.unstar(gist_id): Unstar a gist\ngists.get_revision(gist_id, sha): Get a gist revision\ngists.list_for_user(username, since, per_page, page): List gists for a user\n\n\n\ngit\n\ngit.create_blob(owner, repo, content, encoding): Create a blob\ngit.get_blob(owner, repo, file_sha): Get a blob\ngit.create_commit(owner, repo, message, tree, parents, author, committer, signature): Create a commit\ngit.get_commit(owner, repo, commit_sha): Get a commit\ngit.list_matching_refs(owner, repo, ref, per_page, page): List matching references\ngit.get_ref(owner, repo, ref): Get a reference\ngit.create_ref(owner, repo, ref, sha, key): Create a reference\ngit.update_ref(owner, repo, ref, sha, force): Update a reference\ngit.delete_ref(owner, repo, ref): Delete a reference\ngit.create_tag(owner, repo, tag, message, object, type, tagger): Create a tag object\ngit.get_tag(owner, repo, tag_sha): Get a tag\ngit.create_tree(owner, repo, tree, base_tree): Create a tree\ngit.get_tree(owner, repo, tree_sha, recursive): Get a tree\n\n\n\ngitignore\n\ngitignore.get_all_templates(): Get all gitignore templates\ngitignore.get_template(name): Get a gitignore template\n\n\n\ninteractions\n\ninteractions.get_restrictions_for_org(org): Get interaction restrictions for an organization\ninteractions.set_restrictions_for_org(org, limit, expiry): Set interaction restrictions for an organization\ninteractions.remove_restrictions_for_org(org): Remove interaction restrictions for an organization\ninteractions.get_restrictions_for_repo(owner, repo): Get interaction restrictions for a repository\ninteractions.set_restrictions_for_repo(owner, repo, limit, expiry): Set interaction restrictions for a repository\ninteractions.remove_restrictions_for_repo(owner, repo): Remove interaction restrictions for a repository\ninteractions.get_restrictions_for_authenticated_user(): Get interaction restrictions for your public repositories\ninteractions.set_restrictions_for_authenticated_user(limit, expiry): Set interaction restrictions for your public repositories\ninteractions.remove_restrictions_for_authenticated_user(): Remove interaction restrictions from your public repositories\n\n\n\nissues\n\nissues.list(filter, state, labels, sort, direction, since, collab, orgs, owned, pulls, per_page, page): List issues assigned to the authenticated user\nissues.list_for_org(org, filter, state, labels, sort, direction, since, per_page, page): List organization issues assigned to the authenticated user\nissues.list_assignees(owner, repo, per_page, page): List assignees\nissues.check_user_can_be_assigned(owner, repo, assignee): Check if a user can be assigned\nissues.list_for_repo(owner, repo, milestone, state, assignee, creator, mentioned, labels, sort, direction, since, per_page, page): List repository issues\nissues.create(owner, repo, title, body, assignee, milestone, labels, assignees): Create an issue\nissues.list_comments_for_repo(owner, repo, sort, direction, since, per_page, page): List issue comments for a repository\nissues.get_comment(owner, repo, comment_id): Get an issue comment\nissues.update_comment(owner, repo, comment_id, body): Update an issue comment\nissues.delete_comment(owner, repo, comment_id): Delete an issue comment\nissues.list_events_for_repo(owner, repo, per_page, page): List issue events for a repository\nissues.get_event(owner, repo, event_id): Get an issue event\nissues.get(owner, repo, issue_number): Get an issue\nissues.update(owner, repo, issue_number, title, body, assignee, state, milestone, labels, assignees): Update an issue\nissues.add_assignees(owner, repo, issue_number, assignees): Add assignees to an issue\nissues.remove_assignees(owner, repo, issue_number, assignees): Remove assignees from an issue\nissues.list_comments(owner, repo, issue_number, since, per_page, page): List issue comments\nissues.create_comment(owner, repo, issue_number, body): Create an issue comment\nissues.list_events(owner, repo, issue_number, per_page, page): List issue events\nissues.list_labels_on_issue(owner, repo, issue_number, per_page, page): List labels for an issue\nissues.add_labels(owner, repo, issue_number, labels): Add labels to an issue\nissues.set_labels(owner, repo, issue_number, labels): Set labels for an issue\nissues.remove_all_labels(owner, repo, issue_number): Remove all labels from an issue\nissues.remove_label(owner, repo, issue_number, name): Remove a label from an issue\nissues.lock(owner, repo, issue_number, lock_reason): Lock an issue\nissues.unlock(owner, repo, issue_number): Unlock an issue\nissues.list_events_for_timeline(owner, repo, issue_number, per_page, page): List timeline events for an issue\nissues.list_labels_for_repo(owner, repo, per_page, page): List labels for a repository\nissues.create_label(owner, repo, name, color, description): Create a label\nissues.get_label(owner, repo, name): Get a label\nissues.update_label(owner, repo, name, new_name, color, description): Update a label\nissues.delete_label(owner, repo, name): Delete a label\nissues.list_milestones(owner, repo, state, sort, direction, per_page, page): List milestones\nissues.create_milestone(owner, repo, title, state, description, due_on): Create a milestone\nissues.get_milestone(owner, repo, milestone_number): Get a milestone\nissues.update_milestone(owner, repo, milestone_number, title, state, description, due_on): Update a milestone\nissues.delete_milestone(owner, repo, milestone_number): Delete a milestone\nissues.list_labels_for_milestone(owner, repo, milestone_number, per_page, page): List labels for issues in a milestone\nissues.list_for_authenticated_user(filter, state, labels, sort, direction, since, per_page, page): List user account issues assigned to the authenticated user\n\n\n\nlicenses\n\nlicenses.get_all_commonly_used(featured, per_page, page): Get all commonly used licenses\nlicenses.get(license): Get a license\nlicenses.get_for_repo(owner, repo): Get the license for a repository\n\n\n\nmarkdown\n\nmarkdown.render(text, mode, context): Render a Markdown document\nmarkdown.render_raw(): Render a Markdown document in raw mode\n\n\n\nmeta\n\nmeta.root(): GitHub API Root\nmeta.get(): Get GitHub meta information\nmeta.get_octocat(s): Get Octocat\n\n\n\nmigrations\n\nmigrations.list_for_org(org, per_page, page, exclude): List organization migrations\nmigrations.start_for_org(org, repositories, lock_repositories, exclude_metadata, exclude_git_data, exclude_attachments, exclude_releases, exclude_owner_projects, org_metadata_only, exclude): Start an organization migration\nmigrations.get_status_for_org(org, migration_id, exclude): Get an organization migration status\nmigrations.download_archive_for_org(org, migration_id): Download an organization migration archive\nmigrations.delete_archive_for_org(org, migration_id): Delete an organization migration archive\nmigrations.unlock_repo_for_org(org, migration_id, repo_name): Unlock an organization repository\nmigrations.list_repos_for_org(org, migration_id, per_page, page): List repositories in an organization migration\nmigrations.get_import_status(owner, repo): Get an import status\nmigrations.start_import(owner, repo, vcs_url, vcs, vcs_username, vcs_password, tfvc_project): Start an import\nmigrations.update_import(owner, repo, vcs_username, vcs_password, vcs, tfvc_project): Update an import\nmigrations.cancel_import(owner, repo): Cancel an import\nmigrations.get_commit_authors(owner, repo, since): Get commit authors\nmigrations.map_commit_author(owner, repo, author_id, email, name): Map a commit author\nmigrations.get_large_files(owner, repo): Get large files\nmigrations.set_lfs_preference(owner, repo, use_lfs): Update Git LFS preference\nmigrations.list_for_authenticated_user(per_page, page): List user migrations\nmigrations.start_for_authenticated_user(lock_repositories, exclude_metadata, exclude_git_data, exclude_attachments, exclude_releases, exclude_owner_projects, org_metadata_only, exclude, repositories): Start a user migration\nmigrations.get_status_for_authenticated_user(migration_id, exclude): Get a user migration status\nmigrations.get_archive_for_authenticated_user(migration_id): Download a user migration archive\nmigrations.delete_archive_for_authenticated_user(migration_id): Delete a user migration archive\nmigrations.unlock_repo_for_authenticated_user(migration_id, repo_name): Unlock a user repository\nmigrations.list_repos_for_authenticated_user(migration_id, per_page, page): List repositories for a user migration\n\n\n\noauth_authorizations\n\noauth-authorizations.list_grants(per_page, page, client_id): List your grants\noauth-authorizations.get_grant(grant_id): Get a single grant\noauth-authorizations.delete_grant(grant_id): Delete a grant\noauth-authorizations.list_authorizations(per_page, page, client_id): List your authorizations\noauth-authorizations.create_authorization(scopes, note, note_url, client_id, client_secret, fingerprint): Create a new authorization\noauth-authorizations.get_or_create_authorization_for_app(client_id, client_secret, scopes, note, note_url, fingerprint): Get-or-create an authorization for a specific app\noauth-authorizations.get_or_create_authorization_for_app_and_fingerprint(client_id, fingerprint, client_secret, scopes, note, note_url): Get-or-create an authorization for a specific app and fingerprint\noauth-authorizations.get_authorization(authorization_id): Get a single authorization\noauth-authorizations.update_authorization(authorization_id, scopes, add_scopes, remove_scopes, note, note_url, fingerprint): Update an existing authorization\noauth-authorizations.delete_authorization(authorization_id): Delete an authorization\n\n\n\noidc\n\noidc.get_oidc_custom_sub_template_for_org(org): Get the customization template for an OIDC subject claim for an organization\noidc.update_oidc_custom_sub_template_for_org(org, include_claim_keys): Set the customization template for an OIDC subject claim for an organization\n\n\n\norgs\n\norgs.list(since, per_page): List organizations\norgs.list_custom_roles(organization_id): List custom repository roles in an organization\norgs.get(org): Get an organization\norgs.update(org, billing_email, company, email, twitter_username, location, name, description, has_organization_projects, has_repository_projects, default_repository_permission, members_can_create_repositories, members_can_create_internal_repositories, members_can_create_private_repositories, members_can_create_public_repositories, members_allowed_repository_creation_type, members_can_create_pages, members_can_create_public_pages, members_can_create_private_pages, members_can_fork_private_repositories, blog): Update an organization\norgs.get_audit_log(org, phrase, include, after, before, order, per_page): Get the audit log for an organization\norgs.list_blocked_users(org): List users blocked by an organization\norgs.check_blocked_user(org, username): Check if a user is blocked by an organization\norgs.block_user(org, username): Block a user from an organization\norgs.unblock_user(org, username): Unblock a user from an organization\norgs.list_saml_sso_authorizations(org, per_page, page, login): List SAML SSO authorizations for an organization\norgs.remove_saml_sso_authorization(org, credential_id): Remove a SAML SSO authorization for an organization\norgs.list_failed_invitations(org, per_page, page): List failed organization invitations\norgs.list_webhooks(org, per_page, page): List organization webhooks\norgs.create_webhook(org, name, config, events, active): Create an organization webhook\norgs.get_webhook(org, hook_id): Get an organization webhook\norgs.update_webhook(org, hook_id, config, events, active, name): Update an organization webhook\norgs.delete_webhook(org, hook_id): Delete an organization webhook\norgs.get_webhook_config_for_org(org, hook_id): Get a webhook configuration for an organization\norgs.update_webhook_config_for_org(org, hook_id, url, content_type, secret, insecure_ssl): Update a webhook configuration for an organization\norgs.list_webhook_deliveries(org, hook_id, per_page, cursor): List deliveries for an organization webhook\norgs.get_webhook_delivery(org, hook_id, delivery_id): Get a webhook delivery for an organization webhook\norgs.redeliver_webhook_delivery(org, hook_id, delivery_id): Redeliver a delivery for an organization webhook\norgs.ping_webhook(org, hook_id): Ping an organization webhook\norgs.list_app_installations(org, per_page, page): List app installations for an organization\norgs.list_pending_invitations(org, per_page, page): List pending organization invitations\norgs.create_invitation(org, invitee_id, email, role, team_ids): Create an organization invitation\norgs.cancel_invitation(org, invitation_id): Cancel an organization invitation\norgs.list_invitation_teams(org, invitation_id, per_page, page): List organization invitation teams\norgs.list_members(org, filter, role, per_page, page): List organization members\norgs.check_membership_for_user(org, username): Check organization membership for a user\norgs.remove_member(org, username): Remove an organization member\norgs.get_membership_for_user(org, username): Get organization membership for a user\norgs.set_membership_for_user(org, username, role): Set organization membership for a user\norgs.remove_membership_for_user(org, username): Remove organization membership for a user\norgs.list_outside_collaborators(org, filter, per_page, page): List outside collaborators for an organization\norgs.convert_member_to_outside_collaborator(org, username, async): Convert an organization member to outside collaborator\norgs.remove_outside_collaborator(org, username): Remove outside collaborator from an organization\norgs.list_public_members(org, per_page, page): List public organization members\norgs.check_public_membership_for_user(org, username): Check public organization membership for a user\norgs.set_public_membership_for_authenticated_user(org, username): Set public organization membership for the authenticated user\norgs.remove_public_membership_for_authenticated_user(org, username): Remove public organization membership for the authenticated user\norgs.list_memberships_for_authenticated_user(state, per_page, page): List organization memberships for the authenticated user\norgs.get_membership_for_authenticated_user(org): Get an organization membership for the authenticated user\norgs.update_membership_for_authenticated_user(org, state): Update an organization membership for the authenticated user\norgs.list_for_authenticated_user(per_page, page): List organizations for the authenticated user\norgs.list_for_user(username, per_page, page): List organizations for a user\n\n\n\npackages\n\npackages.list_packages_for_organization(org, package_type, visibility): List packages for an organization\npackages.get_package_for_organization(org, package_type, package_name): Get a package for an organization\npackages.delete_package_for_org(org, package_type, package_name): Delete a package for an organization\npackages.restore_package_for_org(org, package_type, package_name, token): Restore a package for an organization\npackages.get_all_package_versions_for_package_owned_by_org(org, package_type, package_name, page, per_page, state): Get all package versions for a package owned by an organization\npackages.get_package_version_for_organization(org, package_type, package_name, package_version_id): Get a package version for an organization\npackages.delete_package_version_for_org(org, package_type, package_name, package_version_id): Delete package version for an organization\npackages.restore_package_version_for_org(org, package_type, package_name, package_version_id): Restore package version for an organization\npackages.list_packages_for_authenticated_user(package_type, visibility): List packages for the authenticated user’s namespace\npackages.get_package_for_authenticated_user(package_type, package_name): Get a package for the authenticated user\npackages.delete_package_for_authenticated_user(package_type, package_name): Delete a package for the authenticated user\npackages.restore_package_for_authenticated_user(package_type, package_name, token): Restore a package for the authenticated user\npackages.get_all_package_versions_for_package_owned_by_authenticated_user(package_type, package_name, page, per_page, state): Get all package versions for a package owned by the authenticated user\npackages.get_package_version_for_authenticated_user(package_type, package_name, package_version_id): Get a package version for the authenticated user\npackages.delete_package_version_for_authenticated_user(package_type, package_name, package_version_id): Delete a package version for the authenticated user\npackages.restore_package_version_for_authenticated_user(package_type, package_name, package_version_id): Restore a package version for the authenticated user\npackages.list_packages_for_user(username, package_type, visibility): List packages for a user\npackages.get_package_for_user(username, package_type, package_name): Get a package for a user\npackages.delete_package_for_user(username, package_type, package_name): Delete a package for a user\npackages.restore_package_for_user(username, package_type, package_name, token): Restore a package for a user\npackages.get_all_package_versions_for_package_owned_by_user(username, package_type, package_name): Get all package versions for a package owned by a user\npackages.get_package_version_for_user(username, package_type, package_name, package_version_id): Get a package version for a user\npackages.delete_package_version_for_user(username, package_type, package_name, package_version_id): Delete package version for a user\npackages.restore_package_version_for_user(username, package_type, package_name, package_version_id): Restore package version for a user\n\n\n\nprojects\n\nprojects.list_for_org(org, state, per_page, page): List organization projects\nprojects.create_for_org(org, name, body): Create an organization project\nprojects.get_card(card_id): Get a project card\nprojects.update_card(card_id, note, archived): Update an existing project card\nprojects.delete_card(card_id): Delete a project card\nprojects.move_card(card_id, position, column_id): Move a project card\nprojects.get_column(column_id): Get a project column\nprojects.update_column(column_id, name): Update an existing project column\nprojects.delete_column(column_id): Delete a project column\nprojects.list_cards(column_id, archived_state, per_page, page): List project cards\nprojects.create_card(column_id, note): Create a project card\nprojects.move_column(column_id, position): Move a project column\nprojects.get(project_id): Get a project\nprojects.update(project_id, name, body, state, organization_permission, private): Update a project\nprojects.delete(project_id): Delete a project\nprojects.list_collaborators(project_id, affiliation, per_page, page): List project collaborators\nprojects.add_collaborator(project_id, username, permission): Add project collaborator\nprojects.remove_collaborator(project_id, username): Remove user as a collaborator\nprojects.get_permission_for_user(project_id, username): Get project permission for a user\nprojects.list_columns(project_id, per_page, page): List project columns\nprojects.create_column(project_id, name): Create a project column\nprojects.list_for_repo(owner, repo, state, per_page, page): List repository projects\nprojects.create_for_repo(owner, repo, name, body): Create a repository project\nprojects.create_for_authenticated_user(name, body): Create a user project\nprojects.list_for_user(username, state, per_page, page): List user projects\n\n\n\npulls\n\npulls.list(owner, repo, state, head, base, sort, direction, per_page, page): List pull requests\npulls.create(owner, repo, title, head, base, body, maintainer_can_modify, draft, issue): Create a pull request\npulls.list_review_comments_for_repo(owner, repo, sort, direction, since, per_page, page): List review comments in a repository\npulls.get_review_comment(owner, repo, comment_id): Get a review comment for a pull request\npulls.update_review_comment(owner, repo, comment_id, body): Update a review comment for a pull request\npulls.delete_review_comment(owner, repo, comment_id): Delete a review comment for a pull request\npulls.get(owner, repo, pull_number): Get a pull request\npulls.update(owner, repo, pull_number, title, body, state, base, maintainer_can_modify): Update a pull request\npulls.list_review_comments(owner, repo, pull_number, sort, direction, since, per_page, page): List review comments on a pull request\npulls.create_review_comment(owner, repo, pull_number, body, commit_id, path, position, side, line, start_line, start_side, in_reply_to): Create a review comment for a pull request\npulls.create_reply_for_review_comment(owner, repo, pull_number, comment_id, body): Create a reply for a review comment\npulls.list_commits(owner, repo, pull_number, per_page, page): List commits on a pull request\npulls.list_files(owner, repo, pull_number, per_page, page): List pull requests files\npulls.check_if_merged(owner, repo, pull_number): Check if a pull request has been merged\npulls.merge(owner, repo, pull_number, commit_title, commit_message, sha, merge_method): Merge a pull request\npulls.list_requested_reviewers(owner, repo, pull_number, per_page, page): List requested reviewers for a pull request\npulls.request_reviewers(owner, repo, pull_number, reviewers, team_reviewers): Request reviewers for a pull request\npulls.remove_requested_reviewers(owner, repo, pull_number, reviewers, team_reviewers): Remove requested reviewers from a pull request\npulls.list_reviews(owner, repo, pull_number, per_page, page): List reviews for a pull request\npulls.create_review(owner, repo, pull_number, commit_id, body, event, comments): Create a review for a pull request\npulls.get_review(owner, repo, pull_number, review_id): Get a review for a pull request\npulls.update_review(owner, repo, pull_number, review_id, body): Update a review for a pull request\npulls.delete_pending_review(owner, repo, pull_number, review_id): Delete a pending review for a pull request\npulls.list_comments_for_review(owner, repo, pull_number, review_id, per_page, page): List comments for a pull request review\npulls.dismiss_review(owner, repo, pull_number, review_id, message, event): Dismiss a review for a pull request\npulls.submit_review(owner, repo, pull_number, review_id, body, event): Submit a review for a pull request\npulls.update_branch(owner, repo, pull_number, expected_head_sha): Update a pull request branch\n\n\n\nrate_limit\n\nrate-limit.get(): Get rate limit status for the authenticated user\n\n\n\nreactions\n\nreactions.list_for_team_discussion_comment_in_org(org, team_slug, discussion_number, comment_number, content, per_page, page): List reactions for a team discussion comment\nreactions.create_for_team_discussion_comment_in_org(org, team_slug, discussion_number, comment_number, content): Create reaction for a team discussion comment\nreactions.delete_for_team_discussion_comment(org, team_slug, discussion_number, comment_number, reaction_id): Delete team discussion comment reaction\nreactions.list_for_team_discussion_in_org(org, team_slug, discussion_number, content, per_page, page): List reactions for a team discussion\nreactions.create_for_team_discussion_in_org(org, team_slug, discussion_number, content): Create reaction for a team discussion\nreactions.delete_for_team_discussion(org, team_slug, discussion_number, reaction_id): Delete team discussion reaction\nreactions.list_for_commit_comment(owner, repo, comment_id, content, per_page, page): List reactions for a commit comment\nreactions.create_for_commit_comment(owner, repo, comment_id, content): Create reaction for a commit comment\nreactions.delete_for_commit_comment(owner, repo, comment_id, reaction_id): Delete a commit comment reaction\nreactions.list_for_issue_comment(owner, repo, comment_id, content, per_page, page): List reactions for an issue comment\nreactions.create_for_issue_comment(owner, repo, comment_id, content): Create reaction for an issue comment\nreactions.delete_for_issue_comment(owner, repo, comment_id, reaction_id): Delete an issue comment reaction\nreactions.list_for_issue(owner, repo, issue_number, content, per_page, page): List reactions for an issue\nreactions.create_for_issue(owner, repo, issue_number, content): Create reaction for an issue\nreactions.delete_for_issue(owner, repo, issue_number, reaction_id): Delete an issue reaction\nreactions.list_for_pull_request_review_comment(owner, repo, comment_id, content, per_page, page): List reactions for a pull request review comment\nreactions.create_for_pull_request_review_comment(owner, repo, comment_id, content): Create reaction for a pull request review comment\nreactions.delete_for_pull_request_comment(owner, repo, comment_id, reaction_id): Delete a pull request comment reaction\nreactions.list_for_release(owner, repo, release_id, content, per_page, page): List reactions for a release\nreactions.create_for_release(owner, repo, release_id, content): Create reaction for a release\nreactions.delete_for_release(owner, repo, release_id, reaction_id): Delete a release reaction\nreactions.list_for_team_discussion_comment_legacy(team_id, discussion_number, comment_number, content, per_page, page): List reactions for a team discussion comment (Legacy)\nreactions.create_for_team_discussion_comment_legacy(team_id, discussion_number, comment_number, content): Create reaction for a team discussion comment (Legacy)\nreactions.list_for_team_discussion_legacy(team_id, discussion_number, content, per_page, page): List reactions for a team discussion (Legacy)\nreactions.create_for_team_discussion_legacy(team_id, discussion_number, content): Create reaction for a team discussion (Legacy)\n\n\n\nrepos\n\nrepos.list_for_org(org, type, sort, direction, per_page, page): List organization repositories\nrepos.create_in_org(org, name, description, homepage, private, visibility, has_issues, has_projects, has_wiki, is_template, team_id, auto_init, gitignore_template, license_template, allow_squash_merge, allow_merge_commit, allow_rebase_merge, allow_auto_merge, delete_branch_on_merge, use_squash_pr_title_as_default): Create an organization repository\nrepos.get(owner, repo): Get a repository\nrepos.update(owner, repo, name, description, homepage, private, visibility, security_and_analysis, has_issues, has_projects, has_wiki, is_template, default_branch, allow_squash_merge, allow_merge_commit, allow_rebase_merge, allow_auto_merge, delete_branch_on_merge, allow_update_branch, use_squash_pr_title_as_default, archived, allow_forking): Update a repository\nrepos.delete(owner, repo): Delete a repository\nrepos.list_autolinks(owner, repo, page): List all autolinks of a repository\nrepos.create_autolink(owner, repo, key_prefix, url_template): Create an autolink reference for a repository\nrepos.get_autolink(owner, repo, autolink_id): Get an autolink reference of a repository\nrepos.delete_autolink(owner, repo, autolink_id): Delete an autolink reference from a repository\nrepos.enable_automated_security_fixes(owner, repo): Enable automated security fixes\nrepos.disable_automated_security_fixes(owner, repo): Disable automated security fixes\nrepos.list_branches(owner, repo, protected, per_page, page): List branches\nrepos.get_branch(owner, repo, branch): Get a branch\nrepos.get_branch_protection(owner, repo, branch): Get branch protection\nrepos.update_branch_protection(owner, repo, branch, required_status_checks, enforce_admins, required_pull_request_reviews, restrictions, required_linear_history, allow_force_pushes, allow_deletions, block_creations, required_conversation_resolution): Update branch protection\nrepos.delete_branch_protection(owner, repo, branch): Delete branch protection\nrepos.get_admin_branch_protection(owner, repo, branch): Get admin branch protection\nrepos.set_admin_branch_protection(owner, repo, branch): Set admin branch protection\nrepos.delete_admin_branch_protection(owner, repo, branch): Delete admin branch protection\nrepos.get_pull_request_review_protection(owner, repo, branch): Get pull request review protection\nrepos.update_pull_request_review_protection(owner, repo, branch, dismissal_restrictions, dismiss_stale_reviews, require_code_owner_reviews, required_approving_review_count, bypass_pull_request_allowances): Update pull request review protection\nrepos.delete_pull_request_review_protection(owner, repo, branch): Delete pull request review protection\nrepos.get_commit_signature_protection(owner, repo, branch): Get commit signature protection\nrepos.create_commit_signature_protection(owner, repo, branch): Create commit signature protection\nrepos.delete_commit_signature_protection(owner, repo, branch): Delete commit signature protection\nrepos.get_status_checks_protection(owner, repo, branch): Get status checks protection\nrepos.update_status_check_protection(owner, repo, branch, strict, contexts, checks): Update status check protection\nrepos.remove_status_check_protection(owner, repo, branch): Remove status check protection\nrepos.get_all_status_check_contexts(owner, repo, branch): Get all status check contexts\nrepos.add_status_check_contexts(owner, repo, branch, contexts): Add status check contexts\nrepos.set_status_check_contexts(owner, repo, branch, contexts): Set status check contexts\nrepos.remove_status_check_contexts(owner, repo, branch, contexts): Remove status check contexts\nrepos.get_access_restrictions(owner, repo, branch): Get access restrictions\nrepos.delete_access_restrictions(owner, repo, branch): Delete access restrictions\nrepos.get_apps_with_access_to_protected_branch(owner, repo, branch): Get apps with access to the protected branch\nrepos.add_app_access_restrictions(owner, repo, branch, apps): Add app access restrictions\nrepos.set_app_access_restrictions(owner, repo, branch, apps): Set app access restrictions\nrepos.remove_app_access_restrictions(owner, repo, branch, apps): Remove app access restrictions\nrepos.get_teams_with_access_to_protected_branch(owner, repo, branch): Get teams with access to the protected branch\nrepos.add_team_access_restrictions(owner, repo, branch, teams): Add team access restrictions\nrepos.set_team_access_restrictions(owner, repo, branch, teams): Set team access restrictions\nrepos.remove_team_access_restrictions(owner, repo, branch, teams): Remove team access restrictions\nrepos.get_users_with_access_to_protected_branch(owner, repo, branch): Get users with access to the protected branch\nrepos.add_user_access_restrictions(owner, repo, branch, users): Add user access restrictions\nrepos.set_user_access_restrictions(owner, repo, branch, users): Set user access restrictions\nrepos.remove_user_access_restrictions(owner, repo, branch, users): Remove user access restrictions\nrepos.rename_branch(owner, repo, branch, new_name): Rename a branch\nrepos.codeowners_errors(owner, repo, ref): List CODEOWNERS errors\nrepos.list_collaborators(owner, repo, affiliation, per_page, page): List repository collaborators\nrepos.check_collaborator(owner, repo, username): Check if a user is a repository collaborator\nrepos.add_collaborator(owner, repo, username, permission): Add a repository collaborator\nrepos.remove_collaborator(owner, repo, username): Remove a repository collaborator\nrepos.get_collaborator_permission_level(owner, repo, username): Get repository permissions for a user\nrepos.list_commit_comments_for_repo(owner, repo, per_page, page): List commit comments for a repository\nrepos.get_commit_comment(owner, repo, comment_id): Get a commit comment\nrepos.update_commit_comment(owner, repo, comment_id, body): Update a commit comment\nrepos.delete_commit_comment(owner, repo, comment_id): Delete a commit comment\nrepos.list_commits(owner, repo, sha, path, author, since, until, per_page, page): List commits\nrepos.list_branches_for_head_commit(owner, repo, commit_sha): List branches for HEAD commit\nrepos.list_comments_for_commit(owner, repo, commit_sha, per_page, page): List commit comments\nrepos.create_commit_comment(owner, repo, commit_sha, body, path, position, line): Create a commit comment\nrepos.list_pull_requests_associated_with_commit(owner, repo, commit_sha, per_page, page): List pull requests associated with a commit\nrepos.get_commit(owner, repo, ref, page, per_page): Get a commit\nrepos.get_combined_status_for_ref(owner, repo, ref, per_page, page): Get the combined status for a specific reference\nrepos.list_commit_statuses_for_ref(owner, repo, ref, per_page, page): List commit statuses for a reference\nrepos.get_community_profile_metrics(owner, repo): Get community profile metrics\nrepos.compare_commits(owner, repo, basehead, page, per_page): Compare two commits\nrepos.get_content(owner, repo, path, ref): Get repository content\nrepos.create_or_update_file_contents(owner, repo, path, message, content, sha, branch, committer, author): Create or update file contents\nrepos.delete_file(owner, repo, path, message, sha, branch, committer, author): Delete a file\nrepos.list_contributors(owner, repo, anon, per_page, page): List repository contributors\nrepos.list_deployments(owner, repo, sha, ref, task, environment, per_page, page): List deployments\nrepos.create_deployment(owner, repo, ref, task, auto_merge, required_contexts, payload, environment, description, transient_environment, production_environment): Create a deployment\nrepos.get_deployment(owner, repo, deployment_id): Get a deployment\nrepos.delete_deployment(owner, repo, deployment_id): Delete a deployment\nrepos.list_deployment_statuses(owner, repo, deployment_id, per_page, page): List deployment statuses\nrepos.create_deployment_status(owner, repo, deployment_id, state, target_url, log_url, description, environment, environment_url, auto_inactive): Create a deployment status\nrepos.get_deployment_status(owner, repo, deployment_id, status_id): Get a deployment status\nrepos.create_dispatch_event(owner, repo, event_type, client_payload): Create a repository dispatch event\nrepos.get_all_environments(owner, repo, per_page, page): Get all environments\nrepos.get_environment(owner, repo, environment_name): Get an environment\nrepos.create_or_update_environment(owner, repo, environment_name, wait_timer, reviewers, deployment_branch_policy): Create or update an environment\nrepos.delete_an_environment(owner, repo, environment_name): Delete an environment\nrepos.list_forks(owner, repo, sort, per_page, page): List forks\nrepos.create_fork(owner, repo, organization, name): Create a fork\nrepos.list_webhooks(owner, repo, per_page, page): List repository webhooks\nrepos.create_webhook(owner, repo, name, config, events, active): Create a repository webhook\nrepos.get_webhook(owner, repo, hook_id): Get a repository webhook\nrepos.update_webhook(owner, repo, hook_id, config, events, add_events, remove_events, active): Update a repository webhook\nrepos.delete_webhook(owner, repo, hook_id): Delete a repository webhook\nrepos.get_webhook_config_for_repo(owner, repo, hook_id): Get a webhook configuration for a repository\nrepos.update_webhook_config_for_repo(owner, repo, hook_id, url, content_type, secret, insecure_ssl): Update a webhook configuration for a repository\nrepos.list_webhook_deliveries(owner, repo, hook_id, per_page, cursor): List deliveries for a repository webhook\nrepos.get_webhook_delivery(owner, repo, hook_id, delivery_id): Get a delivery for a repository webhook\nrepos.redeliver_webhook_delivery(owner, repo, hook_id, delivery_id): Redeliver a delivery for a repository webhook\nrepos.ping_webhook(owner, repo, hook_id): Ping a repository webhook\nrepos.test_push_webhook(owner, repo, hook_id): Test the push repository webhook\nrepos.list_invitations(owner, repo, per_page, page): List repository invitations\nrepos.update_invitation(owner, repo, invitation_id, permissions): Update a repository invitation\nrepos.delete_invitation(owner, repo, invitation_id): Delete a repository invitation\nrepos.list_deploy_keys(owner, repo, per_page, page): List deploy keys\nrepos.create_deploy_key(owner, repo, title, key, read_only): Create a deploy key\nrepos.get_deploy_key(owner, repo, key_id): Get a deploy key\nrepos.delete_deploy_key(owner, repo, key_id): Delete a deploy key\nrepos.list_languages(owner, repo): List repository languages\nrepos.enable_lfs_for_repo(owner, repo): Enable Git LFS for a repository\nrepos.disable_lfs_for_repo(owner, repo): Disable Git LFS for a repository\nrepos.merge_upstream(owner, repo, branch): Sync a fork branch with the upstream repository\nrepos.merge(owner, repo, base, head, commit_message): Merge a branch\nrepos.get_pages(owner, repo): Get a GitHub Pages site\nrepos.create_pages_site(owner, repo, source): Create a GitHub Pages site\nrepos.update_information_about_pages_site(owner, repo, cname, https_enforced, public, source): Update information about a GitHub Pages site\nrepos.delete_pages_site(owner, repo): Delete a GitHub Pages site\nrepos.list_pages_builds(owner, repo, per_page, page): List GitHub Pages builds\nrepos.request_pages_build(owner, repo): Request a GitHub Pages build\nrepos.get_latest_pages_build(owner, repo): Get latest Pages build\nrepos.get_pages_build(owner, repo, build_id): Get GitHub Pages build\nrepos.get_pages_health_check(owner, repo): Get a DNS health check for GitHub Pages\nrepos.get_readme(owner, repo, ref): Get a repository README\nrepos.get_readme_in_directory(owner, repo, dir, ref): Get a repository README for a directory\nrepos.list_releases(owner, repo, per_page, page): List releases\nrepos.create_release(owner, repo, tag_name, target_commitish, name, body, draft, prerelease, discussion_category_name, generate_release_notes): Create a release\nrepos.get_release_asset(owner, repo, asset_id): Get a release asset\nrepos.update_release_asset(owner, repo, asset_id, name, label, state): Update a release asset\nrepos.delete_release_asset(owner, repo, asset_id): Delete a release asset\nrepos.generate_release_notes(owner, repo, tag_name, target_commitish, previous_tag_name, configuration_file_path): Generate release notes content for a release\nrepos.get_latest_release(owner, repo): Get the latest release\nrepos.get_release_by_tag(owner, repo, tag): Get a release by tag name\nrepos.get_release(owner, repo, release_id): Get a release\nrepos.update_release(owner, repo, release_id, tag_name, target_commitish, name, body, draft, prerelease, discussion_category_name): Update a release\nrepos.delete_release(owner, repo, release_id): Delete a release\nrepos.list_release_assets(owner, repo, release_id, per_page, page): List release assets\nrepos.upload_release_asset(owner, repo, release_id, name, label): Upload a release asset\nrepos.get_code_frequency_stats(owner, repo): Get the weekly commit activity\nrepos.get_commit_activity_stats(owner, repo): Get the last year of commit activity\nrepos.get_contributors_stats(owner, repo): Get all contributor commit activity\nrepos.get_participation_stats(owner, repo): Get the weekly commit count\nrepos.get_punch_card_stats(owner, repo): Get the hourly commit count for each day\nrepos.create_commit_status(owner, repo, sha, state, target_url, description, context): Create a commit status\nrepos.list_tags(owner, repo, per_page, page): List repository tags\nrepos.list_tag_protection(owner, repo): List tag protection states for a repository\nrepos.create_tag_protection(owner, repo, pattern): Create a tag protection state for a repository\nrepos.delete_tag_protection(owner, repo, tag_protection_id): Delete a tag protection state for a repository\nrepos.download_tarball_archive(owner, repo, ref): Download a repository archive (tar)\nrepos.list_teams(owner, repo, per_page, page): List repository teams\nrepos.get_all_topics(owner, repo, page, per_page): Get all repository topics\nrepos.replace_all_topics(owner, repo, names): Replace all repository topics\nrepos.get_clones(owner, repo, per): Get repository clones\nrepos.get_top_paths(owner, repo): Get top referral paths\nrepos.get_top_referrers(owner, repo): Get top referral sources\nrepos.get_views(owner, repo, per): Get page views\nrepos.transfer(owner, repo, new_owner, team_ids): Transfer a repository\nrepos.check_vulnerability_alerts(owner, repo): Check if vulnerability alerts are enabled for a repository\nrepos.enable_vulnerability_alerts(owner, repo): Enable vulnerability alerts\nrepos.disable_vulnerability_alerts(owner, repo): Disable vulnerability alerts\nrepos.download_zipball_archive(owner, repo, ref): Download a repository archive (zip)\nrepos.create_using_template(template_owner, template_repo, owner, name, description, include_all_branches, private): Create a repository using a template\nrepos.list_public(since): List public repositories\nrepos.list_for_authenticated_user(visibility, affiliation, type, sort, direction, per_page, page, since, before): List repositories for the authenticated user\nrepos.create_for_authenticated_user(name, description, homepage, private, has_issues, has_projects, has_wiki, team_id, auto_init, gitignore_template, license_template, allow_squash_merge, allow_merge_commit, allow_rebase_merge, allow_auto_merge, delete_branch_on_merge, has_downloads, is_template): Create a repository for the authenticated user\nrepos.list_invitations_for_authenticated_user(per_page, page): List repository invitations for the authenticated user\nrepos.accept_invitation_for_authenticated_user(invitation_id): Accept a repository invitation\nrepos.decline_invitation_for_authenticated_user(invitation_id): Decline a repository invitation\nrepos.list_for_user(username, type, sort, direction, per_page, page): List repositories for a user\n\n\n\nscim\n\nscim.list_provisioned_identities(org, startIndex, count, filter): List SCIM provisioned identities\nscim.provision_and_invite_user(org, userName, displayName, name, emails, schemas, externalId, groups, active): Provision and invite a SCIM user\nscim.get_provisioning_information_for_user(org, scim_user_id): Get SCIM provisioning information for a user\nscim.set_information_for_provisioned_user(org, scim_user_id, schemas, displayName, externalId, groups, active, userName, name, emails): Update a provisioned organization membership\nscim.update_attribute_for_user(org, scim_user_id, schemas, Operations): Update an attribute for a SCIM user\nscim.delete_user_from_org(org, scim_user_id): Delete a SCIM user from an organization\n\n\n\nsearch\n\nsearch.code(q, sort, order, per_page, page): Search code\nsearch.commits(q, sort, order, per_page, page): Search commits\nsearch.issues_and_pull_requests(q, sort, order, per_page, page): Search issues and pull requests\nsearch.labels(repository_id, q, sort, order, per_page, page): Search labels\nsearch.repos(q, sort, order, per_page, page): Search repositories\nsearch.topics(q, per_page, page): Search topics\nsearch.users(q, sort, order, per_page, page): Search users\n\n\n\nsecret_scanning\n\nsecret-scanning.list_alerts_for_enterprise(enterprise, state, secret_type, resolution, sort, direction, per_page, before, after): List secret scanning alerts for an enterprise\nsecret-scanning.list_alerts_for_org(org, state, secret_type, resolution, sort, direction, page, per_page, before, after): List secret scanning alerts for an organization\nsecret-scanning.list_alerts_for_repo(owner, repo, state, secret_type, resolution, sort, direction, page, per_page, before, after): List secret scanning alerts for a repository\nsecret-scanning.get_alert(owner, repo, alert_number): Get a secret scanning alert\nsecret-scanning.update_alert(owner, repo, alert_number, state, resolution): Update a secret scanning alert\nsecret-scanning.list_locations_for_alert(owner, repo, alert_number, page, per_page): List locations for a secret scanning alert\n\n\n\nteams\n\nteams.external_idp_group_info_for_org(org, group_id): Get an external group\nteams.list_external_idp_groups_for_org(org, per_page, page, display_name): List external groups in an organization\nteams.list_idp_groups_for_org(org, per_page, page): List IdP groups for an organization\nteams.list(org, per_page, page): List teams\nteams.create(org, name, description, maintainers, repo_names, privacy, permission, parent_team_id): Create a team\nteams.get_by_name(org, team_slug): Get a team by name\nteams.update_in_org(org, team_slug, name, description, privacy, permission, parent_team_id): Update a team\nteams.delete_in_org(org, team_slug): Delete a team\nteams.list_discussions_in_org(org, team_slug, direction, per_page, page, pinned): List discussions\nteams.create_discussion_in_org(org, team_slug, title, body, private): Create a discussion\nteams.get_discussion_in_org(org, team_slug, discussion_number): Get a discussion\nteams.update_discussion_in_org(org, team_slug, discussion_number, title, body): Update a discussion\nteams.delete_discussion_in_org(org, team_slug, discussion_number): Delete a discussion\nteams.list_discussion_comments_in_org(org, team_slug, discussion_number, direction, per_page, page): List discussion comments\nteams.create_discussion_comment_in_org(org, team_slug, discussion_number, body): Create a discussion comment\nteams.get_discussion_comment_in_org(org, team_slug, discussion_number, comment_number): Get a discussion comment\nteams.update_discussion_comment_in_org(org, team_slug, discussion_number, comment_number, body): Update a discussion comment\nteams.delete_discussion_comment_in_org(org, team_slug, discussion_number, comment_number): Delete a discussion comment\nteams.list_linked_external_idp_groups_to_team_for_org(org, team_slug): List a connection between an external group and a team\nteams.link_external_idp_group_to_team_for_org(org, team_slug, group_id): Update the connection between an external group and a team\nteams.unlink_external_idp_group_from_team_for_org(org, team_slug): Remove the connection between an external group and a team\nteams.list_pending_invitations_in_org(org, team_slug, per_page, page): List pending team invitations\nteams.list_members_in_org(org, team_slug, role, per_page, page): List team members\nteams.get_membership_for_user_in_org(org, team_slug, username): Get team membership for a user\nteams.add_or_update_membership_for_user_in_org(org, team_slug, username, role): Add or update team membership for a user\nteams.remove_membership_for_user_in_org(org, team_slug, username): Remove team membership for a user\nteams.list_projects_in_org(org, team_slug, per_page, page): List team projects\nteams.check_permissions_for_project_in_org(org, team_slug, project_id): Check team permissions for a project\nteams.add_or_update_project_permissions_in_org(org, team_slug, project_id, permission): Add or update team project permissions\nteams.remove_project_in_org(org, team_slug, project_id): Remove a project from a team\nteams.list_repos_in_org(org, team_slug, per_page, page): List team repositories\nteams.check_permissions_for_repo_in_org(org, team_slug, owner, repo): Check team permissions for a repository\nteams.add_or_update_repo_permissions_in_org(org, team_slug, owner, repo, permission): Add or update team repository permissions\nteams.remove_repo_in_org(org, team_slug, owner, repo): Remove a repository from a team\nteams.list_idp_groups_in_org(org, team_slug): List IdP groups for a team\nteams.create_or_update_idp_group_connections_in_org(org, team_slug, groups): Create or update IdP group connections\nteams.list_child_in_org(org, team_slug, per_page, page): List child teams\nteams.get_legacy(team_id): Get a team (Legacy)\nteams.update_legacy(team_id, name, description, privacy, permission, parent_team_id): Update a team (Legacy)\nteams.delete_legacy(team_id): Delete a team (Legacy)\nteams.list_discussions_legacy(team_id, direction, per_page, page): List discussions (Legacy)\nteams.create_discussion_legacy(team_id, title, body, private): Create a discussion (Legacy)\nteams.get_discussion_legacy(team_id, discussion_number): Get a discussion (Legacy)\nteams.update_discussion_legacy(team_id, discussion_number, title, body): Update a discussion (Legacy)\nteams.delete_discussion_legacy(team_id, discussion_number): Delete a discussion (Legacy)\nteams.list_discussion_comments_legacy(team_id, discussion_number, direction, per_page, page): List discussion comments (Legacy)\nteams.create_discussion_comment_legacy(team_id, discussion_number, body): Create a discussion comment (Legacy)\nteams.get_discussion_comment_legacy(team_id, discussion_number, comment_number): Get a discussion comment (Legacy)\nteams.update_discussion_comment_legacy(team_id, discussion_number, comment_number, body): Update a discussion comment (Legacy)\nteams.delete_discussion_comment_legacy(team_id, discussion_number, comment_number): Delete a discussion comment (Legacy)\nteams.list_pending_invitations_legacy(team_id, per_page, page): List pending team invitations (Legacy)\nteams.list_members_legacy(team_id, role, per_page, page): List team members (Legacy)\nteams.get_member_legacy(team_id, username): Get team member (Legacy)\nteams.add_member_legacy(team_id, username): Add team member (Legacy)\nteams.remove_member_legacy(team_id, username): Remove team member (Legacy)\nteams.get_membership_for_user_legacy(team_id, username): Get team membership for a user (Legacy)\nteams.add_or_update_membership_for_user_legacy(team_id, username, role): Add or update team membership for a user (Legacy)\nteams.remove_membership_for_user_legacy(team_id, username): Remove team membership for a user (Legacy)\nteams.list_projects_legacy(team_id, per_page, page): List team projects (Legacy)\nteams.check_permissions_for_project_legacy(team_id, project_id): Check team permissions for a project (Legacy)\nteams.add_or_update_project_permissions_legacy(team_id, project_id, permission): Add or update team project permissions (Legacy)\nteams.remove_project_legacy(team_id, project_id): Remove a project from a team (Legacy)\nteams.list_repos_legacy(team_id, per_page, page): List team repositories (Legacy)\nteams.check_permissions_for_repo_legacy(team_id, owner, repo): Check team permissions for a repository (Legacy)\nteams.add_or_update_repo_permissions_legacy(team_id, owner, repo, permission): Add or update team repository permissions (Legacy)\nteams.remove_repo_legacy(team_id, owner, repo): Remove a repository from a team (Legacy)\nteams.list_idp_groups_for_legacy(team_id): List IdP groups for a team (Legacy)\nteams.create_or_update_idp_group_connections_legacy(team_id, groups, synced_at): Create or update IdP group connections (Legacy)\nteams.list_child_legacy(team_id, per_page, page): List child teams (Legacy)\nteams.list_for_authenticated_user(per_page, page): List teams for the authenticated user\n\n\n\nusers\n\nusers.get_authenticated(): Get the authenticated user\nusers.update_authenticated(name, email, blog, twitter_username, company, location, hireable, bio): Update the authenticated user\nusers.list_blocked_by_authenticated_user(): List users blocked by the authenticated user\nusers.check_blocked(username): Check if a user is blocked by the authenticated user\nusers.block(username): Block a user\nusers.unblock(username): Unblock a user\nusers.set_primary_email_visibility_for_authenticated_user(visibility): Set primary email visibility for the authenticated user\nusers.list_emails_for_authenticated_user(per_page, page): List email addresses for the authenticated user\nusers.add_email_for_authenticated_user(emails): Add an email address for the authenticated user\nusers.delete_email_for_authenticated_user(emails): Delete an email address for the authenticated user\nusers.list_followers_for_authenticated_user(per_page, page): List followers of the authenticated user\nusers.list_followed_by_authenticated_user(per_page, page): List the people the authenticated user follows\nusers.check_person_is_followed_by_authenticated(username): Check if a person is followed by the authenticated user\nusers.follow(username): Follow a user\nusers.unfollow(username): Unfollow a user\nusers.list_gpg_keys_for_authenticated_user(per_page, page): List GPG keys for the authenticated user\nusers.create_gpg_key_for_authenticated_user(name, armored_public_key): Create a GPG key for the authenticated user\nusers.get_gpg_key_for_authenticated_user(gpg_key_id): Get a GPG key for the authenticated user\nusers.delete_gpg_key_for_authenticated_user(gpg_key_id): Delete a GPG key for the authenticated user\nusers.list_public_ssh_keys_for_authenticated_user(per_page, page): List public SSH keys for the authenticated user\nusers.create_public_ssh_key_for_authenticated_user(title, key): Create a public SSH key for the authenticated user\nusers.get_public_ssh_key_for_authenticated_user(key_id): Get a public SSH key for the authenticated user\nusers.delete_public_ssh_key_for_authenticated_user(key_id): Delete a public SSH key for the authenticated user\nusers.list_public_emails_for_authenticated_user(per_page, page): List public email addresses for the authenticated user\nusers.list(since, per_page): List users\nusers.get_by_username(username): Get a user\nusers.list_followers_for_user(username, per_page, page): List followers of a user\nusers.list_following_for_user(username, per_page, page): List the people a user follows\nusers.check_following_for_user(username, target_user): Check if a user follows another user\nusers.list_gpg_keys_for_user(username, per_page, page): List GPG keys for a user\nusers.get_context_for_user(username, subject_type, subject_id): Get contextual information for a user\nusers.list_public_keys_for_user(username, per_page, page): List public keys for a user",
    "crumbs": [
      "Full GitHub API reference"
    ]
  },
  {
    "objectID": "fullapi.html#actions",
    "href": "fullapi.html#actions",
    "title": "Full GitHub API reference",
    "section": "actions",
    "text": "actions\n\nactions.get_actions_cache_usage_for_enterprise(enterprise): Get GitHub Actions cache usage for an enterprise\nactions.set_actions_oidc_custom_issuer_policy_for_enterprise(enterprise, include_enterprise_slug): Set the GitHub Actions OIDC custom issuer policy for an enterprise\nactions.get_github_actions_default_workflow_permissions_enterprise(enterprise): Get default workflow permissions for an enterprise\nactions.set_github_actions_default_workflow_permissions_enterprise(enterprise, default_workflow_permissions, can_approve_pull_request_reviews): Set default workflow permissions for an enterprise\nactions.get_actions_cache_usage_for_org(org): Get GitHub Actions cache usage for an organization\nactions.get_actions_cache_usage_by_repo_for_org(org, per_page, page): List repositories with GitHub Actions cache usage for an organization\nactions.get_github_actions_permissions_organization(org): Get GitHub Actions permissions for an organization\nactions.set_github_actions_permissions_organization(org, enabled_repositories, allowed_actions): Set GitHub Actions permissions for an organization\nactions.list_selected_repositories_enabled_github_actions_organization(org, per_page, page): List selected repositories enabled for GitHub Actions in an organization\nactions.set_selected_repositories_enabled_github_actions_organization(org, selected_repository_ids): Set selected repositories enabled for GitHub Actions in an organization\nactions.enable_selected_repository_github_actions_organization(org, repository_id): Enable a selected repository for GitHub Actions in an organization\nactions.disable_selected_repository_github_actions_organization(org, repository_id): Disable a selected repository for GitHub Actions in an organization\nactions.get_allowed_actions_organization(org): Get allowed actions and reusable workflows for an organization\nactions.set_allowed_actions_organization(org, github_owned_allowed, verified_allowed, patterns_allowed): Set allowed actions and reusable workflows for an organization\nactions.get_github_actions_default_workflow_permissions_organization(org): Get default workflow permissions for an organization\nactions.set_github_actions_default_workflow_permissions_organization(org, default_workflow_permissions, can_approve_pull_request_reviews): Set default workflow permissions for an organization\nactions.list_self_hosted_runner_groups_for_org(org, per_page, page, visible_to_repository): List self-hosted runner groups for an organization\nactions.create_self_hosted_runner_group_for_org(org, name, visibility, selected_repository_ids, runners, allows_public_repositories, restricted_to_workflows, selected_workflows): Create a self-hosted runner group for an organization\nactions.get_self_hosted_runner_group_for_org(org, runner_group_id): Get a self-hosted runner group for an organization\nactions.update_self_hosted_runner_group_for_org(org, runner_group_id, name, visibility, allows_public_repositories, restricted_to_workflows, selected_workflows): Update a self-hosted runner group for an organization\nactions.delete_self_hosted_runner_group_from_org(org, runner_group_id): Delete a self-hosted runner group from an organization\nactions.list_repo_access_to_self_hosted_runner_group_in_org(org, runner_group_id, page, per_page): List repository access to a self-hosted runner group in an organization\nactions.set_repo_access_to_self_hosted_runner_group_in_org(org, runner_group_id, selected_repository_ids): Set repository access for a self-hosted runner group in an organization\nactions.add_repo_access_to_self_hosted_runner_group_in_org(org, runner_group_id, repository_id): Add repository access to a self-hosted runner group in an organization\nactions.remove_repo_access_to_self_hosted_runner_group_in_org(org, runner_group_id, repository_id): Remove repository access to a self-hosted runner group in an organization\nactions.list_self_hosted_runners_in_group_for_org(org, runner_group_id, per_page, page): List self-hosted runners in a group for an organization\nactions.set_self_hosted_runners_in_group_for_org(org, runner_group_id, runners): Set self-hosted runners in a group for an organization\nactions.add_self_hosted_runner_to_group_for_org(org, runner_group_id, runner_id): Add a self-hosted runner to a group for an organization\nactions.remove_self_hosted_runner_from_group_for_org(org, runner_group_id, runner_id): Remove a self-hosted runner from a group for an organization\nactions.list_self_hosted_runners_for_org(org, per_page, page): List self-hosted runners for an organization\nactions.list_runner_applications_for_org(org): List runner applications for an organization\nactions.create_registration_token_for_org(org): Create a registration token for an organization\nactions.create_remove_token_for_org(org): Create a remove token for an organization\nactions.get_self_hosted_runner_for_org(org, runner_id): Get a self-hosted runner for an organization\nactions.delete_self_hosted_runner_from_org(org, runner_id): Delete a self-hosted runner from an organization\nactions.list_labels_for_self_hosted_runner_for_org(org, runner_id): List labels for a self-hosted runner for an organization\nactions.add_custom_labels_to_self_hosted_runner_for_org(org, runner_id, labels): Add custom labels to a self-hosted runner for an organization\nactions.set_custom_labels_for_self_hosted_runner_for_org(org, runner_id, labels): Set custom labels for a self-hosted runner for an organization\nactions.remove_all_custom_labels_from_self_hosted_runner_for_org(org, runner_id): Remove all custom labels from a self-hosted runner for an organization\nactions.remove_custom_label_from_self_hosted_runner_for_org(org, runner_id, name): Remove a custom label from a self-hosted runner for an organization\nactions.list_org_secrets(org, per_page, page): List organization secrets\nactions.get_org_public_key(org): Get an organization public key\nactions.get_org_secret(org, secret_name): Get an organization secret\nactions.create_or_update_org_secret(org, secret_name, encrypted_value, key_id, visibility, selected_repository_ids): Create or update an organization secret\nactions.delete_org_secret(org, secret_name): Delete an organization secret\nactions.list_selected_repos_for_org_secret(org, secret_name, page, per_page): List selected repositories for an organization secret\nactions.set_selected_repos_for_org_secret(org, secret_name, selected_repository_ids): Set selected repositories for an organization secret\nactions.add_selected_repo_to_org_secret(org, secret_name, repository_id): Add selected repository to an organization secret\nactions.remove_selected_repo_from_org_secret(org, secret_name, repository_id): Remove selected repository from an organization secret\nactions.list_artifacts_for_repo(owner, repo, per_page, page): List artifacts for a repository\nactions.get_artifact(owner, repo, artifact_id): Get an artifact\nactions.delete_artifact(owner, repo, artifact_id): Delete an artifact\nactions.download_artifact(owner, repo, artifact_id, archive_format): Download an artifact\nactions.get_actions_cache_usage(owner, repo): Get GitHub Actions cache usage for a repository\nactions.get_actions_cache_list(owner, repo, per_page, page, ref, key, sort, direction): List GitHub Actions caches for a repository\nactions.delete_actions_cache_by_key(owner, repo, key, ref): Delete GitHub Actions caches for a repository (using a cache key)\nactions.delete_actions_cache_by_id(owner, repo, cache_id): Delete a GitHub Actions cache for a repository (using a cache ID)\nactions.get_job_for_workflow_run(owner, repo, job_id): Get a job for a workflow run\nactions.download_job_logs_for_workflow_run(owner, repo, job_id): Download job logs for a workflow run\nactions.re_run_job_for_workflow_run(owner, repo, job_id, enable_debug_logging): Re-run a job from a workflow run\nactions.get_custom_oidc_sub_claim_for_repo(owner, repo): Get the opt-out flag of an OIDC subject claim customization for a repository\nactions.set_custom_oidc_sub_claim_for_repo(owner, repo, use_default): Set the opt-out flag of an OIDC subject claim customization for a repository\nactions.get_github_actions_permissions_repository(owner, repo): Get GitHub Actions permissions for a repository\nactions.set_github_actions_permissions_repository(owner, repo, enabled, allowed_actions): Set GitHub Actions permissions for a repository\nactions.get_workflow_access_to_repository(owner, repo): Get the level of access for workflows outside of the repository\nactions.set_workflow_access_to_repository(owner, repo, access_level): Set the level of access for workflows outside of the repository\nactions.get_allowed_actions_repository(owner, repo): Get allowed actions and reusable workflows for a repository\nactions.set_allowed_actions_repository(owner, repo, github_owned_allowed, verified_allowed, patterns_allowed): Set allowed actions and reusable workflows for a repository\nactions.get_github_actions_default_workflow_permissions_repository(owner, repo): Get default workflow permissions for a repository\nactions.set_github_actions_default_workflow_permissions_repository(owner, repo, default_workflow_permissions, can_approve_pull_request_reviews): Set default workflow permissions for a repository\nactions.list_self_hosted_runners_for_repo(owner, repo, per_page, page): List self-hosted runners for a repository\nactions.list_runner_applications_for_repo(owner, repo): List runner applications for a repository\nactions.create_registration_token_for_repo(owner, repo): Create a registration token for a repository\nactions.create_remove_token_for_repo(owner, repo): Create a remove token for a repository\nactions.get_self_hosted_runner_for_repo(owner, repo, runner_id): Get a self-hosted runner for a repository\nactions.delete_self_hosted_runner_from_repo(owner, repo, runner_id): Delete a self-hosted runner from a repository\nactions.list_labels_for_self_hosted_runner_for_repo(owner, repo, runner_id): List labels for a self-hosted runner for a repository\nactions.add_custom_labels_to_self_hosted_runner_for_repo(owner, repo, runner_id, labels): Add custom labels to a self-hosted runner for a repository\nactions.set_custom_labels_for_self_hosted_runner_for_repo(owner, repo, runner_id, labels): Set custom labels for a self-hosted runner for a repository\nactions.remove_all_custom_labels_from_self_hosted_runner_for_repo(owner, repo, runner_id): Remove all custom labels from a self-hosted runner for a repository\nactions.remove_custom_label_from_self_hosted_runner_for_repo(owner, repo, runner_id, name): Remove a custom label from a self-hosted runner for a repository\nactions.list_workflow_runs_for_repo(owner, repo, actor, branch, event, status, per_page, page, created, exclude_pull_requests, check_suite_id): List workflow runs for a repository\nactions.get_workflow_run(owner, repo, run_id, exclude_pull_requests): Get a workflow run\nactions.delete_workflow_run(owner, repo, run_id): Delete a workflow run\nactions.get_reviews_for_run(owner, repo, run_id): Get the review history for a workflow run\nactions.approve_workflow_run(owner, repo, run_id): Approve a workflow run for a fork pull request\nactions.list_workflow_run_artifacts(owner, repo, run_id, per_page, page): List workflow run artifacts\nactions.get_workflow_run_attempt(owner, repo, run_id, attempt_number, exclude_pull_requests): Get a workflow run attempt\nactions.list_jobs_for_workflow_run_attempt(owner, repo, run_id, attempt_number, per_page, page): List jobs for a workflow run attempt\nactions.download_workflow_run_attempt_logs(owner, repo, run_id, attempt_number): Download workflow run attempt logs\nactions.cancel_workflow_run(owner, repo, run_id): Cancel a workflow run\nactions.list_jobs_for_workflow_run(owner, repo, run_id, filter, per_page, page): List jobs for a workflow run\nactions.download_workflow_run_logs(owner, repo, run_id): Download workflow run logs\nactions.delete_workflow_run_logs(owner, repo, run_id): Delete workflow run logs\nactions.get_pending_deployments_for_run(owner, repo, run_id): Get pending deployments for a workflow run\nactions.review_pending_deployments_for_run(owner, repo, run_id, environment_ids, state, comment): Review pending deployments for a workflow run\nactions.re_run_workflow(owner, repo, run_id, enable_debug_logging): Re-run a workflow\nactions.re_run_workflow_failed_jobs(owner, repo, run_id, enable_debug_logging): Re-run failed jobs from a workflow run\nactions.get_workflow_run_usage(owner, repo, run_id): Get workflow run usage\nactions.list_repo_secrets(owner, repo, per_page, page): List repository secrets\nactions.get_repo_public_key(owner, repo): Get a repository public key\nactions.get_repo_secret(owner, repo, secret_name): Get a repository secret\nactions.create_or_update_repo_secret(owner, repo, secret_name, encrypted_value, key_id): Create or update a repository secret\nactions.delete_repo_secret(owner, repo, secret_name): Delete a repository secret\nactions.list_repo_workflows(owner, repo, per_page, page): List repository workflows\nactions.get_workflow(owner, repo, workflow_id): Get a workflow\nactions.disable_workflow(owner, repo, workflow_id): Disable a workflow\nactions.create_workflow_dispatch(owner, repo, workflow_id, ref, inputs): Create a workflow dispatch event\nactions.enable_workflow(owner, repo, workflow_id): Enable a workflow\nactions.list_workflow_runs(owner, repo, workflow_id, actor, branch, event, status, per_page, page, created, exclude_pull_requests, check_suite_id): List workflow runs\nactions.get_workflow_usage(owner, repo, workflow_id): Get workflow usage\nactions.list_environment_secrets(repository_id, environment_name, per_page, page): List environment secrets\nactions.get_environment_public_key(repository_id, environment_name): Get an environment public key\nactions.get_environment_secret(repository_id, environment_name, secret_name): Get an environment secret\nactions.create_or_update_environment_secret(repository_id, environment_name, secret_name, encrypted_value, key_id): Create or update an environment secret\nactions.delete_environment_secret(repository_id, environment_name, secret_name): Delete an environment secret",
    "crumbs": [
      "Full GitHub API reference"
    ]
  },
  {
    "objectID": "fullapi.html#activity",
    "href": "fullapi.html#activity",
    "title": "Full GitHub API reference",
    "section": "activity",
    "text": "activity\n\nactivity.list_public_events(per_page, page): List public events\nactivity.get_feeds(): Get feeds\nactivity.list_public_events_for_repo_network(owner, repo, per_page, page): List public events for a network of repositories\nactivity.list_notifications_for_authenticated_user(all, participating, since, before, per_page, page): List notifications for the authenticated user\nactivity.mark_notifications_as_read(last_read_at, read): Mark notifications as read\nactivity.get_thread(thread_id): Get a thread\nactivity.mark_thread_as_read(thread_id): Mark a thread as read\nactivity.get_thread_subscription_for_authenticated_user(thread_id): Get a thread subscription for the authenticated user\nactivity.set_thread_subscription(thread_id, ignored): Set a thread subscription\nactivity.delete_thread_subscription(thread_id): Delete a thread subscription\nactivity.list_public_org_events(org, per_page, page): List public organization events\nactivity.list_repo_events(owner, repo, per_page, page): List repository events\nactivity.list_repo_notifications_for_authenticated_user(owner, repo, all, participating, since, before, per_page, page): List repository notifications for the authenticated user\nactivity.mark_repo_notifications_as_read(owner, repo, last_read_at): Mark repository notifications as read\nactivity.list_stargazers_for_repo(owner, repo, per_page, page): List stargazers\nactivity.list_watchers_for_repo(owner, repo, per_page, page): List watchers\nactivity.get_repo_subscription(owner, repo): Get a repository subscription\nactivity.set_repo_subscription(owner, repo, subscribed, ignored): Set a repository subscription\nactivity.delete_repo_subscription(owner, repo): Delete a repository subscription\nactivity.list_repos_starred_by_authenticated_user(sort, direction, per_page, page): List repositories starred by the authenticated user\nactivity.check_repo_is_starred_by_authenticated_user(owner, repo): Check if a repository is starred by the authenticated user\nactivity.star_repo_for_authenticated_user(owner, repo): Star a repository for the authenticated user\nactivity.unstar_repo_for_authenticated_user(owner, repo): Unstar a repository for the authenticated user\nactivity.list_watched_repos_for_authenticated_user(per_page, page): List repositories watched by the authenticated user\nactivity.list_events_for_authenticated_user(username, per_page, page): List events for the authenticated user\nactivity.list_org_events_for_authenticated_user(username, org, per_page, page): List organization events for the authenticated user\nactivity.list_public_events_for_user(username, per_page, page): List public events for a user\nactivity.list_received_events_for_user(username, per_page, page): List events received by the authenticated user\nactivity.list_received_public_events_for_user(username, per_page, page): List public events received by a user\nactivity.list_repos_starred_by_user(username, sort, direction, per_page, page): List repositories starred by a user\nactivity.list_repos_watched_by_user(username, per_page, page): List repositories watched by a user",
    "crumbs": [
      "Full GitHub API reference"
    ]
  },
  {
    "objectID": "fullapi.html#apps",
    "href": "fullapi.html#apps",
    "title": "Full GitHub API reference",
    "section": "apps",
    "text": "apps\n\napps.get_authenticated(): Get the authenticated app\napps.create_from_manifest(code): Create a GitHub App from a manifest\napps.get_webhook_config_for_app(): Get a webhook configuration for an app\napps.update_webhook_config_for_app(url, content_type, secret, insecure_ssl): Update a webhook configuration for an app\napps.list_webhook_deliveries(per_page, cursor): List deliveries for an app webhook\napps.get_webhook_delivery(delivery_id): Get a delivery for an app webhook\napps.redeliver_webhook_delivery(delivery_id): Redeliver a delivery for an app webhook\napps.list_installations(per_page, page, since, outdated): List installations for the authenticated app\napps.get_installation(installation_id): Get an installation for the authenticated app\napps.delete_installation(installation_id): Delete an installation for the authenticated app\napps.create_installation_access_token(installation_id, repositories, repository_ids, permissions): Create an installation access token for an app\napps.suspend_installation(installation_id): Suspend an app installation\napps.unsuspend_installation(installation_id): Unsuspend an app installation\napps.delete_authorization(client_id, access_token): Delete an app authorization\napps.check_token(client_id, access_token): Check a token\napps.reset_token(client_id, access_token): Reset a token\napps.delete_token(client_id, access_token): Delete an app token\napps.scope_token(client_id, access_token, target, target_id, repositories, repository_ids, permissions): Create a scoped access token\napps.get_by_slug(app_slug): Get an app\napps.list_repos_accessible_to_installation(per_page, page): List repositories accessible to the app installation\napps.revoke_installation_access_token(): Revoke an installation access token\napps.get_subscription_plan_for_account(account_id): Get a subscription plan for an account\napps.list_plans(per_page, page): List plans\napps.list_accounts_for_plan(plan_id, sort, direction, per_page, page): List accounts for a plan\napps.get_subscription_plan_for_account_stubbed(account_id): Get a subscription plan for an account (stubbed)\napps.list_plans_stubbed(per_page, page): List plans (stubbed)\napps.list_accounts_for_plan_stubbed(plan_id, sort, direction, per_page, page): List accounts for a plan (stubbed)\napps.get_org_installation(org): Get an organization installation for the authenticated app\napps.get_repo_installation(owner, repo): Get a repository installation for the authenticated app\napps.list_installations_for_authenticated_user(per_page, page): List app installations accessible to the user access token\napps.list_installation_repos_for_authenticated_user(installation_id, per_page, page): List repositories accessible to the user access token\napps.add_repo_to_installation_for_authenticated_user(installation_id, repository_id): Add a repository to an app installation\napps.remove_repo_from_installation_for_authenticated_user(installation_id, repository_id): Remove a repository from an app installation\napps.list_subscriptions_for_authenticated_user(per_page, page): List subscriptions for the authenticated user\napps.list_subscriptions_for_authenticated_user_stubbed(per_page, page): List subscriptions for the authenticated user (stubbed)\napps.get_user_installation(username): Get a user installation for the authenticated app",
    "crumbs": [
      "Full GitHub API reference"
    ]
  },
  {
    "objectID": "fullapi.html#billing",
    "href": "fullapi.html#billing",
    "title": "Full GitHub API reference",
    "section": "billing",
    "text": "billing\n\nbilling.get_github_actions_billing_ghe(enterprise): Get GitHub Actions billing for an enterprise\nbilling.get_github_advanced_security_billing_ghe(enterprise, per_page, page): Get GitHub Advanced Security active committers for an enterprise\nbilling.get_github_packages_billing_ghe(enterprise): Get GitHub Packages billing for an enterprise\nbilling.get_shared_storage_billing_ghe(enterprise): Get shared storage billing for an enterprise\nbilling.get_github_actions_billing_org(org): Get GitHub Actions billing for an organization\nbilling.get_github_advanced_security_billing_org(org, per_page, page): Get GitHub Advanced Security active committers for an organization\nbilling.get_github_packages_billing_org(org): Get GitHub Packages billing for an organization\nbilling.get_shared_storage_billing_org(org): Get shared storage billing for an organization\nbilling.get_github_actions_billing_user(username): Get GitHub Actions billing for a user\nbilling.get_github_packages_billing_user(username): Get GitHub Packages billing for a user\nbilling.get_shared_storage_billing_user(username): Get shared storage billing for a user",
    "crumbs": [
      "Full GitHub API reference"
    ]
  },
  {
    "objectID": "fullapi.html#checks",
    "href": "fullapi.html#checks",
    "title": "Full GitHub API reference",
    "section": "checks",
    "text": "checks\n\nchecks.create(owner, repo, name, head_sha, details_url, external_id, status, started_at, conclusion, completed_at, output, actions): Create a check run\nchecks.get(owner, repo, check_run_id): Get a check run\nchecks.update(owner, repo, check_run_id, name, details_url, external_id, started_at, status, conclusion, completed_at, output, actions): Update a check run\nchecks.list_annotations(owner, repo, check_run_id, per_page, page): List check run annotations\nchecks.rerequest_run(owner, repo, check_run_id): Rerequest a check run\nchecks.create_suite(owner, repo, head_sha): Create a check suite\nchecks.set_suites_preferences(owner, repo, auto_trigger_checks): Update repository preferences for check suites\nchecks.get_suite(owner, repo, check_suite_id): Get a check suite\nchecks.list_for_suite(owner, repo, check_suite_id, check_name, status, filter, per_page, page): List check runs in a check suite\nchecks.rerequest_suite(owner, repo, check_suite_id): Rerequest a check suite\nchecks.list_for_ref(owner, repo, ref, check_name, status, filter, per_page, page, app_id): List check runs for a Git reference\nchecks.list_suites_for_ref(owner, repo, ref, app_id, check_name, per_page, page): List check suites for a Git reference",
    "crumbs": [
      "Full GitHub API reference"
    ]
  },
  {
    "objectID": "fullapi.html#code_scanning",
    "href": "fullapi.html#code_scanning",
    "title": "Full GitHub API reference",
    "section": "code_scanning",
    "text": "code_scanning\n\ncode-scanning.list_alerts_for_enterprise(enterprise, tool_name, tool_guid, before, after, page, per_page, direction, state, sort): List code scanning alerts for an enterprise\ncode-scanning.list_alerts_for_org(org, tool_name, tool_guid, before, after, page, per_page, direction, state, sort): List code scanning alerts for an organization\ncode-scanning.list_alerts_for_repo(owner, repo, tool_name, tool_guid, page, per_page, ref, direction, sort, state): List code scanning alerts for a repository\ncode-scanning.get_alert(owner, repo, alert_number): Get a code scanning alert\ncode-scanning.update_alert(owner, repo, alert_number, state, dismissed_reason, dismissed_comment): Update a code scanning alert\ncode-scanning.list_alert_instances(owner, repo, alert_number, page, per_page, ref): List instances of a code scanning alert\ncode-scanning.list_recent_analyses(owner, repo, tool_name, tool_guid, page, per_page, ref, sarif_id): List code scanning analyses for a repository\ncode-scanning.get_analysis(owner, repo, analysis_id): Get a code scanning analysis for a repository\ncode-scanning.delete_analysis(owner, repo, analysis_id, confirm_delete): Delete a code scanning analysis from a repository\ncode-scanning.upload_sarif(owner, repo, commit_sha, ref, sarif, checkout_uri, started_at, tool_name): Upload an analysis as SARIF data\ncode-scanning.get_sarif(owner, repo, sarif_id): Get information about a SARIF upload",
    "crumbs": [
      "Full GitHub API reference"
    ]
  },
  {
    "objectID": "fullapi.html#codes_of_conduct",
    "href": "fullapi.html#codes_of_conduct",
    "title": "Full GitHub API reference",
    "section": "codes_of_conduct",
    "text": "codes_of_conduct\n\ncodes-of-conduct.get_all_codes_of_conduct(): Get all codes of conduct\ncodes-of-conduct.get_conduct_code(key): Get a code of conduct",
    "crumbs": [
      "Full GitHub API reference"
    ]
  },
  {
    "objectID": "fullapi.html#codespaces",
    "href": "fullapi.html#codespaces",
    "title": "Full GitHub API reference",
    "section": "codespaces",
    "text": "codespaces\n\ncodespaces.list_in_organization(org, per_page, page): List codespaces for the organization\ncodespaces.delete_from_organization(org, username, codespace_name): Delete a codespace from the organization\ncodespaces.stop_in_organization(org, username, codespace_name): Stop a codespace for an organization user\ncodespaces.list_in_repository_for_authenticated_user(owner, repo, per_page, page): List codespaces in a repository for the authenticated user\ncodespaces.create_with_repo_for_authenticated_user(owner, repo, ref, location, client_ip, machine, devcontainer_path, multi_repo_permissions_opt_out, working_directory, idle_timeout_minutes, display_name, retention_period_minutes): Create a codespace in a repository\ncodespaces.list_devcontainers_in_repository_for_authenticated_user(owner, repo, per_page, page): List devcontainer configurations in a repository for the authenticated user\ncodespaces.repo_machines_for_authenticated_user(owner, repo, location, client_ip): List available machine types for a repository\ncodespaces.pre_flight_with_repo_for_authenticated_user(owner, repo, ref, client_ip): Get default attributes for a codespace\ncodespaces.list_repo_secrets(owner, repo, per_page, page): List repository secrets\ncodespaces.get_repo_public_key(owner, repo): Get a repository public key\ncodespaces.get_repo_secret(owner, repo, secret_name): Get a repository secret\ncodespaces.create_or_update_repo_secret(owner, repo, secret_name, encrypted_value, key_id): Create or update a repository secret\ncodespaces.delete_repo_secret(owner, repo, secret_name): Delete a repository secret\ncodespaces.create_with_pr_for_authenticated_user(owner, repo, pull_number, location, client_ip, machine, devcontainer_path, multi_repo_permissions_opt_out, working_directory, idle_timeout_minutes, display_name, retention_period_minutes): Create a codespace from a pull request\ncodespaces.list_for_authenticated_user(per_page, page, repository_id): List codespaces for the authenticated user\ncodespaces.create_for_authenticated_user(repository_id, ref, location, client_ip, machine, devcontainer_path, multi_repo_permissions_opt_out, working_directory, idle_timeout_minutes, display_name, retention_period_minutes): Create a codespace for the authenticated user\ncodespaces.list_secrets_for_authenticated_user(per_page, page): List secrets for the authenticated user\ncodespaces.get_public_key_for_authenticated_user(): Get public key for the authenticated user\ncodespaces.get_secret_for_authenticated_user(secret_name): Get a secret for the authenticated user\ncodespaces.create_or_update_secret_for_authenticated_user(secret_name, encrypted_value, key_id, selected_repository_ids): Create or update a secret for the authenticated user\ncodespaces.delete_secret_for_authenticated_user(secret_name): Delete a secret for the authenticated user\ncodespaces.list_repositories_for_secret_for_authenticated_user(secret_name): List selected repositories for a user secret\ncodespaces.set_repositories_for_secret_for_authenticated_user(secret_name, selected_repository_ids): Set selected repositories for a user secret\ncodespaces.add_repository_for_secret_for_authenticated_user(secret_name, repository_id): Add a selected repository to a user secret\ncodespaces.remove_repository_for_secret_for_authenticated_user(secret_name, repository_id): Remove a selected repository from a user secret\ncodespaces.get_for_authenticated_user(codespace_name): Get a codespace for the authenticated user\ncodespaces.update_for_authenticated_user(codespace_name, machine, display_name, recent_folders): Update a codespace for the authenticated user\ncodespaces.delete_for_authenticated_user(codespace_name): Delete a codespace for the authenticated user\ncodespaces.codespace_machines_for_authenticated_user(codespace_name): List machine types for a codespace\ncodespaces.start_for_authenticated_user(codespace_name): Start a codespace for the authenticated user\ncodespaces.stop_for_authenticated_user(codespace_name): Stop a codespace for the authenticated user",
    "crumbs": [
      "Full GitHub API reference"
    ]
  },
  {
    "objectID": "fullapi.html#dependabot",
    "href": "fullapi.html#dependabot",
    "title": "Full GitHub API reference",
    "section": "dependabot",
    "text": "dependabot\n\ndependabot.list_org_secrets(org, per_page, page): List organization secrets\ndependabot.get_org_public_key(org): Get an organization public key\ndependabot.get_org_secret(org, secret_name): Get an organization secret\ndependabot.create_or_update_org_secret(org, secret_name, encrypted_value, key_id, visibility, selected_repository_ids): Create or update an organization secret\ndependabot.delete_org_secret(org, secret_name): Delete an organization secret\ndependabot.list_selected_repos_for_org_secret(org, secret_name, page, per_page): List selected repositories for an organization secret\ndependabot.set_selected_repos_for_org_secret(org, secret_name, selected_repository_ids): Set selected repositories for an organization secret\ndependabot.add_selected_repo_to_org_secret(org, secret_name, repository_id): Add selected repository to an organization secret\ndependabot.remove_selected_repo_from_org_secret(org, secret_name, repository_id): Remove selected repository from an organization secret\ndependabot.list_repo_secrets(owner, repo, per_page, page): List repository secrets\ndependabot.get_repo_public_key(owner, repo): Get a repository public key\ndependabot.get_repo_secret(owner, repo, secret_name): Get a repository secret\ndependabot.create_or_update_repo_secret(owner, repo, secret_name, encrypted_value, key_id): Create or update a repository secret\ndependabot.delete_repo_secret(owner, repo, secret_name): Delete a repository secret",
    "crumbs": [
      "Full GitHub API reference"
    ]
  },
  {
    "objectID": "fullapi.html#dependency_graph",
    "href": "fullapi.html#dependency_graph",
    "title": "Full GitHub API reference",
    "section": "dependency_graph",
    "text": "dependency_graph\n\ndependency-graph.diff_range(owner, repo, basehead, name): Get a diff of the dependencies between commits\ndependency-graph.create_repository_snapshot(owner, repo, version, job, sha, ref, detector, metadata, manifests, scanned): Create a snapshot of dependencies for a repository",
    "crumbs": [
      "Full GitHub API reference"
    ]
  },
  {
    "objectID": "fullapi.html#emojis",
    "href": "fullapi.html#emojis",
    "title": "Full GitHub API reference",
    "section": "emojis",
    "text": "emojis\n\nemojis.get(): Get emojis",
    "crumbs": [
      "Full GitHub API reference"
    ]
  },
  {
    "objectID": "fullapi.html#enterprise_admin",
    "href": "fullapi.html#enterprise_admin",
    "title": "Full GitHub API reference",
    "section": "enterprise_admin",
    "text": "enterprise_admin\n\nenterprise-admin.get_server_statistics(enterprise_or_org, date_start, date_end): Get GitHub Enterprise Server statistics\nenterprise-admin.get_github_actions_permissions_enterprise(enterprise): Get GitHub Actions permissions for an enterprise\nenterprise-admin.set_github_actions_permissions_enterprise(enterprise, enabled_organizations, allowed_actions): Set GitHub Actions permissions for an enterprise\nenterprise-admin.list_selected_organizations_enabled_github_actions_enterprise(enterprise, per_page, page): List selected organizations enabled for GitHub Actions in an enterprise\nenterprise-admin.set_selected_organizations_enabled_github_actions_enterprise(enterprise, selected_organization_ids): Set selected organizations enabled for GitHub Actions in an enterprise\nenterprise-admin.enable_selected_organization_github_actions_enterprise(enterprise, org_id): Enable a selected organization for GitHub Actions in an enterprise\nenterprise-admin.disable_selected_organization_github_actions_enterprise(enterprise, org_id): Disable a selected organization for GitHub Actions in an enterprise\nenterprise-admin.get_allowed_actions_enterprise(enterprise): Get allowed actions and reusable workflows for an enterprise\nenterprise-admin.set_allowed_actions_enterprise(enterprise, github_owned_allowed, verified_allowed, patterns_allowed): Set allowed actions and reusable workflows for an enterprise\nenterprise-admin.list_self_hosted_runner_groups_for_enterprise(enterprise, per_page, page, visible_to_organization): List self-hosted runner groups for an enterprise\nenterprise-admin.create_self_hosted_runner_group_for_enterprise(enterprise, name, visibility, selected_organization_ids, runners, allows_public_repositories, restricted_to_workflows, selected_workflows): Create a self-hosted runner group for an enterprise\nenterprise-admin.get_self_hosted_runner_group_for_enterprise(enterprise, runner_group_id): Get a self-hosted runner group for an enterprise\nenterprise-admin.update_self_hosted_runner_group_for_enterprise(enterprise, runner_group_id, name, visibility, allows_public_repositories, restricted_to_workflows, selected_workflows): Update a self-hosted runner group for an enterprise\nenterprise-admin.delete_self_hosted_runner_group_from_enterprise(enterprise, runner_group_id): Delete a self-hosted runner group from an enterprise\nenterprise-admin.list_org_access_to_self_hosted_runner_group_in_enterprise(enterprise, runner_group_id, per_page, page): List organization access to a self-hosted runner group in an enterprise\nenterprise-admin.set_org_access_to_self_hosted_runner_group_in_enterprise(enterprise, runner_group_id, selected_organization_ids): Set organization access for a self-hosted runner group in an enterprise\nenterprise-admin.add_org_access_to_self_hosted_runner_group_in_enterprise(enterprise, runner_group_id, org_id): Add organization access to a self-hosted runner group in an enterprise\nenterprise-admin.remove_org_access_to_self_hosted_runner_group_in_enterprise(enterprise, runner_group_id, org_id): Remove organization access to a self-hosted runner group in an enterprise\nenterprise-admin.list_self_hosted_runners_in_group_for_enterprise(enterprise, runner_group_id, per_page, page): List self-hosted runners in a group for an enterprise\nenterprise-admin.set_self_hosted_runners_in_group_for_enterprise(enterprise, runner_group_id, runners): Set self-hosted runners in a group for an enterprise\nenterprise-admin.add_self_hosted_runner_to_group_for_enterprise(enterprise, runner_group_id, runner_id): Add a self-hosted runner to a group for an enterprise\nenterprise-admin.remove_self_hosted_runner_from_group_for_enterprise(enterprise, runner_group_id, runner_id): Remove a self-hosted runner from a group for an enterprise\nenterprise-admin.list_self_hosted_runners_for_enterprise(enterprise, per_page, page): List self-hosted runners for an enterprise\nenterprise-admin.list_runner_applications_for_enterprise(enterprise): List runner applications for an enterprise\nenterprise-admin.create_registration_token_for_enterprise(enterprise): Create a registration token for an enterprise\nenterprise-admin.create_remove_token_for_enterprise(enterprise): Create a remove token for an enterprise\nenterprise-admin.get_self_hosted_runner_for_enterprise(enterprise, runner_id): Get a self-hosted runner for an enterprise\nenterprise-admin.delete_self_hosted_runner_from_enterprise(enterprise, runner_id): Delete a self-hosted runner from an enterprise\nenterprise-admin.list_labels_for_self_hosted_runner_for_enterprise(enterprise, runner_id): List labels for a self-hosted runner for an enterprise\nenterprise-admin.add_custom_labels_to_self_hosted_runner_for_enterprise(enterprise, runner_id, labels): Add custom labels to a self-hosted runner for an enterprise\nenterprise-admin.set_custom_labels_for_self_hosted_runner_for_enterprise(enterprise, runner_id, labels): Set custom labels for a self-hosted runner for an enterprise\nenterprise-admin.remove_all_custom_labels_from_self_hosted_runner_for_enterprise(enterprise, runner_id): Remove all custom labels from a self-hosted runner for an enterprise\nenterprise-admin.remove_custom_label_from_self_hosted_runner_for_enterprise(enterprise, runner_id, name): Remove a custom label from a self-hosted runner for an enterprise\nenterprise-admin.get_audit_log(enterprise, phrase, include, after, before, order, page, per_page): Get the audit log for an enterprise\nenterprise-admin.list_provisioned_groups_enterprise(enterprise, startIndex, count, filter, excludedAttributes): List provisioned SCIM groups for an enterprise\nenterprise-admin.provision_and_invite_enterprise_group(enterprise, schemas, displayName, members): Provision a SCIM enterprise group and invite users\nenterprise-admin.get_provisioning_information_for_enterprise_group(enterprise, scim_group_id, excludedAttributes): Get SCIM provisioning information for an enterprise group\nenterprise-admin.set_information_for_provisioned_enterprise_group(enterprise, scim_group_id, schemas, displayName, members): Set SCIM information for a provisioned enterprise group\nenterprise-admin.update_attribute_for_enterprise_group(enterprise, scim_group_id, schemas, Operations): Update an attribute for a SCIM enterprise group\nenterprise-admin.delete_scim_group_from_enterprise(enterprise, scim_group_id): Delete a SCIM group from an enterprise\nenterprise-admin.list_provisioned_identities_enterprise(enterprise, startIndex, count, filter): List SCIM provisioned identities for an enterprise\nenterprise-admin.provision_and_invite_enterprise_user(enterprise, schemas, userName, name, emails, groups): Provision and invite a SCIM enterprise user\nenterprise-admin.get_provisioning_information_for_enterprise_user(enterprise, scim_user_id): Get SCIM provisioning information for an enterprise user\nenterprise-admin.set_information_for_provisioned_enterprise_user(enterprise, scim_user_id, schemas, userName, name, emails, groups): Set SCIM information for a provisioned enterprise user\nenterprise-admin.update_attribute_for_enterprise_user(enterprise, scim_user_id, schemas, Operations): Update an attribute for a SCIM enterprise user\nenterprise-admin.delete_user_from_enterprise(enterprise, scim_user_id): Delete a SCIM user from an enterprise",
    "crumbs": [
      "Full GitHub API reference"
    ]
  },
  {
    "objectID": "fullapi.html#gists",
    "href": "fullapi.html#gists",
    "title": "Full GitHub API reference",
    "section": "gists",
    "text": "gists\n\ngists.list(since, per_page, page): List gists for the authenticated user\ngists.create(description, files, public): Create a gist\ngists.list_public(since, per_page, page): List public gists\ngists.list_starred(since, per_page, page): List starred gists\ngists.get(gist_id): Get a gist\ngists.update(gist_id, description, files): Update a gist\ngists.delete(gist_id): Delete a gist\ngists.list_comments(gist_id, per_page, page): List gist comments\ngists.create_comment(gist_id, body): Create a gist comment\ngists.get_comment(gist_id, comment_id): Get a gist comment\ngists.update_comment(gist_id, comment_id, body): Update a gist comment\ngists.delete_comment(gist_id, comment_id): Delete a gist comment\ngists.list_commits(gist_id, per_page, page): List gist commits\ngists.list_forks(gist_id, per_page, page): List gist forks\ngists.fork(gist_id): Fork a gist\ngists.check_is_starred(gist_id): Check if a gist is starred\ngists.star(gist_id): Star a gist\ngists.unstar(gist_id): Unstar a gist\ngists.get_revision(gist_id, sha): Get a gist revision\ngists.list_for_user(username, since, per_page, page): List gists for a user",
    "crumbs": [
      "Full GitHub API reference"
    ]
  },
  {
    "objectID": "fullapi.html#git",
    "href": "fullapi.html#git",
    "title": "Full GitHub API reference",
    "section": "git",
    "text": "git\n\ngit.create_blob(owner, repo, content, encoding): Create a blob\ngit.get_blob(owner, repo, file_sha): Get a blob\ngit.create_commit(owner, repo, message, tree, parents, author, committer, signature): Create a commit\ngit.get_commit(owner, repo, commit_sha): Get a commit\ngit.list_matching_refs(owner, repo, ref, per_page, page): List matching references\ngit.get_ref(owner, repo, ref): Get a reference\ngit.create_ref(owner, repo, ref, sha, key): Create a reference\ngit.update_ref(owner, repo, ref, sha, force): Update a reference\ngit.delete_ref(owner, repo, ref): Delete a reference\ngit.create_tag(owner, repo, tag, message, object, type, tagger): Create a tag object\ngit.get_tag(owner, repo, tag_sha): Get a tag\ngit.create_tree(owner, repo, tree, base_tree): Create a tree\ngit.get_tree(owner, repo, tree_sha, recursive): Get a tree",
    "crumbs": [
      "Full GitHub API reference"
    ]
  },
  {
    "objectID": "fullapi.html#gitignore",
    "href": "fullapi.html#gitignore",
    "title": "Full GitHub API reference",
    "section": "gitignore",
    "text": "gitignore\n\ngitignore.get_all_templates(): Get all gitignore templates\ngitignore.get_template(name): Get a gitignore template",
    "crumbs": [
      "Full GitHub API reference"
    ]
  },
  {
    "objectID": "fullapi.html#interactions",
    "href": "fullapi.html#interactions",
    "title": "Full GitHub API reference",
    "section": "interactions",
    "text": "interactions\n\ninteractions.get_restrictions_for_org(org): Get interaction restrictions for an organization\ninteractions.set_restrictions_for_org(org, limit, expiry): Set interaction restrictions for an organization\ninteractions.remove_restrictions_for_org(org): Remove interaction restrictions for an organization\ninteractions.get_restrictions_for_repo(owner, repo): Get interaction restrictions for a repository\ninteractions.set_restrictions_for_repo(owner, repo, limit, expiry): Set interaction restrictions for a repository\ninteractions.remove_restrictions_for_repo(owner, repo): Remove interaction restrictions for a repository\ninteractions.get_restrictions_for_authenticated_user(): Get interaction restrictions for your public repositories\ninteractions.set_restrictions_for_authenticated_user(limit, expiry): Set interaction restrictions for your public repositories\ninteractions.remove_restrictions_for_authenticated_user(): Remove interaction restrictions from your public repositories",
    "crumbs": [
      "Full GitHub API reference"
    ]
  },
  {
    "objectID": "fullapi.html#issues",
    "href": "fullapi.html#issues",
    "title": "Full GitHub API reference",
    "section": "issues",
    "text": "issues\n\nissues.list(filter, state, labels, sort, direction, since, collab, orgs, owned, pulls, per_page, page): List issues assigned to the authenticated user\nissues.list_for_org(org, filter, state, labels, sort, direction, since, per_page, page): List organization issues assigned to the authenticated user\nissues.list_assignees(owner, repo, per_page, page): List assignees\nissues.check_user_can_be_assigned(owner, repo, assignee): Check if a user can be assigned\nissues.list_for_repo(owner, repo, milestone, state, assignee, creator, mentioned, labels, sort, direction, since, per_page, page): List repository issues\nissues.create(owner, repo, title, body, assignee, milestone, labels, assignees): Create an issue\nissues.list_comments_for_repo(owner, repo, sort, direction, since, per_page, page): List issue comments for a repository\nissues.get_comment(owner, repo, comment_id): Get an issue comment\nissues.update_comment(owner, repo, comment_id, body): Update an issue comment\nissues.delete_comment(owner, repo, comment_id): Delete an issue comment\nissues.list_events_for_repo(owner, repo, per_page, page): List issue events for a repository\nissues.get_event(owner, repo, event_id): Get an issue event\nissues.get(owner, repo, issue_number): Get an issue\nissues.update(owner, repo, issue_number, title, body, assignee, state, milestone, labels, assignees): Update an issue\nissues.add_assignees(owner, repo, issue_number, assignees): Add assignees to an issue\nissues.remove_assignees(owner, repo, issue_number, assignees): Remove assignees from an issue\nissues.list_comments(owner, repo, issue_number, since, per_page, page): List issue comments\nissues.create_comment(owner, repo, issue_number, body): Create an issue comment\nissues.list_events(owner, repo, issue_number, per_page, page): List issue events\nissues.list_labels_on_issue(owner, repo, issue_number, per_page, page): List labels for an issue\nissues.add_labels(owner, repo, issue_number, labels): Add labels to an issue\nissues.set_labels(owner, repo, issue_number, labels): Set labels for an issue\nissues.remove_all_labels(owner, repo, issue_number): Remove all labels from an issue\nissues.remove_label(owner, repo, issue_number, name): Remove a label from an issue\nissues.lock(owner, repo, issue_number, lock_reason): Lock an issue\nissues.unlock(owner, repo, issue_number): Unlock an issue\nissues.list_events_for_timeline(owner, repo, issue_number, per_page, page): List timeline events for an issue\nissues.list_labels_for_repo(owner, repo, per_page, page): List labels for a repository\nissues.create_label(owner, repo, name, color, description): Create a label\nissues.get_label(owner, repo, name): Get a label\nissues.update_label(owner, repo, name, new_name, color, description): Update a label\nissues.delete_label(owner, repo, name): Delete a label\nissues.list_milestones(owner, repo, state, sort, direction, per_page, page): List milestones\nissues.create_milestone(owner, repo, title, state, description, due_on): Create a milestone\nissues.get_milestone(owner, repo, milestone_number): Get a milestone\nissues.update_milestone(owner, repo, milestone_number, title, state, description, due_on): Update a milestone\nissues.delete_milestone(owner, repo, milestone_number): Delete a milestone\nissues.list_labels_for_milestone(owner, repo, milestone_number, per_page, page): List labels for issues in a milestone\nissues.list_for_authenticated_user(filter, state, labels, sort, direction, since, per_page, page): List user account issues assigned to the authenticated user",
    "crumbs": [
      "Full GitHub API reference"
    ]
  },
  {
    "objectID": "fullapi.html#licenses",
    "href": "fullapi.html#licenses",
    "title": "Full GitHub API reference",
    "section": "licenses",
    "text": "licenses\n\nlicenses.get_all_commonly_used(featured, per_page, page): Get all commonly used licenses\nlicenses.get(license): Get a license\nlicenses.get_for_repo(owner, repo): Get the license for a repository",
    "crumbs": [
      "Full GitHub API reference"
    ]
  },
  {
    "objectID": "fullapi.html#markdown",
    "href": "fullapi.html#markdown",
    "title": "Full GitHub API reference",
    "section": "markdown",
    "text": "markdown\n\nmarkdown.render(text, mode, context): Render a Markdown document\nmarkdown.render_raw(): Render a Markdown document in raw mode",
    "crumbs": [
      "Full GitHub API reference"
    ]
  },
  {
    "objectID": "fullapi.html#meta",
    "href": "fullapi.html#meta",
    "title": "Full GitHub API reference",
    "section": "meta",
    "text": "meta\n\nmeta.root(): GitHub API Root\nmeta.get(): Get GitHub meta information\nmeta.get_octocat(s): Get Octocat",
    "crumbs": [
      "Full GitHub API reference"
    ]
  },
  {
    "objectID": "fullapi.html#migrations",
    "href": "fullapi.html#migrations",
    "title": "Full GitHub API reference",
    "section": "migrations",
    "text": "migrations\n\nmigrations.list_for_org(org, per_page, page, exclude): List organization migrations\nmigrations.start_for_org(org, repositories, lock_repositories, exclude_metadata, exclude_git_data, exclude_attachments, exclude_releases, exclude_owner_projects, org_metadata_only, exclude): Start an organization migration\nmigrations.get_status_for_org(org, migration_id, exclude): Get an organization migration status\nmigrations.download_archive_for_org(org, migration_id): Download an organization migration archive\nmigrations.delete_archive_for_org(org, migration_id): Delete an organization migration archive\nmigrations.unlock_repo_for_org(org, migration_id, repo_name): Unlock an organization repository\nmigrations.list_repos_for_org(org, migration_id, per_page, page): List repositories in an organization migration\nmigrations.get_import_status(owner, repo): Get an import status\nmigrations.start_import(owner, repo, vcs_url, vcs, vcs_username, vcs_password, tfvc_project): Start an import\nmigrations.update_import(owner, repo, vcs_username, vcs_password, vcs, tfvc_project): Update an import\nmigrations.cancel_import(owner, repo): Cancel an import\nmigrations.get_commit_authors(owner, repo, since): Get commit authors\nmigrations.map_commit_author(owner, repo, author_id, email, name): Map a commit author\nmigrations.get_large_files(owner, repo): Get large files\nmigrations.set_lfs_preference(owner, repo, use_lfs): Update Git LFS preference\nmigrations.list_for_authenticated_user(per_page, page): List user migrations\nmigrations.start_for_authenticated_user(lock_repositories, exclude_metadata, exclude_git_data, exclude_attachments, exclude_releases, exclude_owner_projects, org_metadata_only, exclude, repositories): Start a user migration\nmigrations.get_status_for_authenticated_user(migration_id, exclude): Get a user migration status\nmigrations.get_archive_for_authenticated_user(migration_id): Download a user migration archive\nmigrations.delete_archive_for_authenticated_user(migration_id): Delete a user migration archive\nmigrations.unlock_repo_for_authenticated_user(migration_id, repo_name): Unlock a user repository\nmigrations.list_repos_for_authenticated_user(migration_id, per_page, page): List repositories for a user migration",
    "crumbs": [
      "Full GitHub API reference"
    ]
  },
  {
    "objectID": "fullapi.html#oauth_authorizations",
    "href": "fullapi.html#oauth_authorizations",
    "title": "Full GitHub API reference",
    "section": "oauth_authorizations",
    "text": "oauth_authorizations\n\noauth-authorizations.list_grants(per_page, page, client_id): List your grants\noauth-authorizations.get_grant(grant_id): Get a single grant\noauth-authorizations.delete_grant(grant_id): Delete a grant\noauth-authorizations.list_authorizations(per_page, page, client_id): List your authorizations\noauth-authorizations.create_authorization(scopes, note, note_url, client_id, client_secret, fingerprint): Create a new authorization\noauth-authorizations.get_or_create_authorization_for_app(client_id, client_secret, scopes, note, note_url, fingerprint): Get-or-create an authorization for a specific app\noauth-authorizations.get_or_create_authorization_for_app_and_fingerprint(client_id, fingerprint, client_secret, scopes, note, note_url): Get-or-create an authorization for a specific app and fingerprint\noauth-authorizations.get_authorization(authorization_id): Get a single authorization\noauth-authorizations.update_authorization(authorization_id, scopes, add_scopes, remove_scopes, note, note_url, fingerprint): Update an existing authorization\noauth-authorizations.delete_authorization(authorization_id): Delete an authorization",
    "crumbs": [
      "Full GitHub API reference"
    ]
  },
  {
    "objectID": "fullapi.html#oidc",
    "href": "fullapi.html#oidc",
    "title": "Full GitHub API reference",
    "section": "oidc",
    "text": "oidc\n\noidc.get_oidc_custom_sub_template_for_org(org): Get the customization template for an OIDC subject claim for an organization\noidc.update_oidc_custom_sub_template_for_org(org, include_claim_keys): Set the customization template for an OIDC subject claim for an organization",
    "crumbs": [
      "Full GitHub API reference"
    ]
  },
  {
    "objectID": "fullapi.html#orgs",
    "href": "fullapi.html#orgs",
    "title": "Full GitHub API reference",
    "section": "orgs",
    "text": "orgs\n\norgs.list(since, per_page): List organizations\norgs.list_custom_roles(organization_id): List custom repository roles in an organization\norgs.get(org): Get an organization\norgs.update(org, billing_email, company, email, twitter_username, location, name, description, has_organization_projects, has_repository_projects, default_repository_permission, members_can_create_repositories, members_can_create_internal_repositories, members_can_create_private_repositories, members_can_create_public_repositories, members_allowed_repository_creation_type, members_can_create_pages, members_can_create_public_pages, members_can_create_private_pages, members_can_fork_private_repositories, blog): Update an organization\norgs.get_audit_log(org, phrase, include, after, before, order, per_page): Get the audit log for an organization\norgs.list_blocked_users(org): List users blocked by an organization\norgs.check_blocked_user(org, username): Check if a user is blocked by an organization\norgs.block_user(org, username): Block a user from an organization\norgs.unblock_user(org, username): Unblock a user from an organization\norgs.list_saml_sso_authorizations(org, per_page, page, login): List SAML SSO authorizations for an organization\norgs.remove_saml_sso_authorization(org, credential_id): Remove a SAML SSO authorization for an organization\norgs.list_failed_invitations(org, per_page, page): List failed organization invitations\norgs.list_webhooks(org, per_page, page): List organization webhooks\norgs.create_webhook(org, name, config, events, active): Create an organization webhook\norgs.get_webhook(org, hook_id): Get an organization webhook\norgs.update_webhook(org, hook_id, config, events, active, name): Update an organization webhook\norgs.delete_webhook(org, hook_id): Delete an organization webhook\norgs.get_webhook_config_for_org(org, hook_id): Get a webhook configuration for an organization\norgs.update_webhook_config_for_org(org, hook_id, url, content_type, secret, insecure_ssl): Update a webhook configuration for an organization\norgs.list_webhook_deliveries(org, hook_id, per_page, cursor): List deliveries for an organization webhook\norgs.get_webhook_delivery(org, hook_id, delivery_id): Get a webhook delivery for an organization webhook\norgs.redeliver_webhook_delivery(org, hook_id, delivery_id): Redeliver a delivery for an organization webhook\norgs.ping_webhook(org, hook_id): Ping an organization webhook\norgs.list_app_installations(org, per_page, page): List app installations for an organization\norgs.list_pending_invitations(org, per_page, page): List pending organization invitations\norgs.create_invitation(org, invitee_id, email, role, team_ids): Create an organization invitation\norgs.cancel_invitation(org, invitation_id): Cancel an organization invitation\norgs.list_invitation_teams(org, invitation_id, per_page, page): List organization invitation teams\norgs.list_members(org, filter, role, per_page, page): List organization members\norgs.check_membership_for_user(org, username): Check organization membership for a user\norgs.remove_member(org, username): Remove an organization member\norgs.get_membership_for_user(org, username): Get organization membership for a user\norgs.set_membership_for_user(org, username, role): Set organization membership for a user\norgs.remove_membership_for_user(org, username): Remove organization membership for a user\norgs.list_outside_collaborators(org, filter, per_page, page): List outside collaborators for an organization\norgs.convert_member_to_outside_collaborator(org, username, async): Convert an organization member to outside collaborator\norgs.remove_outside_collaborator(org, username): Remove outside collaborator from an organization\norgs.list_public_members(org, per_page, page): List public organization members\norgs.check_public_membership_for_user(org, username): Check public organization membership for a user\norgs.set_public_membership_for_authenticated_user(org, username): Set public organization membership for the authenticated user\norgs.remove_public_membership_for_authenticated_user(org, username): Remove public organization membership for the authenticated user\norgs.list_memberships_for_authenticated_user(state, per_page, page): List organization memberships for the authenticated user\norgs.get_membership_for_authenticated_user(org): Get an organization membership for the authenticated user\norgs.update_membership_for_authenticated_user(org, state): Update an organization membership for the authenticated user\norgs.list_for_authenticated_user(per_page, page): List organizations for the authenticated user\norgs.list_for_user(username, per_page, page): List organizations for a user",
    "crumbs": [
      "Full GitHub API reference"
    ]
  },
  {
    "objectID": "fullapi.html#packages",
    "href": "fullapi.html#packages",
    "title": "Full GitHub API reference",
    "section": "packages",
    "text": "packages\n\npackages.list_packages_for_organization(org, package_type, visibility): List packages for an organization\npackages.get_package_for_organization(org, package_type, package_name): Get a package for an organization\npackages.delete_package_for_org(org, package_type, package_name): Delete a package for an organization\npackages.restore_package_for_org(org, package_type, package_name, token): Restore a package for an organization\npackages.get_all_package_versions_for_package_owned_by_org(org, package_type, package_name, page, per_page, state): Get all package versions for a package owned by an organization\npackages.get_package_version_for_organization(org, package_type, package_name, package_version_id): Get a package version for an organization\npackages.delete_package_version_for_org(org, package_type, package_name, package_version_id): Delete package version for an organization\npackages.restore_package_version_for_org(org, package_type, package_name, package_version_id): Restore package version for an organization\npackages.list_packages_for_authenticated_user(package_type, visibility): List packages for the authenticated user’s namespace\npackages.get_package_for_authenticated_user(package_type, package_name): Get a package for the authenticated user\npackages.delete_package_for_authenticated_user(package_type, package_name): Delete a package for the authenticated user\npackages.restore_package_for_authenticated_user(package_type, package_name, token): Restore a package for the authenticated user\npackages.get_all_package_versions_for_package_owned_by_authenticated_user(package_type, package_name, page, per_page, state): Get all package versions for a package owned by the authenticated user\npackages.get_package_version_for_authenticated_user(package_type, package_name, package_version_id): Get a package version for the authenticated user\npackages.delete_package_version_for_authenticated_user(package_type, package_name, package_version_id): Delete a package version for the authenticated user\npackages.restore_package_version_for_authenticated_user(package_type, package_name, package_version_id): Restore a package version for the authenticated user\npackages.list_packages_for_user(username, package_type, visibility): List packages for a user\npackages.get_package_for_user(username, package_type, package_name): Get a package for a user\npackages.delete_package_for_user(username, package_type, package_name): Delete a package for a user\npackages.restore_package_for_user(username, package_type, package_name, token): Restore a package for a user\npackages.get_all_package_versions_for_package_owned_by_user(username, package_type, package_name): Get all package versions for a package owned by a user\npackages.get_package_version_for_user(username, package_type, package_name, package_version_id): Get a package version for a user\npackages.delete_package_version_for_user(username, package_type, package_name, package_version_id): Delete package version for a user\npackages.restore_package_version_for_user(username, package_type, package_name, package_version_id): Restore package version for a user",
    "crumbs": [
      "Full GitHub API reference"
    ]
  },
  {
    "objectID": "fullapi.html#projects",
    "href": "fullapi.html#projects",
    "title": "Full GitHub API reference",
    "section": "projects",
    "text": "projects\n\nprojects.list_for_org(org, state, per_page, page): List organization projects\nprojects.create_for_org(org, name, body): Create an organization project\nprojects.get_card(card_id): Get a project card\nprojects.update_card(card_id, note, archived): Update an existing project card\nprojects.delete_card(card_id): Delete a project card\nprojects.move_card(card_id, position, column_id): Move a project card\nprojects.get_column(column_id): Get a project column\nprojects.update_column(column_id, name): Update an existing project column\nprojects.delete_column(column_id): Delete a project column\nprojects.list_cards(column_id, archived_state, per_page, page): List project cards\nprojects.create_card(column_id, note): Create a project card\nprojects.move_column(column_id, position): Move a project column\nprojects.get(project_id): Get a project\nprojects.update(project_id, name, body, state, organization_permission, private): Update a project\nprojects.delete(project_id): Delete a project\nprojects.list_collaborators(project_id, affiliation, per_page, page): List project collaborators\nprojects.add_collaborator(project_id, username, permission): Add project collaborator\nprojects.remove_collaborator(project_id, username): Remove user as a collaborator\nprojects.get_permission_for_user(project_id, username): Get project permission for a user\nprojects.list_columns(project_id, per_page, page): List project columns\nprojects.create_column(project_id, name): Create a project column\nprojects.list_for_repo(owner, repo, state, per_page, page): List repository projects\nprojects.create_for_repo(owner, repo, name, body): Create a repository project\nprojects.create_for_authenticated_user(name, body): Create a user project\nprojects.list_for_user(username, state, per_page, page): List user projects",
    "crumbs": [
      "Full GitHub API reference"
    ]
  },
  {
    "objectID": "fullapi.html#pulls",
    "href": "fullapi.html#pulls",
    "title": "Full GitHub API reference",
    "section": "pulls",
    "text": "pulls\n\npulls.list(owner, repo, state, head, base, sort, direction, per_page, page): List pull requests\npulls.create(owner, repo, title, head, base, body, maintainer_can_modify, draft, issue): Create a pull request\npulls.list_review_comments_for_repo(owner, repo, sort, direction, since, per_page, page): List review comments in a repository\npulls.get_review_comment(owner, repo, comment_id): Get a review comment for a pull request\npulls.update_review_comment(owner, repo, comment_id, body): Update a review comment for a pull request\npulls.delete_review_comment(owner, repo, comment_id): Delete a review comment for a pull request\npulls.get(owner, repo, pull_number): Get a pull request\npulls.update(owner, repo, pull_number, title, body, state, base, maintainer_can_modify): Update a pull request\npulls.list_review_comments(owner, repo, pull_number, sort, direction, since, per_page, page): List review comments on a pull request\npulls.create_review_comment(owner, repo, pull_number, body, commit_id, path, position, side, line, start_line, start_side, in_reply_to): Create a review comment for a pull request\npulls.create_reply_for_review_comment(owner, repo, pull_number, comment_id, body): Create a reply for a review comment\npulls.list_commits(owner, repo, pull_number, per_page, page): List commits on a pull request\npulls.list_files(owner, repo, pull_number, per_page, page): List pull requests files\npulls.check_if_merged(owner, repo, pull_number): Check if a pull request has been merged\npulls.merge(owner, repo, pull_number, commit_title, commit_message, sha, merge_method): Merge a pull request\npulls.list_requested_reviewers(owner, repo, pull_number, per_page, page): List requested reviewers for a pull request\npulls.request_reviewers(owner, repo, pull_number, reviewers, team_reviewers): Request reviewers for a pull request\npulls.remove_requested_reviewers(owner, repo, pull_number, reviewers, team_reviewers): Remove requested reviewers from a pull request\npulls.list_reviews(owner, repo, pull_number, per_page, page): List reviews for a pull request\npulls.create_review(owner, repo, pull_number, commit_id, body, event, comments): Create a review for a pull request\npulls.get_review(owner, repo, pull_number, review_id): Get a review for a pull request\npulls.update_review(owner, repo, pull_number, review_id, body): Update a review for a pull request\npulls.delete_pending_review(owner, repo, pull_number, review_id): Delete a pending review for a pull request\npulls.list_comments_for_review(owner, repo, pull_number, review_id, per_page, page): List comments for a pull request review\npulls.dismiss_review(owner, repo, pull_number, review_id, message, event): Dismiss a review for a pull request\npulls.submit_review(owner, repo, pull_number, review_id, body, event): Submit a review for a pull request\npulls.update_branch(owner, repo, pull_number, expected_head_sha): Update a pull request branch",
    "crumbs": [
      "Full GitHub API reference"
    ]
  },
  {
    "objectID": "fullapi.html#rate_limit",
    "href": "fullapi.html#rate_limit",
    "title": "Full GitHub API reference",
    "section": "rate_limit",
    "text": "rate_limit\n\nrate-limit.get(): Get rate limit status for the authenticated user",
    "crumbs": [
      "Full GitHub API reference"
    ]
  },
  {
    "objectID": "fullapi.html#reactions",
    "href": "fullapi.html#reactions",
    "title": "Full GitHub API reference",
    "section": "reactions",
    "text": "reactions\n\nreactions.list_for_team_discussion_comment_in_org(org, team_slug, discussion_number, comment_number, content, per_page, page): List reactions for a team discussion comment\nreactions.create_for_team_discussion_comment_in_org(org, team_slug, discussion_number, comment_number, content): Create reaction for a team discussion comment\nreactions.delete_for_team_discussion_comment(org, team_slug, discussion_number, comment_number, reaction_id): Delete team discussion comment reaction\nreactions.list_for_team_discussion_in_org(org, team_slug, discussion_number, content, per_page, page): List reactions for a team discussion\nreactions.create_for_team_discussion_in_org(org, team_slug, discussion_number, content): Create reaction for a team discussion\nreactions.delete_for_team_discussion(org, team_slug, discussion_number, reaction_id): Delete team discussion reaction\nreactions.list_for_commit_comment(owner, repo, comment_id, content, per_page, page): List reactions for a commit comment\nreactions.create_for_commit_comment(owner, repo, comment_id, content): Create reaction for a commit comment\nreactions.delete_for_commit_comment(owner, repo, comment_id, reaction_id): Delete a commit comment reaction\nreactions.list_for_issue_comment(owner, repo, comment_id, content, per_page, page): List reactions for an issue comment\nreactions.create_for_issue_comment(owner, repo, comment_id, content): Create reaction for an issue comment\nreactions.delete_for_issue_comment(owner, repo, comment_id, reaction_id): Delete an issue comment reaction\nreactions.list_for_issue(owner, repo, issue_number, content, per_page, page): List reactions for an issue\nreactions.create_for_issue(owner, repo, issue_number, content): Create reaction for an issue\nreactions.delete_for_issue(owner, repo, issue_number, reaction_id): Delete an issue reaction\nreactions.list_for_pull_request_review_comment(owner, repo, comment_id, content, per_page, page): List reactions for a pull request review comment\nreactions.create_for_pull_request_review_comment(owner, repo, comment_id, content): Create reaction for a pull request review comment\nreactions.delete_for_pull_request_comment(owner, repo, comment_id, reaction_id): Delete a pull request comment reaction\nreactions.list_for_release(owner, repo, release_id, content, per_page, page): List reactions for a release\nreactions.create_for_release(owner, repo, release_id, content): Create reaction for a release\nreactions.delete_for_release(owner, repo, release_id, reaction_id): Delete a release reaction\nreactions.list_for_team_discussion_comment_legacy(team_id, discussion_number, comment_number, content, per_page, page): List reactions for a team discussion comment (Legacy)\nreactions.create_for_team_discussion_comment_legacy(team_id, discussion_number, comment_number, content): Create reaction for a team discussion comment (Legacy)\nreactions.list_for_team_discussion_legacy(team_id, discussion_number, content, per_page, page): List reactions for a team discussion (Legacy)\nreactions.create_for_team_discussion_legacy(team_id, discussion_number, content): Create reaction for a team discussion (Legacy)",
    "crumbs": [
      "Full GitHub API reference"
    ]
  },
  {
    "objectID": "fullapi.html#repos",
    "href": "fullapi.html#repos",
    "title": "Full GitHub API reference",
    "section": "repos",
    "text": "repos\n\nrepos.list_for_org(org, type, sort, direction, per_page, page): List organization repositories\nrepos.create_in_org(org, name, description, homepage, private, visibility, has_issues, has_projects, has_wiki, is_template, team_id, auto_init, gitignore_template, license_template, allow_squash_merge, allow_merge_commit, allow_rebase_merge, allow_auto_merge, delete_branch_on_merge, use_squash_pr_title_as_default): Create an organization repository\nrepos.get(owner, repo): Get a repository\nrepos.update(owner, repo, name, description, homepage, private, visibility, security_and_analysis, has_issues, has_projects, has_wiki, is_template, default_branch, allow_squash_merge, allow_merge_commit, allow_rebase_merge, allow_auto_merge, delete_branch_on_merge, allow_update_branch, use_squash_pr_title_as_default, archived, allow_forking): Update a repository\nrepos.delete(owner, repo): Delete a repository\nrepos.list_autolinks(owner, repo, page): List all autolinks of a repository\nrepos.create_autolink(owner, repo, key_prefix, url_template): Create an autolink reference for a repository\nrepos.get_autolink(owner, repo, autolink_id): Get an autolink reference of a repository\nrepos.delete_autolink(owner, repo, autolink_id): Delete an autolink reference from a repository\nrepos.enable_automated_security_fixes(owner, repo): Enable automated security fixes\nrepos.disable_automated_security_fixes(owner, repo): Disable automated security fixes\nrepos.list_branches(owner, repo, protected, per_page, page): List branches\nrepos.get_branch(owner, repo, branch): Get a branch\nrepos.get_branch_protection(owner, repo, branch): Get branch protection\nrepos.update_branch_protection(owner, repo, branch, required_status_checks, enforce_admins, required_pull_request_reviews, restrictions, required_linear_history, allow_force_pushes, allow_deletions, block_creations, required_conversation_resolution): Update branch protection\nrepos.delete_branch_protection(owner, repo, branch): Delete branch protection\nrepos.get_admin_branch_protection(owner, repo, branch): Get admin branch protection\nrepos.set_admin_branch_protection(owner, repo, branch): Set admin branch protection\nrepos.delete_admin_branch_protection(owner, repo, branch): Delete admin branch protection\nrepos.get_pull_request_review_protection(owner, repo, branch): Get pull request review protection\nrepos.update_pull_request_review_protection(owner, repo, branch, dismissal_restrictions, dismiss_stale_reviews, require_code_owner_reviews, required_approving_review_count, bypass_pull_request_allowances): Update pull request review protection\nrepos.delete_pull_request_review_protection(owner, repo, branch): Delete pull request review protection\nrepos.get_commit_signature_protection(owner, repo, branch): Get commit signature protection\nrepos.create_commit_signature_protection(owner, repo, branch): Create commit signature protection\nrepos.delete_commit_signature_protection(owner, repo, branch): Delete commit signature protection\nrepos.get_status_checks_protection(owner, repo, branch): Get status checks protection\nrepos.update_status_check_protection(owner, repo, branch, strict, contexts, checks): Update status check protection\nrepos.remove_status_check_protection(owner, repo, branch): Remove status check protection\nrepos.get_all_status_check_contexts(owner, repo, branch): Get all status check contexts\nrepos.add_status_check_contexts(owner, repo, branch, contexts): Add status check contexts\nrepos.set_status_check_contexts(owner, repo, branch, contexts): Set status check contexts\nrepos.remove_status_check_contexts(owner, repo, branch, contexts): Remove status check contexts\nrepos.get_access_restrictions(owner, repo, branch): Get access restrictions\nrepos.delete_access_restrictions(owner, repo, branch): Delete access restrictions\nrepos.get_apps_with_access_to_protected_branch(owner, repo, branch): Get apps with access to the protected branch\nrepos.add_app_access_restrictions(owner, repo, branch, apps): Add app access restrictions\nrepos.set_app_access_restrictions(owner, repo, branch, apps): Set app access restrictions\nrepos.remove_app_access_restrictions(owner, repo, branch, apps): Remove app access restrictions\nrepos.get_teams_with_access_to_protected_branch(owner, repo, branch): Get teams with access to the protected branch\nrepos.add_team_access_restrictions(owner, repo, branch, teams): Add team access restrictions\nrepos.set_team_access_restrictions(owner, repo, branch, teams): Set team access restrictions\nrepos.remove_team_access_restrictions(owner, repo, branch, teams): Remove team access restrictions\nrepos.get_users_with_access_to_protected_branch(owner, repo, branch): Get users with access to the protected branch\nrepos.add_user_access_restrictions(owner, repo, branch, users): Add user access restrictions\nrepos.set_user_access_restrictions(owner, repo, branch, users): Set user access restrictions\nrepos.remove_user_access_restrictions(owner, repo, branch, users): Remove user access restrictions\nrepos.rename_branch(owner, repo, branch, new_name): Rename a branch\nrepos.codeowners_errors(owner, repo, ref): List CODEOWNERS errors\nrepos.list_collaborators(owner, repo, affiliation, per_page, page): List repository collaborators\nrepos.check_collaborator(owner, repo, username): Check if a user is a repository collaborator\nrepos.add_collaborator(owner, repo, username, permission): Add a repository collaborator\nrepos.remove_collaborator(owner, repo, username): Remove a repository collaborator\nrepos.get_collaborator_permission_level(owner, repo, username): Get repository permissions for a user\nrepos.list_commit_comments_for_repo(owner, repo, per_page, page): List commit comments for a repository\nrepos.get_commit_comment(owner, repo, comment_id): Get a commit comment\nrepos.update_commit_comment(owner, repo, comment_id, body): Update a commit comment\nrepos.delete_commit_comment(owner, repo, comment_id): Delete a commit comment\nrepos.list_commits(owner, repo, sha, path, author, since, until, per_page, page): List commits\nrepos.list_branches_for_head_commit(owner, repo, commit_sha): List branches for HEAD commit\nrepos.list_comments_for_commit(owner, repo, commit_sha, per_page, page): List commit comments\nrepos.create_commit_comment(owner, repo, commit_sha, body, path, position, line): Create a commit comment\nrepos.list_pull_requests_associated_with_commit(owner, repo, commit_sha, per_page, page): List pull requests associated with a commit\nrepos.get_commit(owner, repo, ref, page, per_page): Get a commit\nrepos.get_combined_status_for_ref(owner, repo, ref, per_page, page): Get the combined status for a specific reference\nrepos.list_commit_statuses_for_ref(owner, repo, ref, per_page, page): List commit statuses for a reference\nrepos.get_community_profile_metrics(owner, repo): Get community profile metrics\nrepos.compare_commits(owner, repo, basehead, page, per_page): Compare two commits\nrepos.get_content(owner, repo, path, ref): Get repository content\nrepos.create_or_update_file_contents(owner, repo, path, message, content, sha, branch, committer, author): Create or update file contents\nrepos.delete_file(owner, repo, path, message, sha, branch, committer, author): Delete a file\nrepos.list_contributors(owner, repo, anon, per_page, page): List repository contributors\nrepos.list_deployments(owner, repo, sha, ref, task, environment, per_page, page): List deployments\nrepos.create_deployment(owner, repo, ref, task, auto_merge, required_contexts, payload, environment, description, transient_environment, production_environment): Create a deployment\nrepos.get_deployment(owner, repo, deployment_id): Get a deployment\nrepos.delete_deployment(owner, repo, deployment_id): Delete a deployment\nrepos.list_deployment_statuses(owner, repo, deployment_id, per_page, page): List deployment statuses\nrepos.create_deployment_status(owner, repo, deployment_id, state, target_url, log_url, description, environment, environment_url, auto_inactive): Create a deployment status\nrepos.get_deployment_status(owner, repo, deployment_id, status_id): Get a deployment status\nrepos.create_dispatch_event(owner, repo, event_type, client_payload): Create a repository dispatch event\nrepos.get_all_environments(owner, repo, per_page, page): Get all environments\nrepos.get_environment(owner, repo, environment_name): Get an environment\nrepos.create_or_update_environment(owner, repo, environment_name, wait_timer, reviewers, deployment_branch_policy): Create or update an environment\nrepos.delete_an_environment(owner, repo, environment_name): Delete an environment\nrepos.list_forks(owner, repo, sort, per_page, page): List forks\nrepos.create_fork(owner, repo, organization, name): Create a fork\nrepos.list_webhooks(owner, repo, per_page, page): List repository webhooks\nrepos.create_webhook(owner, repo, name, config, events, active): Create a repository webhook\nrepos.get_webhook(owner, repo, hook_id): Get a repository webhook\nrepos.update_webhook(owner, repo, hook_id, config, events, add_events, remove_events, active): Update a repository webhook\nrepos.delete_webhook(owner, repo, hook_id): Delete a repository webhook\nrepos.get_webhook_config_for_repo(owner, repo, hook_id): Get a webhook configuration for a repository\nrepos.update_webhook_config_for_repo(owner, repo, hook_id, url, content_type, secret, insecure_ssl): Update a webhook configuration for a repository\nrepos.list_webhook_deliveries(owner, repo, hook_id, per_page, cursor): List deliveries for a repository webhook\nrepos.get_webhook_delivery(owner, repo, hook_id, delivery_id): Get a delivery for a repository webhook\nrepos.redeliver_webhook_delivery(owner, repo, hook_id, delivery_id): Redeliver a delivery for a repository webhook\nrepos.ping_webhook(owner, repo, hook_id): Ping a repository webhook\nrepos.test_push_webhook(owner, repo, hook_id): Test the push repository webhook\nrepos.list_invitations(owner, repo, per_page, page): List repository invitations\nrepos.update_invitation(owner, repo, invitation_id, permissions): Update a repository invitation\nrepos.delete_invitation(owner, repo, invitation_id): Delete a repository invitation\nrepos.list_deploy_keys(owner, repo, per_page, page): List deploy keys\nrepos.create_deploy_key(owner, repo, title, key, read_only): Create a deploy key\nrepos.get_deploy_key(owner, repo, key_id): Get a deploy key\nrepos.delete_deploy_key(owner, repo, key_id): Delete a deploy key\nrepos.list_languages(owner, repo): List repository languages\nrepos.enable_lfs_for_repo(owner, repo): Enable Git LFS for a repository\nrepos.disable_lfs_for_repo(owner, repo): Disable Git LFS for a repository\nrepos.merge_upstream(owner, repo, branch): Sync a fork branch with the upstream repository\nrepos.merge(owner, repo, base, head, commit_message): Merge a branch\nrepos.get_pages(owner, repo): Get a GitHub Pages site\nrepos.create_pages_site(owner, repo, source): Create a GitHub Pages site\nrepos.update_information_about_pages_site(owner, repo, cname, https_enforced, public, source): Update information about a GitHub Pages site\nrepos.delete_pages_site(owner, repo): Delete a GitHub Pages site\nrepos.list_pages_builds(owner, repo, per_page, page): List GitHub Pages builds\nrepos.request_pages_build(owner, repo): Request a GitHub Pages build\nrepos.get_latest_pages_build(owner, repo): Get latest Pages build\nrepos.get_pages_build(owner, repo, build_id): Get GitHub Pages build\nrepos.get_pages_health_check(owner, repo): Get a DNS health check for GitHub Pages\nrepos.get_readme(owner, repo, ref): Get a repository README\nrepos.get_readme_in_directory(owner, repo, dir, ref): Get a repository README for a directory\nrepos.list_releases(owner, repo, per_page, page): List releases\nrepos.create_release(owner, repo, tag_name, target_commitish, name, body, draft, prerelease, discussion_category_name, generate_release_notes): Create a release\nrepos.get_release_asset(owner, repo, asset_id): Get a release asset\nrepos.update_release_asset(owner, repo, asset_id, name, label, state): Update a release asset\nrepos.delete_release_asset(owner, repo, asset_id): Delete a release asset\nrepos.generate_release_notes(owner, repo, tag_name, target_commitish, previous_tag_name, configuration_file_path): Generate release notes content for a release\nrepos.get_latest_release(owner, repo): Get the latest release\nrepos.get_release_by_tag(owner, repo, tag): Get a release by tag name\nrepos.get_release(owner, repo, release_id): Get a release\nrepos.update_release(owner, repo, release_id, tag_name, target_commitish, name, body, draft, prerelease, discussion_category_name): Update a release\nrepos.delete_release(owner, repo, release_id): Delete a release\nrepos.list_release_assets(owner, repo, release_id, per_page, page): List release assets\nrepos.upload_release_asset(owner, repo, release_id, name, label): Upload a release asset\nrepos.get_code_frequency_stats(owner, repo): Get the weekly commit activity\nrepos.get_commit_activity_stats(owner, repo): Get the last year of commit activity\nrepos.get_contributors_stats(owner, repo): Get all contributor commit activity\nrepos.get_participation_stats(owner, repo): Get the weekly commit count\nrepos.get_punch_card_stats(owner, repo): Get the hourly commit count for each day\nrepos.create_commit_status(owner, repo, sha, state, target_url, description, context): Create a commit status\nrepos.list_tags(owner, repo, per_page, page): List repository tags\nrepos.list_tag_protection(owner, repo): List tag protection states for a repository\nrepos.create_tag_protection(owner, repo, pattern): Create a tag protection state for a repository\nrepos.delete_tag_protection(owner, repo, tag_protection_id): Delete a tag protection state for a repository\nrepos.download_tarball_archive(owner, repo, ref): Download a repository archive (tar)\nrepos.list_teams(owner, repo, per_page, page): List repository teams\nrepos.get_all_topics(owner, repo, page, per_page): Get all repository topics\nrepos.replace_all_topics(owner, repo, names): Replace all repository topics\nrepos.get_clones(owner, repo, per): Get repository clones\nrepos.get_top_paths(owner, repo): Get top referral paths\nrepos.get_top_referrers(owner, repo): Get top referral sources\nrepos.get_views(owner, repo, per): Get page views\nrepos.transfer(owner, repo, new_owner, team_ids): Transfer a repository\nrepos.check_vulnerability_alerts(owner, repo): Check if vulnerability alerts are enabled for a repository\nrepos.enable_vulnerability_alerts(owner, repo): Enable vulnerability alerts\nrepos.disable_vulnerability_alerts(owner, repo): Disable vulnerability alerts\nrepos.download_zipball_archive(owner, repo, ref): Download a repository archive (zip)\nrepos.create_using_template(template_owner, template_repo, owner, name, description, include_all_branches, private): Create a repository using a template\nrepos.list_public(since): List public repositories\nrepos.list_for_authenticated_user(visibility, affiliation, type, sort, direction, per_page, page, since, before): List repositories for the authenticated user\nrepos.create_for_authenticated_user(name, description, homepage, private, has_issues, has_projects, has_wiki, team_id, auto_init, gitignore_template, license_template, allow_squash_merge, allow_merge_commit, allow_rebase_merge, allow_auto_merge, delete_branch_on_merge, has_downloads, is_template): Create a repository for the authenticated user\nrepos.list_invitations_for_authenticated_user(per_page, page): List repository invitations for the authenticated user\nrepos.accept_invitation_for_authenticated_user(invitation_id): Accept a repository invitation\nrepos.decline_invitation_for_authenticated_user(invitation_id): Decline a repository invitation\nrepos.list_for_user(username, type, sort, direction, per_page, page): List repositories for a user",
    "crumbs": [
      "Full GitHub API reference"
    ]
  },
  {
    "objectID": "fullapi.html#scim",
    "href": "fullapi.html#scim",
    "title": "Full GitHub API reference",
    "section": "scim",
    "text": "scim\n\nscim.list_provisioned_identities(org, startIndex, count, filter): List SCIM provisioned identities\nscim.provision_and_invite_user(org, userName, displayName, name, emails, schemas, externalId, groups, active): Provision and invite a SCIM user\nscim.get_provisioning_information_for_user(org, scim_user_id): Get SCIM provisioning information for a user\nscim.set_information_for_provisioned_user(org, scim_user_id, schemas, displayName, externalId, groups, active, userName, name, emails): Update a provisioned organization membership\nscim.update_attribute_for_user(org, scim_user_id, schemas, Operations): Update an attribute for a SCIM user\nscim.delete_user_from_org(org, scim_user_id): Delete a SCIM user from an organization",
    "crumbs": [
      "Full GitHub API reference"
    ]
  },
  {
    "objectID": "fullapi.html#search",
    "href": "fullapi.html#search",
    "title": "Full GitHub API reference",
    "section": "search",
    "text": "search\n\nsearch.code(q, sort, order, per_page, page): Search code\nsearch.commits(q, sort, order, per_page, page): Search commits\nsearch.issues_and_pull_requests(q, sort, order, per_page, page): Search issues and pull requests\nsearch.labels(repository_id, q, sort, order, per_page, page): Search labels\nsearch.repos(q, sort, order, per_page, page): Search repositories\nsearch.topics(q, per_page, page): Search topics\nsearch.users(q, sort, order, per_page, page): Search users",
    "crumbs": [
      "Full GitHub API reference"
    ]
  },
  {
    "objectID": "fullapi.html#secret_scanning",
    "href": "fullapi.html#secret_scanning",
    "title": "Full GitHub API reference",
    "section": "secret_scanning",
    "text": "secret_scanning\n\nsecret-scanning.list_alerts_for_enterprise(enterprise, state, secret_type, resolution, sort, direction, per_page, before, after): List secret scanning alerts for an enterprise\nsecret-scanning.list_alerts_for_org(org, state, secret_type, resolution, sort, direction, page, per_page, before, after): List secret scanning alerts for an organization\nsecret-scanning.list_alerts_for_repo(owner, repo, state, secret_type, resolution, sort, direction, page, per_page, before, after): List secret scanning alerts for a repository\nsecret-scanning.get_alert(owner, repo, alert_number): Get a secret scanning alert\nsecret-scanning.update_alert(owner, repo, alert_number, state, resolution): Update a secret scanning alert\nsecret-scanning.list_locations_for_alert(owner, repo, alert_number, page, per_page): List locations for a secret scanning alert",
    "crumbs": [
      "Full GitHub API reference"
    ]
  },
  {
    "objectID": "fullapi.html#teams",
    "href": "fullapi.html#teams",
    "title": "Full GitHub API reference",
    "section": "teams",
    "text": "teams\n\nteams.external_idp_group_info_for_org(org, group_id): Get an external group\nteams.list_external_idp_groups_for_org(org, per_page, page, display_name): List external groups in an organization\nteams.list_idp_groups_for_org(org, per_page, page): List IdP groups for an organization\nteams.list(org, per_page, page): List teams\nteams.create(org, name, description, maintainers, repo_names, privacy, permission, parent_team_id): Create a team\nteams.get_by_name(org, team_slug): Get a team by name\nteams.update_in_org(org, team_slug, name, description, privacy, permission, parent_team_id): Update a team\nteams.delete_in_org(org, team_slug): Delete a team\nteams.list_discussions_in_org(org, team_slug, direction, per_page, page, pinned): List discussions\nteams.create_discussion_in_org(org, team_slug, title, body, private): Create a discussion\nteams.get_discussion_in_org(org, team_slug, discussion_number): Get a discussion\nteams.update_discussion_in_org(org, team_slug, discussion_number, title, body): Update a discussion\nteams.delete_discussion_in_org(org, team_slug, discussion_number): Delete a discussion\nteams.list_discussion_comments_in_org(org, team_slug, discussion_number, direction, per_page, page): List discussion comments\nteams.create_discussion_comment_in_org(org, team_slug, discussion_number, body): Create a discussion comment\nteams.get_discussion_comment_in_org(org, team_slug, discussion_number, comment_number): Get a discussion comment\nteams.update_discussion_comment_in_org(org, team_slug, discussion_number, comment_number, body): Update a discussion comment\nteams.delete_discussion_comment_in_org(org, team_slug, discussion_number, comment_number): Delete a discussion comment\nteams.list_linked_external_idp_groups_to_team_for_org(org, team_slug): List a connection between an external group and a team\nteams.link_external_idp_group_to_team_for_org(org, team_slug, group_id): Update the connection between an external group and a team\nteams.unlink_external_idp_group_from_team_for_org(org, team_slug): Remove the connection between an external group and a team\nteams.list_pending_invitations_in_org(org, team_slug, per_page, page): List pending team invitations\nteams.list_members_in_org(org, team_slug, role, per_page, page): List team members\nteams.get_membership_for_user_in_org(org, team_slug, username): Get team membership for a user\nteams.add_or_update_membership_for_user_in_org(org, team_slug, username, role): Add or update team membership for a user\nteams.remove_membership_for_user_in_org(org, team_slug, username): Remove team membership for a user\nteams.list_projects_in_org(org, team_slug, per_page, page): List team projects\nteams.check_permissions_for_project_in_org(org, team_slug, project_id): Check team permissions for a project\nteams.add_or_update_project_permissions_in_org(org, team_slug, project_id, permission): Add or update team project permissions\nteams.remove_project_in_org(org, team_slug, project_id): Remove a project from a team\nteams.list_repos_in_org(org, team_slug, per_page, page): List team repositories\nteams.check_permissions_for_repo_in_org(org, team_slug, owner, repo): Check team permissions for a repository\nteams.add_or_update_repo_permissions_in_org(org, team_slug, owner, repo, permission): Add or update team repository permissions\nteams.remove_repo_in_org(org, team_slug, owner, repo): Remove a repository from a team\nteams.list_idp_groups_in_org(org, team_slug): List IdP groups for a team\nteams.create_or_update_idp_group_connections_in_org(org, team_slug, groups): Create or update IdP group connections\nteams.list_child_in_org(org, team_slug, per_page, page): List child teams\nteams.get_legacy(team_id): Get a team (Legacy)\nteams.update_legacy(team_id, name, description, privacy, permission, parent_team_id): Update a team (Legacy)\nteams.delete_legacy(team_id): Delete a team (Legacy)\nteams.list_discussions_legacy(team_id, direction, per_page, page): List discussions (Legacy)\nteams.create_discussion_legacy(team_id, title, body, private): Create a discussion (Legacy)\nteams.get_discussion_legacy(team_id, discussion_number): Get a discussion (Legacy)\nteams.update_discussion_legacy(team_id, discussion_number, title, body): Update a discussion (Legacy)\nteams.delete_discussion_legacy(team_id, discussion_number): Delete a discussion (Legacy)\nteams.list_discussion_comments_legacy(team_id, discussion_number, direction, per_page, page): List discussion comments (Legacy)\nteams.create_discussion_comment_legacy(team_id, discussion_number, body): Create a discussion comment (Legacy)\nteams.get_discussion_comment_legacy(team_id, discussion_number, comment_number): Get a discussion comment (Legacy)\nteams.update_discussion_comment_legacy(team_id, discussion_number, comment_number, body): Update a discussion comment (Legacy)\nteams.delete_discussion_comment_legacy(team_id, discussion_number, comment_number): Delete a discussion comment (Legacy)\nteams.list_pending_invitations_legacy(team_id, per_page, page): List pending team invitations (Legacy)\nteams.list_members_legacy(team_id, role, per_page, page): List team members (Legacy)\nteams.get_member_legacy(team_id, username): Get team member (Legacy)\nteams.add_member_legacy(team_id, username): Add team member (Legacy)\nteams.remove_member_legacy(team_id, username): Remove team member (Legacy)\nteams.get_membership_for_user_legacy(team_id, username): Get team membership for a user (Legacy)\nteams.add_or_update_membership_for_user_legacy(team_id, username, role): Add or update team membership for a user (Legacy)\nteams.remove_membership_for_user_legacy(team_id, username): Remove team membership for a user (Legacy)\nteams.list_projects_legacy(team_id, per_page, page): List team projects (Legacy)\nteams.check_permissions_for_project_legacy(team_id, project_id): Check team permissions for a project (Legacy)\nteams.add_or_update_project_permissions_legacy(team_id, project_id, permission): Add or update team project permissions (Legacy)\nteams.remove_project_legacy(team_id, project_id): Remove a project from a team (Legacy)\nteams.list_repos_legacy(team_id, per_page, page): List team repositories (Legacy)\nteams.check_permissions_for_repo_legacy(team_id, owner, repo): Check team permissions for a repository (Legacy)\nteams.add_or_update_repo_permissions_legacy(team_id, owner, repo, permission): Add or update team repository permissions (Legacy)\nteams.remove_repo_legacy(team_id, owner, repo): Remove a repository from a team (Legacy)\nteams.list_idp_groups_for_legacy(team_id): List IdP groups for a team (Legacy)\nteams.create_or_update_idp_group_connections_legacy(team_id, groups, synced_at): Create or update IdP group connections (Legacy)\nteams.list_child_legacy(team_id, per_page, page): List child teams (Legacy)\nteams.list_for_authenticated_user(per_page, page): List teams for the authenticated user",
    "crumbs": [
      "Full GitHub API reference"
    ]
  },
  {
    "objectID": "fullapi.html#users",
    "href": "fullapi.html#users",
    "title": "Full GitHub API reference",
    "section": "users",
    "text": "users\n\nusers.get_authenticated(): Get the authenticated user\nusers.update_authenticated(name, email, blog, twitter_username, company, location, hireable, bio): Update the authenticated user\nusers.list_blocked_by_authenticated_user(): List users blocked by the authenticated user\nusers.check_blocked(username): Check if a user is blocked by the authenticated user\nusers.block(username): Block a user\nusers.unblock(username): Unblock a user\nusers.set_primary_email_visibility_for_authenticated_user(visibility): Set primary email visibility for the authenticated user\nusers.list_emails_for_authenticated_user(per_page, page): List email addresses for the authenticated user\nusers.add_email_for_authenticated_user(emails): Add an email address for the authenticated user\nusers.delete_email_for_authenticated_user(emails): Delete an email address for the authenticated user\nusers.list_followers_for_authenticated_user(per_page, page): List followers of the authenticated user\nusers.list_followed_by_authenticated_user(per_page, page): List the people the authenticated user follows\nusers.check_person_is_followed_by_authenticated(username): Check if a person is followed by the authenticated user\nusers.follow(username): Follow a user\nusers.unfollow(username): Unfollow a user\nusers.list_gpg_keys_for_authenticated_user(per_page, page): List GPG keys for the authenticated user\nusers.create_gpg_key_for_authenticated_user(name, armored_public_key): Create a GPG key for the authenticated user\nusers.get_gpg_key_for_authenticated_user(gpg_key_id): Get a GPG key for the authenticated user\nusers.delete_gpg_key_for_authenticated_user(gpg_key_id): Delete a GPG key for the authenticated user\nusers.list_public_ssh_keys_for_authenticated_user(per_page, page): List public SSH keys for the authenticated user\nusers.create_public_ssh_key_for_authenticated_user(title, key): Create a public SSH key for the authenticated user\nusers.get_public_ssh_key_for_authenticated_user(key_id): Get a public SSH key for the authenticated user\nusers.delete_public_ssh_key_for_authenticated_user(key_id): Delete a public SSH key for the authenticated user\nusers.list_public_emails_for_authenticated_user(per_page, page): List public email addresses for the authenticated user\nusers.list(since, per_page): List users\nusers.get_by_username(username): Get a user\nusers.list_followers_for_user(username, per_page, page): List followers of a user\nusers.list_following_for_user(username, per_page, page): List the people a user follows\nusers.check_following_for_user(username, target_user): Check if a user follows another user\nusers.list_gpg_keys_for_user(username, per_page, page): List GPG keys for a user\nusers.get_context_for_user(username, subject_type, subject_id): Get contextual information for a user\nusers.list_public_keys_for_user(username, per_page, page): List public keys for a user",
    "crumbs": [
      "Full GitHub API reference"
    ]
  },
  {
    "objectID": "auth.html",
    "href": "auth.html",
    "title": "Authentication",
    "section": "",
    "text": "source\n\n\n\n scope_str (*scopes)\n\nConvert scopes into a comma-separated string\n\nscope_str(Scope.repo,Scope.admin_public_key,Scope.public_repo)\n\n'repo,admin:public_key,public_repo'\n\n\n\nsource\n\n\n\n\n GhDeviceAuth (client_id='71604a89b882ab8c8634', *scopes)\n\nGet an oauth token using the GitHub API device flow\nCreating a GhDeviceAuth will complete the first step in the GitHub API device flow, getting device and user codes.\n\nghauth = GhDeviceAuth()\nghauth.device_code,ghauth.user_code\n\n('62956bc850018fb2e5c4b62501df72bbe5583a5a', '247D-B1A6')\n\n\n\nsource\n\n\n\n\n GhDeviceAuth.url_docs ()\n\nDefault instructions on how to authenticate\nYou can provide your own instructions on how to authenticate, or just print this out:\n\nprint(ghauth.url_docs())\n\nFirst copy your one-time code: 247D-B1A6\nThen visit https://github.com/login/device in your browser, and paste the code when prompted.\n\n\n\nsource\n\n\n\n\n GhDeviceAuth.open_browser ()\n\nOpen a web browser with the verification URL\nThis uses Python’s webbrowser.open, which will use the user’s default web browser. This won’t work well if the user is using a remote terminal.\n\nsource\n\n\n\n\n GhDeviceAuth.auth ()\n\nReturn token if authentication complete, or None otherwise\nUntil the user has completed authentication in the browser, this will return None. Normally, you won’t call this directly, but will call wait (see below), which will repeatedly call auth until authentication is complete.\n\nprint(ghauth.auth())\n\nNone\n\n\n\nsource\n\n\n\n\n GhDeviceAuth.wait (cb:&lt;built-infunctioncallable&gt;=None, n_polls=9999)\n\nWait up to n_polls times for authentication to complete, calling cb after each poll, if passed\nIf you pass a callback to cb, it will be called after each unsuccessful check for user authentication. For instance, to print a . to the screen after each poll, and store the token in a variable token when complete, you could use:\ntoken = ghauth.wait(lambda: print('.', end=''))\n\nsource\n\n\n\n\n github_auth_device (wb='', n_polls=9999)\n\nAuthenticate with GitHub, polling up to n_polls times to wait for completion\nWhen we run this we’ll be shown a URL to visit and a code to enter in order to authenticate. Normally we’ll be prompted to open a browser, and the function will wait for authentication to complete – for demonstrating here we’ll skip both of these steps:\n\ngithub_auth_device('n',n_polls=0)\n\nFirst copy your one-time code: 4ACE-3C18\nThen visit https://github.com/login/device in your browser, and paste the code when prompted.\nWaiting for authorization...Authentication not complete!",
    "crumbs": [
      "Authentication"
    ]
  },
  {
    "objectID": "auth.html#scopes",
    "href": "auth.html#scopes",
    "title": "Authentication",
    "section": "",
    "text": "source\n\n\n\n scope_str (*scopes)\n\nConvert scopes into a comma-separated string\n\nscope_str(Scope.repo,Scope.admin_public_key,Scope.public_repo)\n\n'repo,admin:public_key,public_repo'\n\n\n\nsource\n\n\n\n\n GhDeviceAuth (client_id='71604a89b882ab8c8634', *scopes)\n\nGet an oauth token using the GitHub API device flow\nCreating a GhDeviceAuth will complete the first step in the GitHub API device flow, getting device and user codes.\n\nghauth = GhDeviceAuth()\nghauth.device_code,ghauth.user_code\n\n('62956bc850018fb2e5c4b62501df72bbe5583a5a', '247D-B1A6')\n\n\n\nsource\n\n\n\n\n GhDeviceAuth.url_docs ()\n\nDefault instructions on how to authenticate\nYou can provide your own instructions on how to authenticate, or just print this out:\n\nprint(ghauth.url_docs())\n\nFirst copy your one-time code: 247D-B1A6\nThen visit https://github.com/login/device in your browser, and paste the code when prompted.\n\n\n\nsource\n\n\n\n\n GhDeviceAuth.open_browser ()\n\nOpen a web browser with the verification URL\nThis uses Python’s webbrowser.open, which will use the user’s default web browser. This won’t work well if the user is using a remote terminal.\n\nsource\n\n\n\n\n GhDeviceAuth.auth ()\n\nReturn token if authentication complete, or None otherwise\nUntil the user has completed authentication in the browser, this will return None. Normally, you won’t call this directly, but will call wait (see below), which will repeatedly call auth until authentication is complete.\n\nprint(ghauth.auth())\n\nNone\n\n\n\nsource\n\n\n\n\n GhDeviceAuth.wait (cb:&lt;built-infunctioncallable&gt;=None, n_polls=9999)\n\nWait up to n_polls times for authentication to complete, calling cb after each poll, if passed\nIf you pass a callback to cb, it will be called after each unsuccessful check for user authentication. For instance, to print a . to the screen after each poll, and store the token in a variable token when complete, you could use:\ntoken = ghauth.wait(lambda: print('.', end=''))\n\nsource\n\n\n\n\n github_auth_device (wb='', n_polls=9999)\n\nAuthenticate with GitHub, polling up to n_polls times to wait for completion\nWhen we run this we’ll be shown a URL to visit and a code to enter in order to authenticate. Normally we’ll be prompted to open a browser, and the function will wait for authentication to complete – for demonstrating here we’ll skip both of these steps:\n\ngithub_auth_device('n',n_polls=0)\n\nFirst copy your one-time code: 4ACE-3C18\nThen visit https://github.com/login/device in your browser, and paste the code when prompted.\nWaiting for authorization...Authentication not complete!",
    "crumbs": [
      "Authentication"
    ]
  },
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "ghapi",
    "section": "",
    "text": "ghapi provides 100% always-updated coverage of the entire GitHub API. Because we automatically convert the OpenAPI spec to a Pythonic API, ghapi is always up to date with the latest changes to GitHub APIs. Furthermore, because this is all done dynamically, the entire package is only 35kB in size!\nUsing ghapi, you can automate nearly anything that you can do through the GitHub web interface or through the git client, such as:\nThere are two ways to use ghapi: either through Python, or from the command line. An overview of each is provided below.",
    "crumbs": [
      "ghapi"
    ]
  },
  {
    "objectID": "index.html#installation",
    "href": "index.html#installation",
    "title": "ghapi",
    "section": "Installation",
    "text": "Installation\nTo install, run either pip install ghapi or conda install -c fastai ghapi.",
    "crumbs": [
      "ghapi"
    ]
  },
  {
    "objectID": "index.html#how-to-use---python",
    "href": "index.html#how-to-use---python",
    "title": "ghapi",
    "section": "How to use - Python",
    "text": "How to use - Python\nThroughout this documentation, you will see code inputs and outputs shown in this format:\n\n1+1\n\n2\n\n\nWe recommend reading the documentation on the official site, rather than on GitHub, since not all the functionality described on this page is available through the GitHub viewer.\nAll of the documentation is available directly as Jupyter Notebooks, for instance the current page you’re reading is available as a notebook here. To open any page as an interactive notebook in Google Colab, click the Colab badge at the top of the page.\nTo access the GitHub API, first create a GhApi object:\n\nfrom ghapi.all import GhApi\napi = GhApi()\n\nEvery part of the API includes documentation directly in the api object itself. For instance, here’s how to explore the groups of functionality provided by the API by displaying the object:\n\napi\n\n\nactions\nactivity\napps\nbilling\nchecks\ncode_scanning\ncodes_of_conduct\nemojis\nenterprise_admin\ngists\ngit\ngitignore\ninteractions\nissues\nlicenses\nmarkdown\nmeta\nmigrations\noauth_authorizations\norgs\nprojects\npulls\nrate_limit\nreactions\nrepos\nscim\nsearch\nsecret_scanning\nteams\nusers\n\n\n\nThen we can explore the endpoints provided by the API in each group, e.g. for the git group:\n\napi.git\n\n\ngit.create_blob(owner, repo, content, encoding): Create a blob\ngit.get_blob(owner, repo, file_sha): Get a blob\ngit.create_commit(owner, repo, message, tree, parents, author, committer, signature): Create a commit\ngit.get_commit(owner, repo, commit_sha): Get a commit\ngit.list_matching_refs(owner, repo, ref, per_page, page): List matching references\ngit.get_ref(owner, repo, ref): Get a reference\ngit.create_ref(owner, repo, ref, sha, key): Create a reference\ngit.update_ref(owner, repo, ref, sha, force): Update a reference\ngit.delete_ref(owner, repo, ref): Delete a reference\ngit.create_tag(owner, repo, tag, message, object, type, tagger): Create a tag object\ngit.get_tag(owner, repo, tag_sha): Get a tag\ngit.create_tree(owner, repo, tree, base_tree): Create a tree\ngit.get_tree(owner, repo, tree_sha, recursive): Get a tree\n\n\n\nHere’s how to learn about an endpoint you want to use, e.g.:\n\napi.git.get_ref\n\ngit.get_ref(owner, repo, ref): Get a reference\n\n\nIn Jupyter Notebook full tab completion, parameter lists, etc are provided for all endpoints. Endpoints are called as standard Python methods:\n\napi.git.get_ref(owner='fastai', repo='fastcore', ref='heads/master')\n\n\nref: refs/heads/master\nnode_id: MDM6UmVmMjI1NDYwNTk5OnJlZnMvaGVhZHMvbWFzdGVy\nurl: https://api.github.com/repos/fastai/fastcore/git/refs/heads/master\nobject:\n\nsha: 0e3084ed009baa51db38a640ae7c23d638af2756\ntype: commit\nurl: https://api.github.com/repos/fastai/fastcore/git/commits/0e3084ed009baa51db38a640ae7c23d638af2756\n\n\n\n\nTo use ghapi to access authenticated operations (other than when running through GitHub Actions), you will need a GitHub personal access token, which is a secret code used to access your account. If you don’t have one, click here to create one. You’ll be asked to enter a name – choose anything you like, for instance “ghapi”. You’ll also be asked to choose “scopes”; this limits what you’ll be able to do with the API using this token. If you’re not sure, click “repo” “gist”, “notifications”, and “workflow”. Then click “Generate Token” at the bottom of the screen, and copy the token (the long string of letters and numbers shown). You can easily do that by clicking the little clipboard icon next to the token.\nRather than pasting that token into every script, it’s easiest to save it as an environment variable. If you save it as $GITHUB_TOKEN then it will be most convenient, so add this to the end of your .bashrc or .zshrc file:\nexport GITHUB_TOKEN=xxx\n…replacing the xxx with the token you just copied. (Don’t forget to source that file after you change it.), pass a [GitHub token].\nAs well as your token, you can also pass any parameters you want auto-inserted into relevant methods, such as owner and repo:\n\napi = GhApi(owner='fastai', repo='fastcore', token=github_token)\n\nWe can now repeat the previous method, but only need to pass ref:\n\napi.git.get_ref('heads/master')\n\n\nref: refs/heads/master\nnode_id: MDM6UmVmMjI1NDYwNTk5OnJlZnMvaGVhZHMvbWFzdGVy\nurl: https://api.github.com/repos/fastai/fastcore/git/refs/heads/master\nobject:\n\nsha: 0e3084ed009baa51db38a640ae7c23d638af2756\ntype: commit\nurl: https://api.github.com/repos/fastai/fastcore/git/commits/0e3084ed009baa51db38a640ae7c23d638af2756\n\n\n\n\nNow that we’ve provided our token, we can use authenticated endpoints such as creating an issue:\nissue = api.issues.create(\"Remember to check out GhApi!\")\nSince we’ve now checked out GhApi, let’s close this issue. 😎\napi.issues.update(issue.number, state='closed')",
    "crumbs": [
      "ghapi"
    ]
  },
  {
    "objectID": "index.html#how-to-use---command-line",
    "href": "index.html#how-to-use---command-line",
    "title": "ghapi",
    "section": "How to use - command line",
    "text": "How to use - command line\nYou can use GhApi via the command line, and can access nearly everything in the GitHub API. We provide an overview here of one of the command line programs, ghapi – see the full CLI docs page for details on all the programs available.\nWe strongly recommend enabling tab completion for ghapi, which you can do by placing the following command at the end of your ~/.bashrc or ~/.zshrc file:\neval \"$(completion-ghapi --install)\"\nTo get started with the ghapi command, first find the name of the operation you wish to perform, for instance by searching the full API reference.\nTo use ghapi, pass the method name (exactly the same as you’d use in the Python API) as the first parameter, followed by any positional parameters required, and then keyword arguments with “--” before each parameter name.\nFor instance, git.get_ref takes three parameters: owner, repo, and ref. If we wish to pass the first two as positional parameters, and the last as a named argument, then we’d call:\nghapi git.get_ref fastai ghapi-test --ref heads/master\nIf you have enabled tab completion, then after you’ve typed ghapi g try pressing Tab, and you’ll see all the operation groups available in the GitHub API that start with g. If you keep typing, e.g. ghapi git., and hit Tab again, you’ll now see all the operations available in the git group, i.e:\ngit.create_blob git.create_commit git.create_ref git.create_tag git.create_tree git.delete_ref git.get_blob git.get_commit git.get_ref git.get_tag git.get_tree git.list_matching_refs git.name git.update_ref git.verbs\nIf you pass just --help after the operation name, you’ll see a full list of all parameters accepted, and a link to the official GitHub documentation.\nghapi git.get_ref --help\n&gt;&gt;&gt; git.get_ref(owner, repo, ref)\n&gt;&gt;&gt; https://docs.github.com/rest/reference/git#get-a-reference\nIn addition to --help and the GitHub operation parameters, you can also pass the following:\n\n--headers: A list of extra headers to pass, JSON-encoded\n--token: A GitHub authentation token\n--debug: Print requests before sending them",
    "crumbs": [
      "ghapi"
    ]
  },
  {
    "objectID": "cli.html",
    "href": "cli.html",
    "title": "Command line interface",
    "section": "",
    "text": "You can use GhApi via the command line, and can access nearly everything in the GitHub API.\nThere are three commands provided. For most people, ghapi will be the easiest to use. All three commands take the following parameters:\nIf you have an environment variable GITHUB_TOKEN defined, then it will be used for the token if --token is not passed. If neither is provided, then the commands will not be able to acces any authentication functionality.\nWe’ll now look at each of the three commands in turn.",
    "crumbs": [
      "Command line interface"
    ]
  },
  {
    "objectID": "cli.html#the-ghapi-command",
    "href": "cli.html#the-ghapi-command",
    "title": "Command line interface",
    "section": "The ghapi command",
    "text": "The ghapi command\nTo get started with the ghapi command, first find the name of the operation you wish to perform. If you’ve used the Python API, then you already know the operation names - they’re whatever you type in Python after “api.”. To find the name of the operation you need, search the full API reference which contains information about every endpoint in the entire GitHub API. For instance, if you want to work with GitHub Issues, then searching for “issues” on the full reference page will take you to this section.\nThe first operation listed there is issues.list, shown with a link to the official GitHub documentation, and a list of parameters that the command accepts. You’ll see the official docs list some parameters, such as “accept”, which aren’t listed in the GhApi reference - that’s because GhApi automatically set some parameters for you.\nYou’ll also see that the parameter list on the official docs includes a column marked “in”, which can be “header”, “query”, “path”, or “body”. The ghapi command handles that distinction for you, so you can ignore it for now.\nTo use ghapi, pass the method name (exactly the same as you’d use in the Python API) as the first parameter, followed by any positional parameters required, and then keyword arguments with “--” before each parameter name.\nFor instance, git.get_ref takes three parameters: owner, repo, and ref. If we wish to pass the first two as positional parameters, and the last as a named argument, then we’d call:\n\n! ghapi git.get_ref fastai ghapi-test --ref heads/master\n\n- ref: refs/heads/master\n- node_id: MDM6UmVmMzE1NzEyNTg4OnJlZnMvaGVhZHMvbWFzdGVy\n- url: https://api.github.com/repos/fastai/ghapi-test/git/refs/heads/master\n- object: \n  - sha: f086d17cc9ec8e99f466c613cab44f98abad1db6\n  - type: commit\n  - url: https://api.github.com/repos/fastai/ghapi-test/git/commits/f086d17cc9ec8e99f466c613cab44f98abad1db6\n\n\n(NB: The “!” before the examples such as the one above is only needed when calling the commands from Jupyer Notebook. In your terminal, do not include the “!” prefix.)\nIf you pass just --help after the operation name, you’ll see a full list of all parameters accepted, and a link to the official GitHub documentation.\n\n! ghapi git.get_ref --help\n\ngit.get_ref(owner, repo, ref)\nhttps://docs.github.com/rest/reference/git#get-a-reference\n\n\nHelper methods are also supported, e.g:\n\n! ghapi create_release --help\n\n(tag_name, branch='master', name=None, body='', draft=False, prerelease=False, files=None)",
    "crumbs": [
      "Command line interface"
    ]
  },
  {
    "objectID": "cli.html#the-ghpath-command",
    "href": "cli.html#the-ghpath-command",
    "title": "Command line interface",
    "section": "The ghpath command",
    "text": "The ghpath command\nIf you find the endpoint you want in the GitHub docs, rather than the GhApi reference, you’ll see a path and a verb instead of an operation name. For example, here’s the GitHub documentation for git.getref. The white text on blue background section shows that the verb required is “GET”. Next to that is the path, which is listed as “/repos/{owner}/{repo}/git/ref/{ref}”.\nTo call an endpoint when you have this information from the GitHub docs, use the ghpath command. The arguments are exactly the same as ghapi, except that instead of an operation name, you provide the path (which you can paste directly from the GitHub docs) and verb.\nJust like with ghapi, ghpath handles header, query, path and body parameters for you automatically.\nFor instance, the previous git.get_ref command using ghpath is:\n\n! ghpath '/repos/{owner}/{repo}/git/ref/{ref}' get fastai ghapi-test --ref heads/master\n\n- ref: refs/heads/master\n- node_id: MDM6UmVmMzE1NzEyNTg4OnJlZnMvaGVhZHMvbWFzdGVy\n- url: https://api.github.com/repos/fastai/ghapi-test/git/refs/heads/master\n- object: \n  - sha: f086d17cc9ec8e99f466c613cab44f98abad1db6\n  - type: commit\n  - url: https://api.github.com/repos/fastai/ghapi-test/git/commits/f086d17cc9ec8e99f466c613cab44f98abad1db6",
    "crumbs": [
      "Command line interface"
    ]
  },
  {
    "objectID": "cli.html#the-ghraw-command",
    "href": "cli.html#the-ghraw-command",
    "title": "Command line interface",
    "section": "The ghraw command",
    "text": "The ghraw command\nSometimes, you just want to call an exact path directly, handling the path and query parameters yourself. The ghraw command provides that functionality. Like with ghpath, you pass the path and verb as the first two arguments, but now you have to fill in all the path parameters yourself, plus construct the query string yourself (if one is required). If you need to pass body parameters, use the --data parameter, which requires that you encode the request body appropriately (which is JSON-encoded for most GitHub endpoints).\nFor instance, the git.git_ref example show in the previous two sections does not have any header, body, or query parameters, so we need only insert the path parameters, which results in this call:\n\n! ghraw /repos/fastai/ghapi-test/git/ref/heads/master get\n\n- ref: refs/heads/master\n- node_id: MDM6UmVmMzE1NzEyNTg4OnJlZnMvaGVhZHMvbWFzdGVy\n- url: https://api.github.com/repos/fastai/ghapi-test/git/refs/heads/master\n- object: \n  - sha: f086d17cc9ec8e99f466c613cab44f98abad1db6\n  - type: commit\n  - url: https://api.github.com/repos/fastai/ghapi-test/git/commits/f086d17cc9ec8e99f466c613cab44f98abad1db6",
    "crumbs": [
      "Command line interface"
    ]
  },
  {
    "objectID": "cli.html#shell-completions",
    "href": "cli.html#shell-completions",
    "title": "Command line interface",
    "section": "Shell completions",
    "text": "Shell completions\nShell completions are provided for ghapi behind the scenes by the completion-ghapi command (which is implemented with the completion_ghapi function). You probably won’t need to call this yourself - it will be called for you as part by your shell.\n\n! completion-ghapi git\n\ngit\n\n\n\n! completion-ghapi gi\n\ngists git gitignore\n\n\n\n! completion-ghapi git.\n\ngit.create_blob git.create_commit git.create_ref git.create_tag git.create_tree git.delete_ref git.get_blob git.get_commit git.get_ref git.get_tag git.get_tree git.list_matching_refs git.name git.update_ref git.verbs\n\n\n\n! completion-ghapi git.g\n\ngit.get_blob git.get_commit git.get_ref git.get_tag git.get_tree",
    "crumbs": [
      "Command line interface"
    ]
  },
  {
    "objectID": "cli.html#tab-completion",
    "href": "cli.html#tab-completion",
    "title": "Command line interface",
    "section": "Tab completion",
    "text": "Tab completion\nYou can enable tab completion for ghapi by placing the following command at the end of your ~/.bashrc or ~/.zshrc file:\neval \"$(completion-ghapi --install)\"",
    "crumbs": [
      "Command line interface"
    ]
  },
  {
    "objectID": "CONTRIBUTING.html",
    "href": "CONTRIBUTING.html",
    "title": "How to contribute",
    "section": "",
    "text": "Before anything else, please install the git hooks that run automatic scripts during each commit and merge to strip the notebooks of superfluous metadata (and avoid merge conflicts). After cloning the repository, run the following command inside it:\nnbdev_install_git_hooks\n\n\n\n\nEnsure the bug was not already reported by searching on GitHub under Issues.\nIf you’re unable to find an open issue addressing the problem, open a new one. Be sure to include a title and clear description, as much relevant information as possible, and a code sample or an executable test case demonstrating the expected behavior that is not occurring.\nBe sure to add the complete error messages.\n\n\n\n\nOpen a new GitHub pull request with the patch.\nEnsure that your PR includes a test that fails without your patch, and pass with it.\nEnsure the PR description clearly describes the problem and solution. Include the relevant issue number if applicable.\n\n\n\n\n\n\nKeep each PR focused. While it’s more convenient, do not combine several unrelated fixes together. Create as many branches as needing to keep each PR focused.\nDo not mix style changes/fixes with “functional” changes. It’s very difficult to review such PRs and it most likely get rejected.\nDo not add/remove vertical whitespace. Preserve the original style of the file you edit as much as you can.\nDo not turn an already submitted PR into your development playground. If after you submitted PR, you discovered that more work is needed - close the PR, do the required work and then submit a new PR. Otherwise each of your commits requires attention from maintainers of the project.\nIf, however, you submitted a PR and received a request for changes, you should proceed with commits inside that PR, so that the maintainer can see the incremental fixes and won’t need to review the whole PR again. In the exception case where you realize it’ll take many many commits to complete the requests, then it’s probably best to close the PR, do the work and then submit it again. Use common sense where you’d choose one way over another.\n\n\n\n\n\nDocs are automatically created from the notebooks in the nbs folder."
  },
  {
    "objectID": "CONTRIBUTING.html#how-to-get-started",
    "href": "CONTRIBUTING.html#how-to-get-started",
    "title": "How to contribute",
    "section": "",
    "text": "Before anything else, please install the git hooks that run automatic scripts during each commit and merge to strip the notebooks of superfluous metadata (and avoid merge conflicts). After cloning the repository, run the following command inside it:\nnbdev_install_git_hooks"
  },
  {
    "objectID": "CONTRIBUTING.html#did-you-find-a-bug",
    "href": "CONTRIBUTING.html#did-you-find-a-bug",
    "title": "How to contribute",
    "section": "",
    "text": "Ensure the bug was not already reported by searching on GitHub under Issues.\nIf you’re unable to find an open issue addressing the problem, open a new one. Be sure to include a title and clear description, as much relevant information as possible, and a code sample or an executable test case demonstrating the expected behavior that is not occurring.\nBe sure to add the complete error messages.\n\n\n\n\nOpen a new GitHub pull request with the patch.\nEnsure that your PR includes a test that fails without your patch, and pass with it.\nEnsure the PR description clearly describes the problem and solution. Include the relevant issue number if applicable."
  },
  {
    "objectID": "CONTRIBUTING.html#pr-submission-guidelines",
    "href": "CONTRIBUTING.html#pr-submission-guidelines",
    "title": "How to contribute",
    "section": "",
    "text": "Keep each PR focused. While it’s more convenient, do not combine several unrelated fixes together. Create as many branches as needing to keep each PR focused.\nDo not mix style changes/fixes with “functional” changes. It’s very difficult to review such PRs and it most likely get rejected.\nDo not add/remove vertical whitespace. Preserve the original style of the file you edit as much as you can.\nDo not turn an already submitted PR into your development playground. If after you submitted PR, you discovered that more work is needed - close the PR, do the required work and then submit a new PR. Otherwise each of your commits requires attention from maintainers of the project.\nIf, however, you submitted a PR and received a request for changes, you should proceed with commits inside that PR, so that the maintainer can see the incremental fixes and won’t need to review the whole PR again. In the exception case where you realize it’ll take many many commits to complete the requests, then it’s probably best to close the PR, do the work and then submit it again. Use common sense where you’d choose one way over another."
  },
  {
    "objectID": "CONTRIBUTING.html#do-you-want-to-contribute-to-the-documentation",
    "href": "CONTRIBUTING.html#do-you-want-to-contribute-to-the-documentation",
    "title": "How to contribute",
    "section": "",
    "text": "Docs are automatically created from the notebooks in the nbs folder."
  },
  {
    "objectID": "build_lib.html",
    "href": "build_lib.html",
    "title": "Internal - OpenAPI Parser",
    "section": "",
    "text": "This library leverages the OpenAPI Specification to create a python client for the GitHub API. The OpenAPI specification contains metadata on all of the endpoints and how to access them properly. Using this metadata, we can construct a python client dynamically that updates automatically along with the OpenAPI Spec.\n\nsource\n\nbuild_funcs\n\n build_funcs (nm='ghapi/metadata.py', url='https://github.com/github/rest-\n              api-description/raw/main/descriptions/api.github.com/api.git\n              hub.com.json?raw=true', docurl='https://docs.github.com/')\n\nBuild module metadata.py from an Open API spec and optionally filter by a path pre\nThis module created by build_funcs contains a list of metadata for each endpoint, containing the path, verb, operation id, summary, documentation relative URL, and list of parameters (if any), e.g:\n\nfrom ghapi.metadata import funcs\n\n\nGhMeta(*funcs[3])\n\nGhMeta(path='/app/hook/config', verb='get', oper_id='apps/get-webhook-config-for-app', summary='Get a webhook configuration for an app', doc_url='rest/reference/apps#get-a-webhook-configuration-for-an-app', params=[], data=[], preview='')",
    "crumbs": [
      "Internal - OpenAPI Parser"
    ]
  },
  {
    "objectID": "event.html",
    "href": "event.html",
    "title": "The events API",
    "section": "",
    "text": "api = GhApi()\n\n\nsource\n\nGhApi.list_events\n\n GhApi.list_events (per_page=30, page=1, username=None, org=None,\n                    owner=None, repo=None)\n\nFetch public events for repo network, org, user, or all\n\nsource\n\n\nGhApi.list_events_parallel\n\n GhApi.list_events_parallel (per_page=30, n_pages=8, username=None,\n                             org=None, owner=None, repo=None)\n\nFetch as many events from list_events in parallel as available\nlist_events and list_events_parallel support the following:\n\n\n\n\n\n\n\nEvents from\nExample\n\n\n\n\nOrganization\napi.list_events_parallel(org='fastai')\n\n\nUser\napi.list_events_parallel(username='jph00')\n\n\nRepository network\napi.list_events_parallel(owner='fastai', repo='fastcore')\n\n\nAll public\napi.list_events_parallel()\n\n\n\n\nsource\n\nGhEvent\nClass for events returned from `fetch_events\n\nprint([snake2camel(o)+'Event' for o in Event])\n\n['PageBuildEvent', 'ContentReferenceEvent', 'RepositoryImportEvent', 'CreateEvent', 'WorkflowRunEvent', 'DeleteEvent', 'OrganizationEvent', 'SponsorshipEvent', 'ProjectColumnEvent', 'PushEvent', 'ContextEvent', 'MilestoneEvent', 'ProjectCardEvent', 'ProjectEvent', 'PackageEvent', 'PullRequestEvent', 'RepositoryDispatchEvent', 'TeamAddEvent', 'WorkflowDispatchEvent', 'MemberEvent', 'MetaEvent', 'CodeScanningAlertEvent', 'PublicEvent', 'NeedsEvent', 'CheckRunEvent', 'SecurityAdvisoryEvent', 'PullRequestReviewCommentEvent', 'OrgBlockEvent', 'CommitCommentEvent', 'WatchEvent', 'MarketplacePurchaseEvent', 'StarEvent', 'InstallationRepositoriesEvent', 'CheckSuiteEvent', 'GithubAppAuthorizationEvent', 'TeamEvent', 'StatusEvent', 'RepositoryVulnerabilityAlertEvent', 'PullRequestReviewEvent', 'LabelEvent', 'InstallationEvent', 'ReleaseEvent', 'IssuesEvent', 'RepositoryEvent', 'GollumEvent', 'MembershipEvent', 'DeploymentEvent', 'DeployKeyEvent', 'IssueCommentEvent', 'PingEvent', 'DeploymentStatusEvent', 'ForkEvent', 'ScheduleEvent']\n\n\n\nsource\n\n\n\nGhApi.fetch_events\n\n GhApi.fetch_events (n_pages=3, pause=0.4, per_page=30, types=None,\n                     incl_bot=False, username=None, org=None, owner=None,\n                     repo=None)\n\nGenerate an infinite stream of events, optionally filtered to types, withpause` seconds between requests\n\nsource\n\n\nload_sample_events\n\n load_sample_events ()\n\nLoad sample events, downloading if needed\n\nsource\n\n\nsave_sample_events\n\n save_sample_events (n=5000)\n\nSave the most recent n events as compressed JSON\n5000 sample events (taken from a single recent period) are available, and are downloaded and cached by load_sample_events. full_type provides the combination of type and payload.action (where available) for each event. Here’s the frequency of all full_types in the sample:\n\nevts = load_sample_events()\nx,y = zip(*Counter([o.full_type for o in evts]).most_common())\nplt.figure(figsize=(8, 6))\nplt.barh(x,y);\n\n\n\n\n\n\n\n\nYou can use the description, text, and emoji properties to display events, e.g:\n\nexs = [first(evts, risinstance(o)) for o in described_evts]\n\ndef _fmt_evt(o):\n    res = f'{o.emoji} **{o.actor.login}** ' + truncstr(f'{o.description} *{o.repo.name}',60) + '*'\n    if o.text: res += f': \"{truncstr(o.text, 50)}\"'\n    return res.replace('\\n',' ')\n\nMarkdown('|Type|Description|\\n|:--|:--|\\n' +\n         '\\n'.join(f'|{camel2words(o.type.replace(\"PullRequest\",\"PR \")[:-5])}|{_fmt_evt(o)}|' for o in exs))\n\n\n\n\n\n\n\n\nType\nDescription\n\n\n\n\nPush\n⭐ fedya pushed 1 commits to “rolling” in OpenMandrivaAssociation/g…\n\n\nDelete\n✂ dependabot[bot] deleted branch “packit-0.5.0” in paketo-buildpacks/occam\n\n\nCreate\n🏭 github-classroom[bot] created repository in Introduction-to-Programming-OSOWSKI/…: “1-5-add-two-numbers-noraahlman23 created by GitHu…”\n\n\nPR\n📬 JerryMacedoCastro opened PR #1 on JerryMacedoCastro/tb-arquitetura-js: “Input component created”\n\n\nMember\n💃 github-classroom[bot] added member noraahlman23 in Introduction-to-Programming-O…\n\n\nPublic\n♥ navikt made public repo navikt/syfoinntektsmelding\n\n\nPR Review Comment\n🗨 fruttasecca created review comment on PR #97 in orchest/orchest: “Does this make it so that users coming from an ol…”\n\n\nFork\n🍽 amin-lotf forked vinaygaba/Learn-Jetpack-Compose-By-Example: “🚀 This project contains various examples that sho…”\n\n\nCommit Comment\n🎉 vercel[bot] created commint comment in Samaraferreira/test-frontend: “Successfully deployed to the following URLs: * […”\n\n\nWatch\n👀 ikarius started watching jorgebucaran/awsm.fish\n\n\nPR Review\n💌 fruttasecca created PR review in orchest/orchest\n\n\nRelease\n🚀 github-actions[bot] published release v1.1.3 in vouv/srun\n\n\nIssues\n🐛 efritz opened issue #16915 on sourcegraph/sourcegraph: “auto-indexing: Add docker/src-cli command wall cl…”\n\n\nGollum\n📚 TradingToolCrypto created wiki page in TradingToolCrypto/TradingTool-Wiki\n\n\nIssue Comment\n💬 jerhard created comment on issue #2570 in ls1intum/Artemis: “Do you think that spaces (or even white space cha…”",
    "crumbs": [
      "The events API"
    ]
  },
  {
    "objectID": "core.html",
    "href": "core.html",
    "title": "GhApi details",
    "section": "",
    "text": "You can set an environment variable named GH_HOST to override the default of https://api.github.com incase you are running GitHub Enterprise(GHE). However, this library has not been tested on GHE, so proceed at your own risk.\nsource",
    "crumbs": [
      "GhApi details"
    ]
  },
  {
    "objectID": "core.html#operations",
    "href": "core.html#operations",
    "title": "GhApi details",
    "section": "Operations",
    "text": "Operations\nInstead of passing a path to GhApi, you will more often use the operation methods provided in the API’s operation groups, which include documentation, signatures, and auto-complete.\nIf you provide owner and/or repo to the constructor, they will be automatically inserted into any calls which use them (except when calling GhApi as a function). You can also pass any other arbitrary keyword arguments you like to have them used as defaults for any relevant calls.\nYou must include a GitHub API token if you need to access any authenticated endpoints. If don’t pass the token param, then your GITHUB_TOKEN environment variable will be used, if available.\n\napi = GhApi(owner='fastai', repo='ghapi-test', token=token)\n\n\nOperation groups\nThe following groups of endpoints are provided, which you can list at any time along with a link to documentation for all endpoints in that group, by displaying the GhApi object:\n\napi\n\n\nactions\nactivity\napps\nbilling\nchecks\nclassroom\ncode_scanning\ncode_security\ncodes_of_conduct\ncodespaces\ncopilot\ndependabot\ndependency_graph\nemojis\ngists\ngit\ngitignore\ninteractions\nissues\nlicenses\nmarkdown\nmeta\nmigrations\noidc\norgs\npackages\nprojects\npulls\nrate_limit\nreactions\nrepos\nsearch\nsecret_scanning\nsecurity_advisories\nteams\nusers\n\n\n\n\napi.codes_of_conduct\n\n\ncodes-of-conduct.get_all_codes_of_conduct(): Get all codes of conduct\ncodes-of-conduct.get_conduct_code(key): Get a code of conduct\n\n\n\n\n\nCalling endpoints\nThe GitHub API’s endpoint names generally start with a verb like “get”, “list”, “delete”, “create”, etc, followed _, then by a noun such as “ref”, “webhook”, “issue”, etc.\nEach endpoint has a different signature, which you can see by using Shift-Tab in Jupyter, or by just printing the endpoint object (which also shows a link to the GitHub docs):\n\nprint(api.repos.create_webhook)\n\nrepos.create_webhook(name: str = None, config: dict = None, events: list = ['push'], active: bool = True)\nhttps://docs.github.com/rest/repos/webhooks#create-a-repository-webhook\n\n\nDisplaying an endpoint object in Jupyter also provides a formatted summary and link to the official GitHub documentation:\n\napi.repos.create_webhook\n\nrepos.create_webhook(name, config, events, active): Create a repository webhook\n\n\nEndpoint objects are called using standard Python method syntax:\n\nref = api.git.get_ref('heads/master')\ntest_eq(ref.object.type, 'commit')\n\nInformation about the endpoint are available as attributes:\n\napi.git.get_ref.path,api.git.get_ref.verb\n\n('/repos/fastai/ghapi-test/git/ref/{ref}', 'get')\n\n\nYou can get a list of all endpoints available in a group, along with a link to documentation for each, by viewing the group:\n\napi.git\n\n\ngit.create_blob(content, encoding): Create a blob\ngit.get_blob(file_sha): Get a blob\ngit.create_commit(message, tree, parents, author, committer, signature): Create a commit\ngit.get_commit(commit_sha): Get a commit object\ngit.list_matching_refs(ref): List matching references\ngit.get_ref(ref): Get a reference\ngit.create_ref(ref, sha): Create a reference\ngit.update_ref(ref, sha, force): Update a reference\ngit.delete_ref(ref): Delete a reference\ngit.create_tag(tag, message, object, type, tagger): Create a tag object\ngit.get_tag(tag_sha): Get a tag\ngit.create_tree(tree, base_tree): Create a tree\ngit.get_tree(tree_sha, recursive): Get a tree\n\n\n\nFor “list” endpoints, the noun will be a plural form, e.g.:\n\nhooks = api.repos.list_webhooks()\ntest_eq(len(hooks), 0)\n\nYou can pass dicts, lists, etc. directly, where they are required for GitHub API endpoints:\n\nurl = 'https://example.com'\ncfg = dict(url=url, content_type='json', secret='XXX')\nhook = api.repos.create_webhook(config=cfg, events=['ping'])\ntest_eq(hook.config.url, url)\n\nLet’s confirm that our new webhook has been created:\n\nhooks = api.repos.list_webhooks()\ntest_eq(len(hooks), 1)\ntest_eq(hooks[0].events, ['ping'])\n\nFinally, we can delete our new webhook:\n\napi.repos.delete_webhook(hooks[0].id)\n\n{}\n\n\n\n\nConvenience functions\n\nsource\n\n\ndate2gh\n\n date2gh (dt:datetime.datetime)\n\nConvert dt (which is assumed to be in UTC time zone) to a format suitable for GitHub API operations\nThe GitHub API assumes that dates will be in a specific string format. date2gh converts Python standard datetime objects to that format. For instance, to find issues opened in the ‘fastcore’ repo in the last 4 weeks:\n\ndt = date2gh(datetime.utcnow() - timedelta(weeks=4))\nissues = GhApi('fastai').issues.list_for_repo(repo='fastcore', since=dt)\nlen(issues)\n\n3\n\n\n\nsource\n\n\ngh2date\n\n gh2date (dtstr:str)\n\nConvert date string dtstr received from a GitHub API operation to a UTC datetime\n\ncreated = issues[0].created_at\nprint(created, '-&gt;', gh2date(created))\n\n2024-08-27T06:49:29Z -&gt; 2024-08-27 06:49:29\n\n\nYou can set the debug attribute to any callable to intercept all requests, for instance to print Request.summary. print_summary is provided for this purpose. Using this, we can see the preview header that is added for preview functionality, e.g.\n\napi.debug=print_summary\napi.codes_of_conduct.get_all_codes_of_conduct()[0]\napi.debug=None\n\n{'data': None,\n 'full_url': 'https://api.github.com/codes_of_conduct',\n 'headers': {'Accept': 'application/vnd.github.v3+json'},\n 'method': 'GET'}\n\n\n\n\nPreview endpoints\nGitHub’s preview API functionality requires a special header to be passed to enable it. This is added automatically for you.",
    "crumbs": [
      "GhApi details"
    ]
  },
  {
    "objectID": "core.html#convenience-methods",
    "href": "core.html#convenience-methods",
    "title": "GhApi details",
    "section": "Convenience methods",
    "text": "Convenience methods\nSome methods in the GitHub API are a bit clunky or unintuitive. In these situations we add convenience methods to GhApi to make things simpler. There are also some multi-step processes in the GitHub API that GhApi provide convenient wrappers for. The methods currently available are shown below; do not hesitate to create an issue or pull request if there are other processes that you’d like to see supported better.\n\nsource\n\nGhApi.create_gist\n\n GhApi.create_gist (description, content, filename='gist.txt',\n                    public=False)\n\nCreate a gist containing a single file\n\ngist = api.create_gist(\"some description\", \"some content\")\ngist.html_url, gist.files['gist.txt'].content\n\n('https://gist.github.com/jph00/d11f49a2c4515491f09d520e402ede75',\n 'some content')\n\n\n\napi.gists.delete(gist.id)\n\n{}\n\n\nNote that if you want to create a gist with multiple files, call the GitHub API directly, e.g.:\napi.gists.create(\"some description\", files={\"f1.txt\": {\"content\": \"my content\"}, ...})\n\n\nReleases\n\nsource\n\n\nGhApi.delete_release\n\n GhApi.delete_release (release)\n\nDelete a release and its associated tag\n\nsource\n\n\nGhApi.upload_file\n\n GhApi.upload_file (rel, fn)\n\nUpload fn to endpoint for release rel\n\nsource\n\n\nGhApi.create_release\n\n GhApi.create_release (tag_name, branch='master', name=None, body='',\n                       draft=False, prerelease=False, files=None)\n\nWrapper for GhApi.repos.create_release which also uploads files\nCreating a release and attaching files to it is normally a multi-stage process, so create_release wraps this up for you. It takes the same arguments as repos.create_release, along with files, which can contain a single file name, or a list of file names to upload to your release:\n\nrel = api.create_release('0.0.1', files=['README.md'])\ntest_eq(rel.name, 'v0.0.1')\n\n\nsleep(0.2)\nrels = api.repos.list_releases()\ntest_eq(len(rels), 1)\n\nWe can check that our file has been uploaded; GitHub refers to them as “assets”:\n\nassets = api.repos.list_release_assets(rels[0].id)\ntest_eq(assets[0].name, 'README.md')\n\n\nsource\n\n\nGhApi.delete_release\n\n GhApi.delete_release (release)\n\nDelete a release and its associated tag\n\n\nBranches and tags\n\nsource\n\n\nGhApi.list_tags\n\n GhApi.list_tags (prefix:str='')\n\nList all tags, optionally filtered to those starting with prefix\nWith no prefix, all tags are listed.\n\ntest_eq(len(api.list_tags()), 1)\n\nUsing the full tag name will return just that tag.\n\ntest_eq(len(api.list_tags(rel.tag_name)), 1)\n\n\nsource\n\n\nGhApi.list_branches\n\n GhApi.list_branches (prefix:str='')\n\nList all branches, optionally filtered to those starting with prefix\nBranches can be listed in the exactly the same way as tags.\n\ntest_eq(len(api.list_branches('master')), 1)\n\nWe can delete our release and confirm that it is removed:\n\napi.delete_release(rels[0])\ntest_eq(len(api.repos.list_releases()), 0)\n\n\n# #|hide\n# #not working\n# #|export\n# @patch\n# def create_branch_empty(self:GhApi, branch):\n#     c = self.git.create_commit(f'create {branch}', EMPTY_TREE_SHA)\n#     return self.git.create_ref(f'refs/heads/{branch}', c.sha)\n\n\nsource\n\n\nGhApi.create_branch_empty\n\n GhApi.create_branch_empty (branch)\n\n\nref = api.create_branch_empty(\"testme\")\ntest_eq(len(api.list_branches('testme')), 1)\n\n\nsource\n\n\nGhApi.delete_tag\n\n GhApi.delete_tag (tag:str)\n\nDelete a tag\n\nsource\n\n\nGhApi.delete_branch\n\n GhApi.delete_branch (branch:str)\n\nDelete a branch\n\napi.delete_branch('testme')\ntest_eq(len(api.list_branches('testme')), 0)\n\n\nsource\n\n\nGhApi.get_branch\n\n GhApi.get_branch (branch=None)\n\n\n\nContent (git files)\n\nsource\n\n\nGhApi.list_files\n\n GhApi.list_files (branch=None)\n\n\nfiles = api.list_files()\nfiles['README.md']\n\n{ 'mode': '100644',\n  'path': 'README.md',\n  'sha': 'eaea0f2698e76c75602058bf4e2e9fd7940ac4e3',\n  'size': 72,\n  'type': 'blob',\n  'url': 'https://api.github.com/repos/fastai/ghapi-test/git/blobs/eaea0f2698e76c75602058bf4e2e9fd7940ac4e3'}\n\n\n\nsource\n\n\nGhApi.get_content\n\n GhApi.get_content (path)\n\n\nreadme = api.get_content('README.md').decode()\nassert 'ghapi' in readme\n\n\nsource\n\n\nGhApi.create_or_update_file\n\n GhApi.create_or_update_file (path, message, committer, author,\n                              content=None, sha=None, branch='')\n\n\nsource\n\n\nGhApi.create_file\n\n GhApi.create_file (path, message, committer, author, content=None,\n                    branch=None)\n\n\nperson = dict(name=\"Monalisa Octocat\", email=\"octocat@github.com\")\nres = api.create_file(\n    path='foo',\n    message=\"Create foo\",\n    content=\"foobar\",\n    committer=person, author=person\n)\ntest_eq('foobar', api.get_content('foo').decode())\n\n\nsource\n\n\nGhApi.delete_file\n\n GhApi.delete_file (path, message, committer, author, sha=None,\n                    branch=None)\n\n\napi.delete_file('foo', 'delete foo', committer=person, author=person)\nassert 'foo' not in api.list_files()\n\n\nsource\n\n\nGhApi.update_contents\n\n GhApi.update_contents (path, message, committer, author, content,\n                        sha=None, branch=None)\n\n\nres = api.update_contents(\n    path='README.md',\n    message=\"Update README\",\n    committer=person, author=person,\n    content=readme+\"foobar\"\n)\nres.content.size\n\n78\n\n\n\nreadme = api.get_content('README.md').decode()\nassert 'foobar' in readme\napi.update_contents('README.md', \"Revert README\", committer=person, author=person, content=readme[:-6]);\n\n\n\nGitHub Pages\n\nsource\n\n\nGhApi.enable_pages\n\n GhApi.enable_pages (branch=None, path='/')\n\nEnable or update pages for a repo to point to a branch and path.\nbranch is set to the default branch if None. path must be /docs or /.\n\nres = api.enable_pages(branch='new-branch', path='/')\n\ntest_eq(res.source.branch, 'new-branch')\ntest_eq(res.source.path, '/')\n\napi.repos.delete_pages_site()\napi.delete_branch('new-branch')",
    "crumbs": [
      "GhApi details"
    ]
  }
]